{"version":3,"file":"maptalks.three.js","sources":["../src/util/ThreeAdaptUtil.ts","../src/util/fatline/LineSegmentsGeometry.ts","../src/util/fatline/LineMaterial.ts","../src/util/fatline/LineSegments2.ts","../src/util/fatline/LineGeometry.ts","../src/util/fatline/Line2.ts","../src/BaseObject.ts","../src/util/MergeGeometryUtil.ts","../src/util/BarUtil.ts","../src/Bar.ts","../src/util/index.ts","../node_modules/earcut/src/earcut.js","../node_modules/deyihu-geometry-extrude/src/simplify.js","../node_modules/deyihu-geometry-extrude/src/math.js","../node_modules/deyihu-geometry-extrude/src/main.js","../src/util/GeoJSONUtil.ts","../src/util/LineUtil.ts","../src/Line.ts","../src/util/ExtrudeUtil.ts","../src/ExtrudeLine.ts","../src/ExtrudePolygon.ts","../src/Model.ts","../src/util/GeoUtil.ts","../src/ExtrudeLineTrail.ts","../src/MergedMixin.ts","../src/worker/worker.ts","../src/worker/MeshActor.ts","../src/ExtrudePolygons.ts","../src/util/IdentifyUtil.ts","../src/Point.ts","../src/util/BBox.ts","../src/Points.ts","../src/Bars.ts","../src/ExtrudeLines.ts","../src/Lines.ts","../src/queue/TileDataQueue.ts","../src/util/CanvasUtil.ts","../src/BaseVectorTileLayer.ts","../src/ThreeVectorTileLayer.ts","../src/util/GeometryUtil.ts","../src/Terrain.ts","../src/TerrainVectorTileLayer.ts","../src/util/heatmap/Intensity.ts","../src/util/heatmap/HeatMapUtil.ts","../src/HeatMap.ts","../src/GPUPick.ts","../src/FatLine.ts","../src/FatLines.ts","../src/Box.ts","../src/Boxs.ts","../src/worker/getworker.ts","../src/index.ts"],"sourcesContent":["\r\nimport * as THREE from 'three';\r\n\r\n/**\r\n * three api adapt\r\n */\r\nconst REVISION = parseInt(THREE.REVISION.replace('dev', ''));\r\n//Three does not print version information now. Output the version of three to find compatibility problems\r\nconsole.log(`maptalks.three log: current three.js version is %c${REVISION}`, 'color:red;font-size: 16px;font-weight: bold;');\r\n/**\r\n *\r\n * @param {THREE.BufferGeometry} bufferGeomertry\r\n * @param {String} key\r\n * @param {*} value\r\n */\r\nexport function addAttribute(bufferGeomertry: THREE.BufferGeometry, key: string, value: THREE.BufferAttribute | THREE.InterleavedBufferAttribute): THREE.BufferGeometry {\r\n    if (REVISION > 109) {\r\n        bufferGeomertry.setAttribute(key, value);\r\n    } else {\r\n        bufferGeomertry.addAttribute(key, value);\r\n    }\r\n    return bufferGeomertry;\r\n}\r\n\r\nexport function setRaycasterLinePrecision(raycaster: THREE.Raycaster, linePrecision: number): void {\r\n    if (REVISION > 113) {\r\n        raycaster.params.Line.threshold = linePrecision;\r\n    } else {\r\n        (raycaster as any).linePrecision = linePrecision;\r\n    }\r\n}\r\n\r\nexport function getVertexColors(): number | boolean {\r\n    if ((THREE as any).VertexColors) {\r\n        return (THREE as any).VertexColors;\r\n    }\r\n    return true;\r\n\r\n}\r\n","/**\r\n * @author WestLangley / http://github.com/WestLangley\r\n *\r\n */\r\nimport * as THREE from 'three';\r\nimport { addAttribute } from '../ThreeAdaptUtil';\r\n\r\nclass LineSegmentsGeometry extends THREE.InstancedBufferGeometry {\r\n    isLineSegmentsGeometry: boolean = true;\r\n    constructor() {\r\n        super();\r\n        this.type = 'LineSegmentsGeometry';\r\n        var positions = [-1, 2, 0, 1, 2, 0, -1, 1, 0, 1, 1, 0, -1, 0, 0, 1, 0, 0, -1, -1, 0, 1, -1, 0];\r\n        var uvs = [-1, 2, 1, 2, -1, 1, 1, 1, -1, -1, 1, -1, -1, -2, 1, -2];\r\n        var index = [0, 2, 1, 2, 3, 1, 2, 4, 3, 4, 5, 3, 4, 6, 5, 6, 7, 5];\r\n\r\n        this.setIndex(index);\r\n        addAttribute(this, 'position', new THREE.Float32BufferAttribute(positions, 3));\r\n        addAttribute(this, 'uv', new THREE.Float32BufferAttribute(uvs, 2));\r\n    }\r\n\r\n    // THREE.InstancedBufferGeometry.call(this);\r\n\r\n\r\n    // var plane = new THREE.BufferGeometry();\r\n\r\n    // this.addAttribute('position', new THREE.Float32BufferAttribute(positions, 3));\r\n    // this.addAttribute('uv', new THREE.Float32BufferAttribute(uvs, 2));\r\n\r\n    applyMatrix(matrix) {\r\n\r\n        var start = this.attributes.instanceStart;\r\n        var end = this.attributes.instanceEnd;\r\n\r\n        if (start !== undefined) {\r\n\r\n            matrix.applyToBufferAttribute(start);\r\n\r\n            matrix.applyToBufferAttribute(end);\r\n\r\n            (start as any).data.needsUpdate = true;\r\n\r\n        }\r\n\r\n        if (this.boundingBox !== null) {\r\n\r\n            this.computeBoundingBox();\r\n\r\n        }\r\n\r\n        if (this.boundingSphere !== null) {\r\n\r\n            this.computeBoundingSphere();\r\n\r\n        }\r\n\r\n        return this;\r\n\r\n    }\r\n\r\n    setPositions(array) {\r\n\r\n        var lineSegments;\r\n\r\n        if (array instanceof Float32Array) {\r\n\r\n            lineSegments = array;\r\n\r\n        } else if (Array.isArray(array)) {\r\n\r\n            lineSegments = new Float32Array(array);\r\n\r\n        }\r\n\r\n        var instanceBuffer = new THREE.InstancedInterleavedBuffer(lineSegments, 6, 1); // xyz, xyz\r\n\r\n        addAttribute(this, 'instanceStart', new THREE.InterleavedBufferAttribute(instanceBuffer, 3, 0));\r\n        addAttribute(this, 'instanceEnd', new THREE.InterleavedBufferAttribute(instanceBuffer, 3, 3));\r\n        // this.addAttribute('instanceStart', new THREE.InterleavedBufferAttribute(instanceBuffer, 3, 0)); // xyz\r\n        // this.addAttribute('instanceEnd', new THREE.InterleavedBufferAttribute(instanceBuffer, 3, 3)); // xyz\r\n\r\n        //\r\n\r\n        this.computeBoundingBox();\r\n        this.computeBoundingSphere();\r\n\r\n        return this;\r\n\r\n    }\r\n\r\n    setColors(array) {\r\n\r\n        var colors;\r\n\r\n        if (array instanceof Float32Array) {\r\n\r\n            colors = array;\r\n\r\n        } else if (Array.isArray(array)) {\r\n\r\n            colors = new Float32Array(array);\r\n\r\n        }\r\n\r\n        var instanceColorBuffer = new THREE.InstancedInterleavedBuffer(colors, 6, 1); // rgb, rgb\r\n        addAttribute(this, 'instanceColorStart', new THREE.InterleavedBufferAttribute(instanceColorBuffer, 3, 0));\r\n        addAttribute(this, 'instanceColorEnd', new THREE.InterleavedBufferAttribute(instanceColorBuffer, 3, 3));\r\n        // this.addAttribute('instanceColorStart', new THREE.InterleavedBufferAttribute(instanceColorBuffer, 3, 0)); // rgb\r\n        // this.addAttribute('instanceColorEnd', new THREE.InterleavedBufferAttribute(instanceColorBuffer, 3, 3)); // rgb\r\n\r\n        return this;\r\n\r\n    }\r\n\r\n    fromWireframeGeometry(geometry) {\r\n\r\n        this.setPositions(geometry.attributes.position.array);\r\n\r\n        return this;\r\n\r\n    }\r\n\r\n    fromEdgesGeometry(geometry) {\r\n\r\n        this.setPositions(geometry.attributes.position.array);\r\n\r\n        return this;\r\n\r\n    }\r\n\r\n    fromMesh(mesh) {\r\n\r\n        this.fromWireframeGeometry(new THREE.WireframeGeometry(mesh.geometry));\r\n\r\n        // set colors, maybe\r\n\r\n        return this;\r\n\r\n    }\r\n\r\n    fromLineSegements(lineSegments) {\r\n\r\n        var geometry = lineSegments.geometry;\r\n\r\n        if (geometry.isGeometry) {\r\n\r\n            this.setPositions(geometry.vertices);\r\n\r\n        } else if (geometry.isBufferGeometry) {\r\n\r\n            this.setPositions(geometry.position.array); // assumes non-indexed\r\n\r\n        }\r\n\r\n        // set colors, maybe\r\n\r\n        return this;\r\n\r\n    }\r\n\r\n    computeBoundingBox() {\r\n\r\n        var box = new THREE.Box3();\r\n\r\n        if (this.boundingBox === null) {\r\n\r\n            this.boundingBox = new THREE.Box3();\r\n\r\n        }\r\n\r\n        var start = this.attributes.instanceStart;\r\n        var end = this.attributes.instanceEnd;\r\n\r\n        if (start !== undefined && end !== undefined) {\r\n\r\n            this.boundingBox.setFromBufferAttribute(start as any);\r\n\r\n            box.setFromBufferAttribute(end as any);\r\n\r\n            this.boundingBox.union(box);\r\n\r\n        }\r\n\r\n    }\r\n\r\n    computeBoundingSphere() {\r\n\r\n        var vector = new THREE.Vector3();\r\n\r\n        if (this.boundingSphere === null) {\r\n\r\n            this.boundingSphere = new THREE.Sphere();\r\n\r\n        }\r\n\r\n        if (this.boundingBox === null) {\r\n\r\n            this.computeBoundingBox();\r\n\r\n        }\r\n\r\n        var start = this.attributes.instanceStart;\r\n        var end = this.attributes.instanceEnd;\r\n\r\n        if (start !== undefined && end !== undefined) {\r\n\r\n            var center = this.boundingSphere.center;\r\n\r\n            this.boundingBox.getCenter(center);\r\n\r\n            var maxRadiusSq = 0;\r\n\r\n            for (var i = 0, il = start.count; i < il; i++) {\r\n\r\n                vector.fromBufferAttribute(start, i);\r\n                maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(vector));\r\n\r\n                vector.fromBufferAttribute(end, i);\r\n                maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(vector));\r\n\r\n            }\r\n\r\n            this.boundingSphere.radius = Math.sqrt(maxRadiusSq);\r\n\r\n            if (isNaN(this.boundingSphere.radius)) {\r\n\r\n                console.error('THREE.LineSegmentsGeometry.computeBoundingSphere(): Computed radius is NaN. The instanced position data is likely to have NaN values.', this);\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    toJSON() {\r\n\r\n        // todo\r\n\r\n    }\r\n\r\n    // clone: function () {\r\n\r\n    //     // todo\r\n\r\n    // },\r\n\r\n    // eslint-disable-next-line no-unused-vars\r\n    copy(source) {\r\n\r\n        // todo\r\n\r\n        return this;\r\n\r\n    }\r\n\r\n};\r\nexport default LineSegmentsGeometry;\r\n","/**\r\n * @author WestLangley / http://github.com/WestLangley\r\n *\r\n * parameters = {\r\n *  color: <hex>,\r\n *  linewidth: <float>,\r\n *  dashed: <boolean>,\r\n *  dashScale: <float>,\r\n *  dashSize: <float>,\r\n *  gapSize: <float>,\r\n *  resolution: <Vector2>, // to be set by renderer\r\n * }\r\n */\r\nimport * as THREE from 'three';\r\n\r\nconst UniformsLib: { [key: string]: any } = {}, ShaderLib = {};\r\n\r\nUniformsLib.line = {\r\n\r\n\tlinewidth: { value: 1 },\r\n\tresolution: { value: new THREE.Vector2(1, 1) },\r\n\tdashScale: { value: 1 },\r\n\tdashSize: { value: 1 },\r\n\tgapSize: { value: 1 } // todo FIX - maybe change to totalSize\r\n\r\n};\r\n\r\nShaderLib['line'] = {\r\n\r\n\tuniforms: THREE.UniformsUtils.merge([\r\n\t\tTHREE.UniformsLib.common,\r\n\t\tTHREE.UniformsLib.fog,\r\n\t\tUniformsLib.line\r\n\t]),\r\n\r\n\tvertexShader:\r\n\t\t`\r\n\t\t#include <common>\r\n\t\t#include <color_pars_vertex>\r\n\t\t#include <fog_pars_vertex>\r\n\t\t#include <logdepthbuf_pars_vertex>\r\n\t\t#include <clipping_planes_pars_vertex>\r\n\r\n\t\tuniform float linewidth;\r\n\t\tuniform vec2 resolution;\r\n\r\n\t\tattribute vec3 instanceStart;\r\n\t\tattribute vec3 instanceEnd;\r\n\r\n\t\tattribute vec3 instanceColorStart;\r\n\t\tattribute vec3 instanceColorEnd;\r\n\r\n\t\tvarying vec2 vUv;\r\n\r\n\t\t#ifdef USE_DASH\r\n\r\n\t\t\tuniform float dashScale;\r\n\t\t\tattribute float instanceDistanceStart;\r\n\t\t\tattribute float instanceDistanceEnd;\r\n\t\t\tvarying float vLineDistance;\r\n\r\n\t\t#endif\r\n\r\n\t\tvoid trimSegment( const in vec4 start, inout vec4 end ) {\r\n\r\n\t\t\t// trim end segment so it terminates between the camera plane and the near plane\r\n\r\n\t\t\t// conservative estimate of the near plane\r\n\t\t\tfloat a = projectionMatrix[ 2 ][ 2 ]; // 3nd entry in 3th column\r\n\t\t\tfloat b = projectionMatrix[ 3 ][ 2 ]; // 3nd entry in 4th column\r\n\t\t\tfloat nearEstimate = - 0.5 * b / a;\r\n\r\n\t\t\tfloat alpha = ( nearEstimate - start.z ) / ( end.z - start.z );\r\n\r\n\t\t\tend.xyz = mix( start.xyz, end.xyz, alpha );\r\n\r\n\t\t}\r\n\r\n\t\tvoid main() {\r\n\r\n\t\t\t#ifdef USE_COLOR\r\n\r\n\t\t\t\tvColor.xyz = ( position.y < 0.5 ) ? instanceColorStart : instanceColorEnd;\r\n\r\n\t\t\t#endif\r\n\r\n\t\t\t#ifdef USE_DASH\r\n\r\n\t\t\t\tvLineDistance = ( position.y < 0.5 ) ? dashScale * instanceDistanceStart : dashScale * instanceDistanceEnd;\r\n\r\n\t\t\t#endif\r\n\r\n\t\t\tfloat aspect = resolution.x / resolution.y;\r\n\r\n\t\t\tvUv = uv;\r\n\r\n\t\t\t// camera space\r\n\t\t\tvec4 start = modelViewMatrix * vec4( instanceStart, 1.0 );\r\n\t\t\tvec4 end = modelViewMatrix * vec4( instanceEnd, 1.0 );\r\n\r\n\t\t\t// special case for perspective projection, and segments that terminate either in, or behind, the camera plane\r\n\t\t\t// clearly the gpu firmware has a way of addressing this issue when projecting into ndc space\r\n\t\t\t// but we need to perform ndc-space calculations in the shader, so we must address this issue directly\r\n\t\t\t// perhaps there is a more elegant solution -- WestLangley\r\n\r\n\t\t\tbool perspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 ); // 4th entry in the 3rd column\r\n\r\n\t\t\tif ( perspective ) {\r\n\r\n\t\t\t\tif ( start.z < 0.0 && end.z >= 0.0 ) {\r\n\r\n\t\t\t\t\ttrimSegment( start, end );\r\n\r\n\t\t\t\t} else if ( end.z < 0.0 && start.z >= 0.0 ) {\r\n\r\n\t\t\t\t\ttrimSegment( end, start );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// clip space\r\n\t\t\tvec4 clipStart = projectionMatrix * start;\r\n\t\t\tvec4 clipEnd = projectionMatrix * end;\r\n\r\n\t\t\t// ndc space\r\n\t\t\tvec2 ndcStart = clipStart.xy / clipStart.w;\r\n\t\t\tvec2 ndcEnd = clipEnd.xy / clipEnd.w;\r\n\r\n\t\t\t// direction\r\n\t\t\tvec2 dir = ndcEnd - ndcStart;\r\n\r\n\t\t\t// account for clip-space aspect ratio\r\n\t\t\tdir.x *= aspect;\r\n\t\t\tdir = normalize( dir );\r\n\r\n\t\t\t// perpendicular to dir\r\n\t\t\tvec2 offset = vec2( dir.y, - dir.x );\r\n\r\n\t\t\t// undo aspect ratio adjustment\r\n\t\t\tdir.x /= aspect;\r\n\t\t\toffset.x /= aspect;\r\n\r\n\t\t\t// sign flip\r\n\t\t\tif ( position.x < 0.0 ) offset *= - 1.0;\r\n\r\n\t\t\t// endcaps\r\n\t\t\tif ( position.y < 0.0 ) {\r\n\r\n\t\t\t\toffset += - dir;\r\n\r\n\t\t\t} else if ( position.y > 1.0 ) {\r\n\r\n\t\t\t\toffset += dir;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// adjust for linewidth\r\n\t\t\toffset *= linewidth;\r\n\r\n\t\t\t// adjust for clip-space to screen-space conversion // maybe resolution should be based on viewport ...\r\n\t\t\toffset /= resolution.y;\r\n\r\n\t\t\t// select end\r\n\t\t\tvec4 clip = ( position.y < 0.5 ) ? clipStart : clipEnd;\r\n\r\n\t\t\t// back to clip space\r\n\t\t\toffset *= clip.w;\r\n\r\n\t\t\tclip.xy += offset;\r\n\r\n\t\t\tgl_Position = clip;\r\n\r\n\t\t\tvec4 mvPosition = ( position.y < 0.5 ) ? start : end; // this is an approximation\r\n\r\n\t\t\t#include <logdepthbuf_vertex>\r\n\t\t\t#include <clipping_planes_vertex>\r\n\t\t\t#include <fog_vertex>\r\n\r\n\t\t}\r\n\t\t`,\r\n\r\n\tfragmentShader:\r\n\t\t`\r\n\t\tuniform vec3 diffuse;\r\n\t\tuniform float opacity;\r\n\r\n\t\t#ifdef USE_DASH\r\n\r\n\t\t\tuniform float dashSize;\r\n\t\t\tuniform float gapSize;\r\n\r\n\t\t#endif\r\n\r\n\t\tvarying float vLineDistance;\r\n\r\n\t\t#include <common>\r\n\t\t#include <color_pars_fragment>\r\n\t\t#include <fog_pars_fragment>\r\n\t\t#include <logdepthbuf_pars_fragment>\r\n\t\t#include <clipping_planes_pars_fragment>\r\n\r\n\t\tvarying vec2 vUv;\r\n\r\n\t\tvoid main() {\r\n\r\n\t\t\t#include <clipping_planes_fragment>\r\n\r\n\t\t\t#ifdef USE_DASH\r\n\r\n\t\t\t\tif ( vUv.y < - 1.0 || vUv.y > 1.0 ) discard; // discard endcaps\r\n\r\n\t\t\t\tif ( mod( vLineDistance, dashSize + gapSize ) > dashSize ) discard; // todo - FIX\r\n\r\n\t\t\t#endif\r\n\r\n\t\t\tif ( abs( vUv.y ) > 1.0 ) {\r\n\r\n\t\t\t\tfloat a = vUv.x;\r\n\t\t\t\tfloat b = ( vUv.y > 0.0 ) ? vUv.y - 1.0 : vUv.y + 1.0;\r\n\t\t\t\tfloat len2 = a * a + b * b;\r\n\r\n\t\t\t\tif ( len2 > 1.0 ) discard;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvec4 diffuseColor = vec4( diffuse, opacity );\r\n\r\n\t\t\t#include <logdepthbuf_fragment>\r\n\t\t\t#include <color_fragment>\r\n\r\n\t\t\tgl_FragColor = vec4( diffuseColor.rgb, diffuseColor.a );\r\n\r\n\t\t\t#include <premultiplied_alpha_fragment>\r\n\t\t\t#include <tonemapping_fragment>\r\n\t\t\t#include <encodings_fragment>\r\n\t\t\t#include <fog_fragment>\r\n\r\n\t\t}\r\n\t\t`\r\n};\r\n\r\nclass LineMaterial extends THREE.ShaderMaterial {\r\n\tdashed: boolean = true;\r\n\tisLineMaterial: boolean = true;\r\n\ttype: string = 'LineMaterial';\r\n\tconstructor(parameters) {\r\n\t\tsuper({\r\n\t\t\tuniforms: THREE.UniformsUtils.clone(ShaderLib['line'].uniforms),\r\n\t\t\tvertexShader: ShaderLib['line'].vertexShader,\r\n\t\t\tfragmentShader: ShaderLib['line'].fragmentShader\r\n\t\t})\r\n\r\n\t\tObject.defineProperties(this, {\r\n\r\n\t\t\tcolor: {\r\n\r\n\t\t\t\tenumerable: true,\r\n\r\n\t\t\t\tget: function () {\r\n\r\n\t\t\t\t\treturn this.uniforms.diffuse.value;\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tset: function (value) {\r\n\r\n\t\t\t\t\tthis.uniforms.diffuse.value = value;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t},\r\n\r\n\t\t\tlinewidth: {\r\n\r\n\t\t\t\tenumerable: true,\r\n\r\n\t\t\t\tget: function () {\r\n\r\n\t\t\t\t\treturn this.uniforms.linewidth.value;\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tset: function (value) {\r\n\r\n\t\t\t\t\tthis.uniforms.linewidth.value = value;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t},\r\n\r\n\t\t\tdashScale: {\r\n\r\n\t\t\t\tenumerable: true,\r\n\r\n\t\t\t\tget: function () {\r\n\r\n\t\t\t\t\treturn this.uniforms.dashScale.value;\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tset: function (value) {\r\n\r\n\t\t\t\t\tthis.uniforms.dashScale.value = value;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t},\r\n\r\n\t\t\tdashSize: {\r\n\r\n\t\t\t\tenumerable: true,\r\n\r\n\t\t\t\tget: function () {\r\n\r\n\t\t\t\t\treturn this.uniforms.dashSize.value;\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tset: function (value) {\r\n\r\n\t\t\t\t\tthis.uniforms.dashSize.value = value;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t},\r\n\r\n\t\t\tgapSize: {\r\n\r\n\t\t\t\tenumerable: true,\r\n\r\n\t\t\t\tget: function () {\r\n\r\n\t\t\t\t\treturn this.uniforms.gapSize.value;\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tset: function (value) {\r\n\r\n\t\t\t\t\tthis.uniforms.gapSize.value = value;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t},\r\n\r\n\t\t\tresolution: {\r\n\r\n\t\t\t\tenumerable: true,\r\n\r\n\t\t\t\tget: function () {\r\n\r\n\t\t\t\t\treturn this.uniforms.resolution.value;\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tset: function (value) {\r\n\r\n\t\t\t\t\tthis.uniforms.resolution.value.copy(value);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.setValues(parameters);\r\n\t}\r\n};\r\n\r\n// LineMaterial.prototype = Object.create(THREE.ShaderMaterial.prototype);\r\n// LineMaterial.prototype.constructor = LineMaterial;\r\n\r\n// LineMaterial.prototype.isLineMaterial = true;\r\n\r\n// LineMaterial.prototype.copy = function (source) {\r\n\r\n// \t// THREE.ShaderMaterial.prototype.copy.call(this, source);\r\n\r\n// \tthis.color.copy(source.color);\r\n\r\n// \tthis.linewidth = source.linewidth;\r\n\r\n// \tthis.resolution = source.resolution;\r\n\r\n// \t// todo\r\n\r\n// \treturn this;\r\n\r\n// };\r\n\r\nexport default LineMaterial;\r\n","/**\r\n * @author WestLangley / http://github.com/WestLangley\r\n *\r\n */\r\nimport * as THREE from 'three';\r\nimport LineSegmentsGeometry from './LineSegmentsGeometry';\r\nimport { addAttribute } from '../ThreeAdaptUtil';\r\nimport LineMaterial from './LineMaterial';\r\n\r\nclass LineSegments2 extends THREE.Mesh {\r\n    isLineSegments2: boolean = true;\r\n    constructor(geometry, material) {\r\n        super(geometry, material);\r\n        this.type = 'LineSegments2';\r\n\r\n        this.geometry = geometry !== undefined ? geometry : new LineSegmentsGeometry();\r\n        this.material = material !== undefined ? material : new LineMaterial({ color: Math.random() * 0xffffff });\r\n    }\r\n\r\n    computeLineDistances() { // for backwards-compatability, but could be a method of LineSegmentsGeometry...\r\n\r\n        var start = new THREE.Vector3();\r\n        var end = new THREE.Vector3();\r\n\r\n\r\n        var geometry = this.geometry;\r\n\r\n        var instanceStart = geometry.attributes.instanceStart;\r\n        var instanceEnd = geometry.attributes.instanceEnd;\r\n        var lineDistances = new Float32Array(2 * (instanceStart as any).data.count);\r\n\r\n        for (var i = 0, j = 0, l = (instanceStart as any).data.count; i < l; i++, j += 2) {\r\n\r\n            start.fromBufferAttribute(instanceStart, i);\r\n            end.fromBufferAttribute(instanceEnd, i);\r\n\r\n            lineDistances[j] = (j === 0) ? 0 : lineDistances[j - 1];\r\n            lineDistances[j + 1] = lineDistances[j] + start.distanceTo(end);\r\n\r\n        }\r\n\r\n        var instanceDistanceBuffer = new THREE.InstancedInterleavedBuffer(lineDistances, 2, 1); // d0, d1\r\n\r\n        addAttribute(geometry, 'instanceDistanceStart', new THREE.InterleavedBufferAttribute(instanceDistanceBuffer, 1, 0));\r\n        addAttribute(geometry, 'instanceDistanceEnd', new THREE.InterleavedBufferAttribute(instanceDistanceBuffer, 1, 1));\r\n        // geometry.addAttribute('instanceDistanceStart', new THREE.InterleavedBufferAttribute(instanceDistanceBuffer, 1, 0)); // d0\r\n        // geometry.addAttribute('instanceDistanceEnd', new THREE.InterleavedBufferAttribute(instanceDistanceBuffer, 1, 1)); // d1\r\n\r\n        return this;\r\n\r\n\r\n    }\r\n\r\n};\r\nexport default LineSegments2;\r\n","/**\r\n * @author WestLangley / http://github.com/WestLangley\r\n *\r\n */\r\n// import * as THREE from 'three';\r\nimport LineSegmentsGeometry from './LineSegmentsGeometry';\r\n\r\nclass LineGeometry extends LineSegmentsGeometry {\r\n    isLineGeometry: boolean = true;\r\n    constructor() {\r\n        super();\r\n        this.type = 'LineGeometry';\r\n    }\r\n\r\n    fromLine(line) {\r\n\r\n        var geometry = line.geometry;\r\n\r\n        if (geometry.isGeometry) {\r\n\r\n            this.setPositions(geometry.vertices);\r\n\r\n        } else if (geometry.isBufferGeometry) {\r\n\r\n            this.setPositions(geometry.position.array); // assumes non-indexed\r\n\r\n        }\r\n\r\n        return this;\r\n    }\r\n};\r\nexport default LineGeometry;\r\n","/**\r\n * @author WestLangley / http://github.com/WestLangley\r\n *\r\n */\r\n// import * as THREE from 'three';\r\nimport LineSegments2 from './LineSegments2';\r\nimport LineGeometry from './LineGeometry';\r\nimport LineMaterial from './LineMaterial';\r\n\r\nclass Line2 extends LineSegments2 {\r\n    isLine2: boolean = true;\r\n    _colorIndex: number;\r\n    constructor(geometry, material) {\r\n        super(geometry, material);\r\n        this.type = 'Line2';\r\n\r\n        this.geometry = geometry !== undefined ? geometry : new LineGeometry();\r\n        this.material = material !== undefined ? material : new LineMaterial({ color: Math.random() * 0xffffff });\r\n    }\r\n\r\n    copy(source) {\r\n\r\n        return this;\r\n    }\r\n};\r\nexport default Line2;\r\n","\"use strict\"\r\nimport * as maptalks from 'maptalks';\r\nimport * as THREE from 'three';\r\nimport { BaseObjectOptionType } from './type/BaseOption';\r\nimport Line2 from './util/fatline/Line2';\r\n\r\nconst OPTIONS = {\r\n    interactive: true,\r\n    altitude: 0,\r\n    minZoom: 0,\r\n    maxZoom: 30,\r\n    asynchronous: false\r\n};\r\n\r\n/**\r\n * a Class for Eventable\r\n */\r\nfunction Base() {\r\n\r\n}\r\n\r\n// class Base {\r\n//     constructor() {\r\n\r\n//     }\r\n// }\r\n\r\n/**\r\n * EVENTS=[\r\n *  'add',\r\n *  'remove',\r\n    'mousemove',\r\n    'click',\r\n    'mousedown',\r\n    'mouseup',\r\n    'dblclick',\r\n    'contextmenu',\r\n    'touchstart',\r\n    'touchmove',\r\n    'touchend',\r\n    'mouseover',\r\n    'mouseout',\r\n    'idchange',\r\n    'propertieschange',\r\n    'show',\r\n    'hide',\r\n    'symbolchange'\r\n     empty\r\n];\r\n * This is the base class for all 3D objects\r\n *\r\n *\r\n * Its function and maptalks.geometry are as similar as possible\r\n *\r\n * maptalks.Eventable(Base) return a Class  https://github.com/maptalks/maptalks.js/blob/master/src/core/Eventable.js\r\n *\r\n */\r\nclass BaseObject extends maptalks.Eventable(Base) {\r\n    isAdd: boolean = false;\r\n    object3d: THREE.Object3D;\r\n    options: BaseObjectOptionType;\r\n    toolTip: maptalks.ui.ToolTip;\r\n    infoWindow: maptalks.ui.InfoWindow;\r\n    _mouseover: boolean = false;\r\n    _showPlayer: any;\r\n    _visible: boolean = true;\r\n    _zoomVisible: boolean = true;\r\n    _vt: any;\r\n    picked: boolean = false;\r\n    pickObject3d: THREE.Object3D;\r\n    id: string | number;\r\n    type: string;\r\n    _baseObjects: BaseObject[];\r\n\r\n    readonly isBaseObject: boolean = true;\r\n\r\n    constructor(id?: string | number) {\r\n        super();\r\n        if (id === undefined) {\r\n            id = maptalks.Util.GUID();\r\n        }\r\n        this.id = id;\r\n    }\r\n\r\n    addTo(layer: any) {\r\n        if (layer && layer.type === 'ThreeLayer') {\r\n            layer.addMesh([this]);\r\n        } else {\r\n            console.error('layer only support maptalks.ThreeLayer');\r\n        }\r\n        return this;\r\n    }\r\n\r\n    remove() {\r\n        const layer = this.getLayer();\r\n        if (layer) {\r\n            layer.removeMesh([this]);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    getObject3d(): THREE.Object3D {\r\n        return this.object3d;\r\n    }\r\n\r\n    getId(): string | number {\r\n        return this.id;\r\n    }\r\n\r\n    setId(id: string | number) {\r\n        const oldId = this.getId();\r\n        this.id = id;\r\n        this._fire('idchange', {\r\n            'old': oldId,\r\n            'new': id,\r\n            'target': this\r\n        });\r\n        return this;\r\n    }\r\n\r\n    getType(): string {\r\n        return this.type;\r\n    }\r\n\r\n    getOptions(): BaseObjectOptionType {\r\n        return this.options;\r\n    }\r\n\r\n    getProperties(): object {\r\n        return (this.options || {}).properties;\r\n    }\r\n\r\n    setProperties(property: object) {\r\n        const old = Object.assign({}, this.getProperties());\r\n        this.options.properties = property;\r\n        this._fire('propertieschange', {\r\n            'old': old,\r\n            'new': property,\r\n            'target': this\r\n        });\r\n        return this;\r\n    }\r\n\r\n\r\n    getLayer() {\r\n        return this.options.layer;\r\n    }\r\n\r\n\r\n    // eslint-disable-next-line consistent-return\r\n    getMap(): maptalks.Map {\r\n        const layer = this.getLayer();\r\n        if (layer) {\r\n            return layer.getMap();\r\n        }\r\n    }\r\n\r\n    // eslint-disable-next-line consistent-return\r\n    getCenter(): maptalks.Coordinate {\r\n        const options = this.getOptions();\r\n        const { coordinate, lineString, polygon } = options;\r\n        if (coordinate) {\r\n            return coordinate instanceof maptalks.Coordinate ? coordinate : new maptalks.Coordinate(coordinate);\r\n        } else {\r\n            const geometry = polygon || lineString;\r\n            if (geometry && geometry.getCenter) {\r\n                return geometry.getCenter();\r\n            }\r\n        }\r\n    }\r\n\r\n    getAltitude(): number {\r\n        return this.getOptions().altitude;\r\n    }\r\n\r\n\r\n    /**\r\n     * Different objects need to implement their own methods\r\n     * @param {*} altitude\r\n     */\r\n    setAltitude(altitude: number) {\r\n        if (maptalks.Util.isNumber(altitude)) {\r\n            const z = this.getLayer().distanceToVector3(altitude, altitude).x;\r\n            this.getObject3d().position.z = z;\r\n            this.options.altitude = altitude;\r\n            if (this.pickObject3d) {\r\n                this.pickObject3d.position.z = z;\r\n            }\r\n            //fix merged mesh\r\n            if (this._baseObjects && Array.isArray(this._baseObjects)) {\r\n                for (let i = 0, len = this._baseObjects.length; i < len; i++) {\r\n                    if (this._baseObjects[i]) {\r\n                        this._baseObjects[i].getObject3d().position.z = z;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n\r\n    show() {\r\n        //  in zoom range\r\n        if (this._zoomVisible) {\r\n            this.getObject3d().visible = true;\r\n            this._fire('show');\r\n        }\r\n        this._visible = true;\r\n        return this;\r\n    }\r\n\r\n\r\n    hide() {\r\n        this.getObject3d().visible = false;\r\n        this._fire('hide');\r\n        this._visible = false;\r\n        return this;\r\n    }\r\n\r\n    isVisible(): boolean {\r\n        return (!!this.getObject3d().visible);\r\n    }\r\n\r\n\r\n    /**\r\n     *  Different objects need to implement their own methods\r\n     */\r\n    getSymbol(): THREE.Material {\r\n        return (this.getObject3d() as any).material;\r\n    }\r\n\r\n    /**\r\n     *  Different objects need to implement their own methods\r\n     * @param {*} material\r\n     */\r\n    setSymbol(material: THREE.Material) {\r\n        if (material && material instanceof THREE.Material) {\r\n            material.needsUpdate = true;\r\n            material.vertexColors = (this.getObject3d() as any).material.vertexColors;\r\n            const old = (this.getObject3d() as any).material.clone();\r\n            (this.getObject3d() as any).material = material;\r\n            this._fire('symbolchange', {\r\n                'old': old,\r\n                'new': material,\r\n                'target': this\r\n            });\r\n        }\r\n        return this;\r\n    }\r\n\r\n    setInfoWindow(options: object) {\r\n        this.removeInfoWindow();\r\n        this.infoWindow = new maptalks.ui.InfoWindow(options);\r\n        this.infoWindow.addTo(this);\r\n        return this;\r\n    }\r\n\r\n    getInfoWindow(): maptalks.ui.InfoWindow {\r\n        return this.infoWindow;\r\n    }\r\n\r\n    openInfoWindow(coordinate: maptalks.Coordinate) {\r\n        coordinate = coordinate || this.getCenter();\r\n        if (!(coordinate instanceof maptalks.Coordinate)) {\r\n            coordinate = new maptalks.Coordinate(coordinate);\r\n        }\r\n        // eslint-disable-next-line no-unused-expressions\r\n        (coordinate && this.infoWindow && this.infoWindow.show(coordinate));\r\n        return this;\r\n    }\r\n\r\n    closeInfoWindow() {\r\n        // eslint-disable-next-line no-unused-expressions\r\n        (this.infoWindow && this.infoWindow.hide());\r\n        return this;\r\n    }\r\n\r\n\r\n    removeInfoWindow() {\r\n        // eslint-disable-next-line no-unused-expressions\r\n        if (this.infoWindow) {\r\n            this.infoWindow.remove();\r\n            delete this.infoWindow;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    setToolTip(content: string, options: object) {\r\n        this.removeToolTip();\r\n        this.toolTip = new maptalks.ui.ToolTip(content, options);\r\n        this.toolTip.addTo(this);\r\n        return this;\r\n    }\r\n\r\n    getToolTip(): maptalks.ui.ToolTip {\r\n        return this.toolTip;\r\n    }\r\n\r\n    openToolTip(coordinate: maptalks.Coordinate) {\r\n        coordinate = coordinate || this.getCenter();\r\n        if (!(coordinate instanceof maptalks.Coordinate)) {\r\n            coordinate = new maptalks.Coordinate(coordinate);\r\n        }\r\n        // eslint-disable-next-line no-unused-expressions\r\n        (coordinate && this.toolTip && this.toolTip.show(coordinate));\r\n        return this;\r\n    }\r\n\r\n    closeToolTip() {\r\n        // eslint-disable-next-line no-unused-expressions\r\n        (this.toolTip && this.toolTip.hide());\r\n        return this;\r\n    }\r\n\r\n    removeToolTip() {\r\n        // eslint-disable-next-line no-unused-expressions\r\n        if (this.toolTip) {\r\n            this.toolTip.remove();\r\n            delete this.toolTip;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * different components should implement their own animation methods\r\n     * @param {*} options\r\n     * @param {*} cb\r\n     */\r\n    // eslint-disable-next-line no-unused-vars\r\n    animateShow(options: object = {}, cb: Function) {\r\n        if (this._showPlayer) {\r\n            this._showPlayer.cancel();\r\n        }\r\n        if (maptalks.Util.isFunction(options)) {\r\n            options = {};\r\n            cb = options as Function;\r\n        }\r\n        const duration = options['duration'] || 1000,\r\n            easing = options['easing'] || 'out';\r\n        const player = this._showPlayer = maptalks.animation.Animation.animate({\r\n            'scale': 1\r\n        }, {\r\n            'duration': duration,\r\n            'easing': easing\r\n        }, frame => {\r\n            const scale = frame.styles.scale;\r\n            if (scale > 0) {\r\n                this.getObject3d().scale.z = scale;\r\n            }\r\n            if (cb) {\r\n                cb(frame, scale);\r\n            }\r\n        });\r\n        player.play();\r\n        return player;\r\n    }\r\n\r\n\r\n    getMinZoom(): number {\r\n        return this.getOptions().minZoom;\r\n    }\r\n\r\n\r\n    getMaxZoom(): number {\r\n        return this.getOptions().maxZoom;\r\n    }\r\n\r\n    isAsynchronous(): boolean {\r\n        return this.getOptions().asynchronous;\r\n    }\r\n\r\n    fire(eventType: string, param: any) {\r\n        this._fire(eventType, param);\r\n        if (this._vt && this._vt.onSelectMesh) {\r\n            this._vt.onSelectMesh(eventType, param);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    config() {\r\n\r\n        return this;\r\n    }\r\n\r\n    setPickObject3d(object3d: THREE.Object3D) {\r\n        this.pickObject3d = object3d;\r\n        this.pickObject3d['__parent'] = this;\r\n        return this;\r\n    }\r\n\r\n\r\n    /**\r\n     * more method support\r\n     * @param {*} options\r\n     */\r\n\r\n    /**\r\n     *\r\n     * @param {*} options\r\n     */\r\n\r\n    _initOptions(options: BaseObjectOptionType) {\r\n        this.options = maptalks.Util.extend({} as BaseObjectOptionType, OPTIONS, options);\r\n        return this;\r\n    }\r\n\r\n    _createMesh(geometry: THREE.BufferGeometry, material: THREE.Material) {\r\n        this.object3d = new THREE.Mesh(geometry, material);\r\n        this.object3d['__parent'] = this;\r\n        return this;\r\n    }\r\n\r\n    _createGroup() {\r\n        this.object3d = new THREE.Group();\r\n        this.object3d['__parent'] = this;\r\n        return this;\r\n    }\r\n\r\n\r\n    _createLine(geometry: THREE.BufferGeometry, material: THREE.LineBasicMaterial | THREE.LineDashedMaterial) {\r\n        this.object3d = new THREE.Line(geometry, material);\r\n        (this.object3d as THREE.Line).computeLineDistances();\r\n        this.object3d['__parent'] = this;\r\n        return this;\r\n    }\r\n\r\n    _createLine2(geometry, material) {\r\n        this.object3d = new Line2(geometry, material);\r\n        (this.object3d as any).computeLineDistances();\r\n        this.object3d['__parent'] = this;\r\n        return this;\r\n    }\r\n\r\n\r\n    // eslint-disable-next-line no-unused-vars\r\n    _createPoints(geometry: THREE.BufferGeometry, material: THREE.PointsMaterial) {\r\n        //Serving for particles\r\n        this.object3d = new THREE.Points(geometry, material);\r\n        this.object3d['__parent'] = this;\r\n        return this;\r\n    }\r\n\r\n    _createLineSegments(geometry: THREE.BufferGeometry, material: THREE.LineBasicMaterial | THREE.LineDashedMaterial) {\r\n        this.object3d = new THREE.LineSegments(geometry, material);\r\n        (this.object3d as THREE.LineSegments).computeLineDistances();\r\n        this.object3d['__parent'] = this;\r\n        return this;\r\n    }\r\n}\r\n\r\nexport default BaseObject;\r\n","\r\nimport { MergeAttributeType } from './../type/index';\r\nimport * as THREE from 'three';\r\nimport { TypedArray } from 'three';\r\nimport { addAttribute } from './ThreeAdaptUtil';\r\n\r\nexport function mergeBufferGeometries(geometries: Array<MergeAttributeType>): THREE.BufferGeometry {\r\n    const { position, normal, uv, indices } = mergeBufferGeometriesAttribute(geometries);\r\n    const bufferGeomertry = new THREE.BufferGeometry();\r\n    const color = new Float32Array(position.length);\r\n    color.fill(1, 0, position.length);\r\n    addAttribute(bufferGeomertry, 'color', new THREE.BufferAttribute(color, 3));\r\n    addAttribute(bufferGeomertry, 'normal', new THREE.BufferAttribute(normal, 3));\r\n    addAttribute(bufferGeomertry, 'position', new THREE.BufferAttribute(position, 3));\r\n    if (uv && uv.length) {\r\n        addAttribute(bufferGeomertry, 'uv', new THREE.BufferAttribute(uv, 2));\r\n    }\r\n    bufferGeomertry.setIndex(new THREE.BufferAttribute(indices, 1));\r\n    return bufferGeomertry;\r\n}\r\n\r\n\r\nexport function mergeBufferGeometriesAttribute(geometries: Array<MergeAttributeType>): MergeAttributeType {\r\n    const attributes: { [key: string]: Array<TypedArray> } = {}, attributesLen: { [key: string]: number } = {};\r\n    for (let i = 0; i < geometries.length; ++i) {\r\n        const geometry = geometries[i];\r\n        for (const name in geometry) {\r\n            if (attributes[name] === undefined) {\r\n                attributes[name] = [];\r\n                attributesLen[name] = 0;\r\n            }\r\n            attributes[name].push((geometry as any)[name]);\r\n            attributesLen[name] += (geometry as any)[name].length;\r\n        }\r\n    }\r\n    // merge attributes\r\n    const mergedGeometry: MergeAttributeType = {};\r\n    let indexOffset = 0;\r\n    const mergedIndex = new Uint32Array(attributesLen['indices']);\r\n    for (const name in attributes) {\r\n        if (name === 'indices') {\r\n            const indices = attributes[name];\r\n            let iIndex = 0;\r\n            for (let i = 0, len = indices.length; i < len; i++) {\r\n                const index = indices[i];\r\n                for (let j = 0, len1 = index.length; j < len1; j++) {\r\n                    mergedIndex[iIndex] = index[j] + indexOffset;\r\n                    iIndex++;\r\n                    // mergedIndex.push(index[j] + indexOffset);\r\n                }\r\n                indexOffset += attributes['position'][i].length / 3;\r\n            }\r\n        } else {\r\n            const mergedAttribute = mergeBufferAttributes(attributes[name], attributesLen[name]);\r\n            if (!mergedAttribute) return null;\r\n            (mergedGeometry as any)[name] = mergedAttribute;\r\n        }\r\n    }\r\n    mergedGeometry['indices'] = mergedIndex;\r\n    return mergedGeometry;\r\n}\r\n\r\n\r\n\r\nfunction mergeBufferAttributes(attributes: Array<TypedArray>, arrayLength: number): Float32Array {\r\n    const array = new Float32Array(arrayLength);\r\n    let offset = 0;\r\n    for (let i = 0; i < attributes.length; ++i) {\r\n        array.set(attributes[i], offset);\r\n        offset += attributes[i].length;\r\n    }\r\n    return array;\r\n}\r\n\r\nexport function generateBufferGeometry(data: MergeAttributeType): THREE.BufferGeometry {\r\n    //arraybuffer data\r\n    const { position, normal, uv, indices } = data;\r\n    // const color = new Float32Array(position.length);\r\n    // color.fill(1, 0, position.length);\r\n    const bufferGeomertry = new THREE.BufferGeometry();\r\n    // addAttribute(bufferGeomertry, 'color', new THREE.BufferAttribute(color, 3));\r\n    addAttribute(bufferGeomertry, 'normal', new THREE.BufferAttribute(new Float32Array(normal), 3));\r\n    addAttribute(bufferGeomertry, 'position', new THREE.BufferAttribute(new Float32Array(position), 3));\r\n    addAttribute(bufferGeomertry, 'uv', new THREE.BufferAttribute(new Float32Array(uv), 2));\r\n    bufferGeomertry.setIndex(new THREE.BufferAttribute(new Uint32Array(indices), 1));\r\n    return bufferGeomertry;\r\n}\r\n\r\nexport function generatePickBufferGeometry(geometry: THREE.BufferGeometry): THREE.BufferGeometry {\r\n    const bufferGeomertry = new THREE.BufferGeometry();\r\n    addAttribute(bufferGeomertry, 'normal', geometry.getAttribute('normal'));\r\n    addAttribute(bufferGeomertry, 'position', geometry.getAttribute('position').clone());\r\n    bufferGeomertry.setIndex(geometry.getIndex());\r\n    return bufferGeomertry;\r\n}\r\n\r\nlet defaultBufferGeometry: THREE.BufferGeometry;\r\n\r\nexport function getDefaultBufferGeometry(): THREE.BufferGeometry {\r\n    if (!defaultBufferGeometry) {\r\n        const SIZE = 0.000001;\r\n        defaultBufferGeometry = new THREE.BoxBufferGeometry(SIZE, SIZE, SIZE);\r\n    }\r\n    return defaultBufferGeometry;\r\n}\r\n","import * as THREE from 'three';\r\nimport { MergeAttributeType } from '../type/BaseAttribute';\r\nimport { mergeBufferGeometries } from './MergeGeometryUtil';\r\nimport { addAttribute } from './ThreeAdaptUtil';\r\ntype Cache = {\r\n    [key: number]: THREE.BufferGeometry\r\n}\r\nconst barGeometryCache: Cache = {};\r\n\r\nconst defaultBoxGeometry: THREE.BoxBufferGeometry = new THREE.BoxBufferGeometry(1, 1, 1);\r\ndefaultBoxGeometry.translate(0, 0, 0.5);\r\n\r\nconst topColor: THREE.Color = new THREE.Color('#fff'),\r\n    bottomColor: THREE.Color = new THREE.Color('#fff');\r\n\r\nfunction getDefaultCylinderBufferGeometry(radialSegments: number = 6): THREE.BufferGeometry {\r\n    if (!barGeometryCache[radialSegments]) {\r\n        const geometry = new THREE.CylinderBufferGeometry(1, 1, 1, radialSegments, 1);\r\n        geometry.rotateX(Math.PI / 2);\r\n        geometry.translate(0, 0, 0.5);\r\n        geometry.rotateZ(Math.PI / 6);\r\n        barGeometryCache[radialSegments] = geometry;\r\n    }\r\n    return barGeometryCache[radialSegments];\r\n}\r\n\r\n/**\r\n * Reuse Geometry   , Meter as unit\r\n * @param {*} property\r\n */\r\n// eslint-disable-next-line no-unused-vars\r\nexport function getGeometry(property: any): THREE.BufferGeometry {\r\n    const {\r\n        height,\r\n        radialSegments,\r\n        radius\r\n    } = property;\r\n    const geometry = getDefaultCylinderBufferGeometry(radialSegments).clone();\r\n    geometry.scale(radius, radius, height);\r\n    return geometry;\r\n}\r\n\r\n\r\n/**\r\n * init Colors\r\n * @param {*} geometry\r\n * @param {*} color\r\n * @param {*} _topColor\r\n */\r\nexport function initVertexColors(geometry: THREE.BufferGeometry, color: string, _topColor: string, key: string = 'y', v: number = 0): Float32Array {\r\n    let offset = 0;\r\n    if (key === 'y') {\r\n        offset = 1;\r\n    } else if (key === 'z') {\r\n        offset = 2;\r\n    }\r\n    const position = geometry.attributes.position.array;\r\n    const len = position.length;\r\n    bottomColor.setStyle(color);\r\n    topColor.setStyle(_topColor);\r\n    const colors = new Float32Array(len);\r\n    for (let i = 0; i < len; i += 3) {\r\n        const y = position[i + offset];\r\n        if (y > v) {\r\n            colors[i] = topColor.r;\r\n            colors[i + 1] = topColor.g;\r\n            colors[i + 2] = topColor.b;\r\n            // colors.push(topColor.r, topColor.g, topColor.b);\r\n        } else {\r\n            colors[i] = bottomColor.r;\r\n            colors[i + 1] = bottomColor.g;\r\n            colors[i + 2] = bottomColor.b;\r\n            // colors.push(bottomColor.r, bottomColor.g, bottomColor.b);\r\n        }\r\n    }\r\n    addAttribute(geometry, 'color', new THREE.BufferAttribute(colors, 3, true));\r\n    return colors;\r\n}\r\n\r\n\r\nexport function mergeBarGeometry(geometries: Array<THREE.BufferGeometry>): THREE.BufferGeometry {\r\n    const attributes: MergeAttributeType[] = [];\r\n    const len = geometries.length;\r\n    let colorLen = 0;\r\n    for (let i = 0; i < len; i++) {\r\n        const { color } = geometries[i].attributes;\r\n        if (color) {\r\n            colorLen += color.array.length;\r\n        }\r\n    }\r\n    const colors = new Float32Array(colorLen);\r\n    let offset = 0;\r\n    for (let i = 0, len = geometries.length; i < len; i++) {\r\n        const { color, normal, position, uv } = geometries[i].attributes;\r\n        const index = geometries[i].index;\r\n        if (color) {\r\n            colors.set(color.array, offset);\r\n            offset += color.array.length;\r\n            // for (let j = 0, len1 = color.array.length; j < len1; j++) {\r\n            //     colors.push(color.array[j]);\r\n            // }\r\n        }\r\n        attributes.push({\r\n            // color: color.array,\r\n            normal: normal.array,\r\n            uv: uv.array,\r\n            position: position.array,\r\n            indices: index.array\r\n        });\r\n    }\r\n    const bufferGeometry = mergeBufferGeometries(attributes);\r\n    if (colors.length) {\r\n        addAttribute(bufferGeometry, 'color', new THREE.BufferAttribute(colors, 3, true));\r\n        // for (let i = 0, len = colors.length; i < len; i++) {\r\n        //     bufferGeometry.attributes.color.array[i] = colors[i];\r\n        // }\r\n    }\r\n    for (let i = 0, len = geometries.length; i < len; i++) {\r\n        geometries[i].dispose();\r\n    }\r\n    return bufferGeometry;\r\n\r\n}\r\n\r\nexport function getDefaultBoxGeometry(): THREE.BufferGeometry {\r\n    return defaultBoxGeometry;\r\n}\r\n\r\n","import * as maptalks from 'maptalks';\r\nimport * as THREE from 'three';\r\nimport BaseObject from './BaseObject';\r\nimport { ThreeLayer } from './index';\r\nimport { BarOptionType } from './type/index';\r\nimport { getGeometry, initVertexColors } from './util/BarUtil';\r\nimport { getVertexColors } from './util/ThreeAdaptUtil';\r\n\r\n\r\nconst OPTIONS = {\r\n    radius: 10,\r\n    height: 100,\r\n    radialSegments: 6,\r\n    altitude: 0,\r\n    topColor: '',\r\n    bottomColor: '#2d2f61',\r\n};\r\n\r\n\r\n/**\r\n *\r\n */\r\nclass Bar extends BaseObject {\r\n    constructor(coordinate: maptalks.Coordinate, options: BarOptionType, material: THREE.Material, layer: ThreeLayer) {\r\n        options = maptalks.Util.extend({}, OPTIONS, options, { layer, coordinate });\r\n        super();\r\n        this._initOptions(options);\r\n        const { height, radius, topColor, bottomColor, altitude } = options;\r\n        options.height = layer.distanceToVector3(height, height).x;\r\n        options.radius = layer.distanceToVector3(radius, radius).x;\r\n        // Meter as unit\r\n        options['_radius'] = this.options['radius'];\r\n        options['_height'] = this.options['height'];\r\n        const geometry = getGeometry(options);\r\n        if (topColor) {\r\n            initVertexColors(geometry, bottomColor, topColor, 'z', options.height / 2);\r\n            (material as any).vertexColors = getVertexColors();\r\n        }\r\n        this._createMesh(geometry, material);\r\n        const z = layer.distanceToVector3(altitude, altitude).x;\r\n        const position = layer.coordinateToVector3(coordinate, z);\r\n        this.getObject3d().position.copy(position);\r\n        this.type = 'Bar';\r\n    }\r\n}\r\n\r\nexport default Bar;\r\n","import * as maptalks from 'maptalks';\r\nimport * as THREE from 'three';\r\nimport { ThreeLayer } from './../index';\r\nimport { MergeAttributeType } from './../type/index';\r\n//Using cache to reduce computation\r\nexport function distanceToVector3(distance: number, layer: ThreeLayer, cache: { [key: number]: number } = {}): number {\r\n    if (cache[distance] === undefined) {\r\n        cache[distance] = layer.distanceToVector3(distance, distance).x;\r\n    }\r\n    return cache[distance];\r\n}\r\n\r\n\r\n/**\r\n *Get the center point of the point set\r\n * @param {*} coordinates\r\n */\r\nexport function getCenterOfPoints(coordinates: Array<any> = []): maptalks.Coordinate {\r\n    let sumX = 0, sumY = 0;\r\n    const len = coordinates.length;\r\n    for (let i = 0; i < len; i++) {\r\n        const { coordinate, lnglat, lnglats, xy, xys } = coordinates[i];\r\n        const c = coordinate || lnglat || lnglats || xy || xys || coordinates[i];\r\n        let x, y;\r\n        if (Array.isArray(c)) {\r\n            x = c[0];\r\n            y = c[1];\r\n        } else if (c instanceof maptalks.Coordinate) {\r\n            x = c.x;\r\n            y = c.y;\r\n        }\r\n        sumX += x;\r\n        sumY += y;\r\n    }\r\n    return new maptalks.Coordinate(sumX / len, sumY / len);\r\n}\r\n\r\nexport function setBottomHeight(geometry: THREE.BufferGeometry | MergeAttributeType | THREE.Vector3[], bottomHeight: number, layer: ThreeLayer,\r\n    cache?: { [key: number]: number }): number {\r\n    if (bottomHeight === undefined || typeof bottomHeight !== 'number' || bottomHeight === 0) {\r\n        return 0;\r\n    }\r\n    let position;\r\n    if (geometry instanceof THREE.BufferGeometry) {\r\n        position = geometry.attributes.position.array;\r\n    } else if (Array.isArray(geometry)) {\r\n        position = geometry;\r\n    } else {\r\n        position = geometry.position;\r\n    }\r\n    let h = 0;\r\n    if (position) {\r\n        if (cache) {\r\n            if (cache[bottomHeight] === undefined) {\r\n                cache[bottomHeight] = layer.distanceToVector3(bottomHeight, bottomHeight).x;\r\n            }\r\n            h = cache[bottomHeight];\r\n        } else {\r\n            h = layer.distanceToVector3(bottomHeight, bottomHeight).x;\r\n        }\r\n        const len = position.length;\r\n        if (position[0] instanceof THREE.Vector3) {\r\n            for (let i = 0; i < len; i++) {\r\n                position[i].z += h;\r\n            }\r\n        } else {\r\n            for (let i = 0; i < len; i += 3) {\r\n                position[i + 2] += h;\r\n            }\r\n        }\r\n    }\r\n    return h;\r\n}\r\n\r\nexport function getGeometriesColorArray(geometriesAttributes): Float32Array {\r\n    const len = geometriesAttributes.length;\r\n    let colorsLen = 0;\r\n    for (let i = 0; i < len; i++) {\r\n        const { count } = geometriesAttributes[i].position;\r\n        colorsLen += count;\r\n    }\r\n    return new Float32Array(colorsLen * 3);\r\n}","'use strict';\n\nmodule.exports = earcut;\nmodule.exports.default = earcut;\n\nfunction earcut(data, holeIndices, dim) {\n\n    dim = dim || 2;\n\n    var hasHoles = holeIndices && holeIndices.length,\n        outerLen = hasHoles ? holeIndices[0] * dim : data.length,\n        outerNode = linkedList(data, 0, outerLen, dim, true),\n        triangles = [];\n\n    if (!outerNode || outerNode.next === outerNode.prev) return triangles;\n\n    var minX, minY, maxX, maxY, x, y, invSize;\n\n    if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim);\n\n    // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n    if (data.length > 80 * dim) {\n        minX = maxX = data[0];\n        minY = maxY = data[1];\n\n        for (var i = dim; i < outerLen; i += dim) {\n            x = data[i];\n            y = data[i + 1];\n            if (x < minX) minX = x;\n            if (y < minY) minY = y;\n            if (x > maxX) maxX = x;\n            if (y > maxY) maxY = y;\n        }\n\n        // minX, minY and invSize are later used to transform coords into integers for z-order calculation\n        invSize = Math.max(maxX - minX, maxY - minY);\n        invSize = invSize !== 0 ? 1 / invSize : 0;\n    }\n\n    earcutLinked(outerNode, triangles, dim, minX, minY, invSize);\n\n    return triangles;\n}\n\n// create a circular doubly linked list from polygon points in the specified winding order\nfunction linkedList(data, start, end, dim, clockwise) {\n    var i, last;\n\n    if (clockwise === (signedArea(data, start, end, dim) > 0)) {\n        for (i = start; i < end; i += dim) last = insertNode(i, data[i], data[i + 1], last);\n    } else {\n        for (i = end - dim; i >= start; i -= dim) last = insertNode(i, data[i], data[i + 1], last);\n    }\n\n    if (last && equals(last, last.next)) {\n        removeNode(last);\n        last = last.next;\n    }\n\n    return last;\n}\n\n// eliminate colinear or duplicate points\nfunction filterPoints(start, end) {\n    if (!start) return start;\n    if (!end) end = start;\n\n    var p = start,\n        again;\n    do {\n        again = false;\n\n        if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {\n            removeNode(p);\n            p = end = p.prev;\n            if (p === p.next) break;\n            again = true;\n\n        } else {\n            p = p.next;\n        }\n    } while (again || p !== end);\n\n    return end;\n}\n\n// main ear slicing loop which triangulates a polygon (given as a linked list)\nfunction earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {\n    if (!ear) return;\n\n    // interlink polygon nodes in z-order\n    if (!pass && invSize) indexCurve(ear, minX, minY, invSize);\n\n    var stop = ear,\n        prev, next;\n\n    // iterate through ears, slicing them one by one\n    while (ear.prev !== ear.next) {\n        prev = ear.prev;\n        next = ear.next;\n\n        if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {\n            // cut off the triangle\n            triangles.push(prev.i / dim);\n            triangles.push(ear.i / dim);\n            triangles.push(next.i / dim);\n\n            removeNode(ear);\n\n            // skipping the next vertex leads to less sliver triangles\n            ear = next.next;\n            stop = next.next;\n\n            continue;\n        }\n\n        ear = next;\n\n        // if we looped through the whole remaining polygon and can't find any more ears\n        if (ear === stop) {\n            // try filtering points and slicing again\n            if (!pass) {\n                earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);\n\n            // if this didn't work, try curing all small self-intersections locally\n            } else if (pass === 1) {\n                ear = cureLocalIntersections(filterPoints(ear), triangles, dim);\n                earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);\n\n            // as a last resort, try splitting the remaining polygon into two\n            } else if (pass === 2) {\n                splitEarcut(ear, triangles, dim, minX, minY, invSize);\n            }\n\n            break;\n        }\n    }\n}\n\n// check whether a polygon node forms a valid ear with adjacent nodes\nfunction isEar(ear) {\n    var a = ear.prev,\n        b = ear,\n        c = ear.next;\n\n    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\n    // now make sure we don't have other points inside the potential ear\n    var p = ear.next.next;\n\n    while (p !== ear.prev) {\n        if (pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&\n            area(p.prev, p, p.next) >= 0) return false;\n        p = p.next;\n    }\n\n    return true;\n}\n\nfunction isEarHashed(ear, minX, minY, invSize) {\n    var a = ear.prev,\n        b = ear,\n        c = ear.next;\n\n    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\n    // triangle bbox; min & max are calculated like this for speed\n    var minTX = a.x < b.x ? (a.x < c.x ? a.x : c.x) : (b.x < c.x ? b.x : c.x),\n        minTY = a.y < b.y ? (a.y < c.y ? a.y : c.y) : (b.y < c.y ? b.y : c.y),\n        maxTX = a.x > b.x ? (a.x > c.x ? a.x : c.x) : (b.x > c.x ? b.x : c.x),\n        maxTY = a.y > b.y ? (a.y > c.y ? a.y : c.y) : (b.y > c.y ? b.y : c.y);\n\n    // z-order range for the current triangle bbox;\n    var minZ = zOrder(minTX, minTY, minX, minY, invSize),\n        maxZ = zOrder(maxTX, maxTY, minX, minY, invSize);\n\n    var p = ear.prevZ,\n        n = ear.nextZ;\n\n    // look for points inside the triangle in both directions\n    while (p && p.z >= minZ && n && n.z <= maxZ) {\n        if (p !== ear.prev && p !== ear.next &&\n            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&\n            area(p.prev, p, p.next) >= 0) return false;\n        p = p.prevZ;\n\n        if (n !== ear.prev && n !== ear.next &&\n            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) &&\n            area(n.prev, n, n.next) >= 0) return false;\n        n = n.nextZ;\n    }\n\n    // look for remaining points in decreasing z-order\n    while (p && p.z >= minZ) {\n        if (p !== ear.prev && p !== ear.next &&\n            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&\n            area(p.prev, p, p.next) >= 0) return false;\n        p = p.prevZ;\n    }\n\n    // look for remaining points in increasing z-order\n    while (n && n.z <= maxZ) {\n        if (n !== ear.prev && n !== ear.next &&\n            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) &&\n            area(n.prev, n, n.next) >= 0) return false;\n        n = n.nextZ;\n    }\n\n    return true;\n}\n\n// go through all polygon nodes and cure small local self-intersections\nfunction cureLocalIntersections(start, triangles, dim) {\n    var p = start;\n    do {\n        var a = p.prev,\n            b = p.next.next;\n\n        if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {\n\n            triangles.push(a.i / dim);\n            triangles.push(p.i / dim);\n            triangles.push(b.i / dim);\n\n            // remove two nodes involved\n            removeNode(p);\n            removeNode(p.next);\n\n            p = start = b;\n        }\n        p = p.next;\n    } while (p !== start);\n\n    return filterPoints(p);\n}\n\n// try splitting polygon into two and triangulate them independently\nfunction splitEarcut(start, triangles, dim, minX, minY, invSize) {\n    // look for a valid diagonal that divides the polygon into two\n    var a = start;\n    do {\n        var b = a.next.next;\n        while (b !== a.prev) {\n            if (a.i !== b.i && isValidDiagonal(a, b)) {\n                // split the polygon in two by the diagonal\n                var c = splitPolygon(a, b);\n\n                // filter colinear points around the cuts\n                a = filterPoints(a, a.next);\n                c = filterPoints(c, c.next);\n\n                // run earcut on each half\n                earcutLinked(a, triangles, dim, minX, minY, invSize);\n                earcutLinked(c, triangles, dim, minX, minY, invSize);\n                return;\n            }\n            b = b.next;\n        }\n        a = a.next;\n    } while (a !== start);\n}\n\n// link every hole into the outer loop, producing a single-ring polygon without holes\nfunction eliminateHoles(data, holeIndices, outerNode, dim) {\n    var queue = [],\n        i, len, start, end, list;\n\n    for (i = 0, len = holeIndices.length; i < len; i++) {\n        start = holeIndices[i] * dim;\n        end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n        list = linkedList(data, start, end, dim, false);\n        if (list === list.next) list.steiner = true;\n        queue.push(getLeftmost(list));\n    }\n\n    queue.sort(compareX);\n\n    // process holes from left to right\n    for (i = 0; i < queue.length; i++) {\n        eliminateHole(queue[i], outerNode);\n        outerNode = filterPoints(outerNode, outerNode.next);\n    }\n\n    return outerNode;\n}\n\nfunction compareX(a, b) {\n    return a.x - b.x;\n}\n\n// find a bridge between vertices that connects hole with an outer ring and and link it\nfunction eliminateHole(hole, outerNode) {\n    outerNode = findHoleBridge(hole, outerNode);\n    if (outerNode) {\n        var b = splitPolygon(outerNode, hole);\n\n        // filter collinear points around the cuts\n        filterPoints(outerNode, outerNode.next);\n        filterPoints(b, b.next);\n    }\n}\n\n// David Eberly's algorithm for finding a bridge between hole and outer polygon\nfunction findHoleBridge(hole, outerNode) {\n    var p = outerNode,\n        hx = hole.x,\n        hy = hole.y,\n        qx = -Infinity,\n        m;\n\n    // find a segment intersected by a ray from the hole's leftmost point to the left;\n    // segment's endpoint with lesser x will be potential connection point\n    do {\n        if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {\n            var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);\n            if (x <= hx && x > qx) {\n                qx = x;\n                if (x === hx) {\n                    if (hy === p.y) return p;\n                    if (hy === p.next.y) return p.next;\n                }\n                m = p.x < p.next.x ? p : p.next;\n            }\n        }\n        p = p.next;\n    } while (p !== outerNode);\n\n    if (!m) return null;\n\n    if (hx === qx) return m; // hole touches outer segment; pick leftmost endpoint\n\n    // look for points inside the triangle of hole point, segment intersection and endpoint;\n    // if there are no points found, we have a valid connection;\n    // otherwise choose the point of the minimum angle with the ray as connection point\n\n    var stop = m,\n        mx = m.x,\n        my = m.y,\n        tanMin = Infinity,\n        tan;\n\n    p = m;\n\n    do {\n        if (hx >= p.x && p.x >= mx && hx !== p.x &&\n                pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {\n\n            tan = Math.abs(hy - p.y) / (hx - p.x); // tangential\n\n            if (locallyInside(p, hole) &&\n                (tan < tanMin || (tan === tanMin && (p.x > m.x || (p.x === m.x && sectorContainsSector(m, p)))))) {\n                m = p;\n                tanMin = tan;\n            }\n        }\n\n        p = p.next;\n    } while (p !== stop);\n\n    return m;\n}\n\n// whether sector in vertex m contains sector in vertex p in the same coordinates\nfunction sectorContainsSector(m, p) {\n    return area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;\n}\n\n// interlink polygon nodes in z-order\nfunction indexCurve(start, minX, minY, invSize) {\n    var p = start;\n    do {\n        if (p.z === null) p.z = zOrder(p.x, p.y, minX, minY, invSize);\n        p.prevZ = p.prev;\n        p.nextZ = p.next;\n        p = p.next;\n    } while (p !== start);\n\n    p.prevZ.nextZ = null;\n    p.prevZ = null;\n\n    sortLinked(p);\n}\n\n// Simon Tatham's linked list merge sort algorithm\n// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\nfunction sortLinked(list) {\n    var i, p, q, e, tail, numMerges, pSize, qSize,\n        inSize = 1;\n\n    do {\n        p = list;\n        list = null;\n        tail = null;\n        numMerges = 0;\n\n        while (p) {\n            numMerges++;\n            q = p;\n            pSize = 0;\n            for (i = 0; i < inSize; i++) {\n                pSize++;\n                q = q.nextZ;\n                if (!q) break;\n            }\n            qSize = inSize;\n\n            while (pSize > 0 || (qSize > 0 && q)) {\n\n                if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {\n                    e = p;\n                    p = p.nextZ;\n                    pSize--;\n                } else {\n                    e = q;\n                    q = q.nextZ;\n                    qSize--;\n                }\n\n                if (tail) tail.nextZ = e;\n                else list = e;\n\n                e.prevZ = tail;\n                tail = e;\n            }\n\n            p = q;\n        }\n\n        tail.nextZ = null;\n        inSize *= 2;\n\n    } while (numMerges > 1);\n\n    return list;\n}\n\n// z-order of a point given coords and inverse of the longer side of data bbox\nfunction zOrder(x, y, minX, minY, invSize) {\n    // coords are transformed into non-negative 15-bit integer range\n    x = 32767 * (x - minX) * invSize;\n    y = 32767 * (y - minY) * invSize;\n\n    x = (x | (x << 8)) & 0x00FF00FF;\n    x = (x | (x << 4)) & 0x0F0F0F0F;\n    x = (x | (x << 2)) & 0x33333333;\n    x = (x | (x << 1)) & 0x55555555;\n\n    y = (y | (y << 8)) & 0x00FF00FF;\n    y = (y | (y << 4)) & 0x0F0F0F0F;\n    y = (y | (y << 2)) & 0x33333333;\n    y = (y | (y << 1)) & 0x55555555;\n\n    return x | (y << 1);\n}\n\n// find the leftmost node of a polygon ring\nfunction getLeftmost(start) {\n    var p = start,\n        leftmost = start;\n    do {\n        if (p.x < leftmost.x || (p.x === leftmost.x && p.y < leftmost.y)) leftmost = p;\n        p = p.next;\n    } while (p !== start);\n\n    return leftmost;\n}\n\n// check if a point lies within a convex triangle\nfunction pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {\n    return (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 &&\n           (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 &&\n           (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;\n}\n\n// check if a diagonal between two polygon nodes is valid (lies in polygon interior)\nfunction isValidDiagonal(a, b) {\n    return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && // dones't intersect other edges\n           (locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && // locally visible\n            (area(a.prev, a, b.prev) || area(a, b.prev, b)) || // does not create opposite-facing sectors\n            equals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0); // special zero-length case\n}\n\n// signed area of a triangle\nfunction area(p, q, r) {\n    return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);\n}\n\n// check if two points are equal\nfunction equals(p1, p2) {\n    return p1.x === p2.x && p1.y === p2.y;\n}\n\n// check if two segments intersect\nfunction intersects(p1, q1, p2, q2) {\n    var o1 = sign(area(p1, q1, p2));\n    var o2 = sign(area(p1, q1, q2));\n    var o3 = sign(area(p2, q2, p1));\n    var o4 = sign(area(p2, q2, q1));\n\n    if (o1 !== o2 && o3 !== o4) return true; // general case\n\n    if (o1 === 0 && onSegment(p1, p2, q1)) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1\n    if (o2 === 0 && onSegment(p1, q2, q1)) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1\n    if (o3 === 0 && onSegment(p2, p1, q2)) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2\n    if (o4 === 0 && onSegment(p2, q1, q2)) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2\n\n    return false;\n}\n\n// for collinear points p, q, r, check if point q lies on segment pr\nfunction onSegment(p, q, r) {\n    return q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);\n}\n\nfunction sign(num) {\n    return num > 0 ? 1 : num < 0 ? -1 : 0;\n}\n\n// check if a polygon diagonal intersects any polygon segments\nfunction intersectsPolygon(a, b) {\n    var p = a;\n    do {\n        if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&\n                intersects(p, p.next, a, b)) return true;\n        p = p.next;\n    } while (p !== a);\n\n    return false;\n}\n\n// check if a polygon diagonal is locally inside the polygon\nfunction locallyInside(a, b) {\n    return area(a.prev, a, a.next) < 0 ?\n        area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 :\n        area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;\n}\n\n// check if the middle point of a polygon diagonal is inside the polygon\nfunction middleInside(a, b) {\n    var p = a,\n        inside = false,\n        px = (a.x + b.x) / 2,\n        py = (a.y + b.y) / 2;\n    do {\n        if (((p.y > py) !== (p.next.y > py)) && p.next.y !== p.y &&\n                (px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x))\n            inside = !inside;\n        p = p.next;\n    } while (p !== a);\n\n    return inside;\n}\n\n// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n// if one belongs to the outer ring and another to a hole, it merges it into a single ring\nfunction splitPolygon(a, b) {\n    var a2 = new Node(a.i, a.x, a.y),\n        b2 = new Node(b.i, b.x, b.y),\n        an = a.next,\n        bp = b.prev;\n\n    a.next = b;\n    b.prev = a;\n\n    a2.next = an;\n    an.prev = a2;\n\n    b2.next = a2;\n    a2.prev = b2;\n\n    bp.next = b2;\n    b2.prev = bp;\n\n    return b2;\n}\n\n// create a node and optionally link it with previous one (in a circular doubly linked list)\nfunction insertNode(i, x, y, last) {\n    var p = new Node(i, x, y);\n\n    if (!last) {\n        p.prev = p;\n        p.next = p;\n\n    } else {\n        p.next = last.next;\n        p.prev = last;\n        last.next.prev = p;\n        last.next = p;\n    }\n    return p;\n}\n\nfunction removeNode(p) {\n    p.next.prev = p.prev;\n    p.prev.next = p.next;\n\n    if (p.prevZ) p.prevZ.nextZ = p.nextZ;\n    if (p.nextZ) p.nextZ.prevZ = p.prevZ;\n}\n\nfunction Node(i, x, y) {\n    // vertex index in coordinates array\n    this.i = i;\n\n    // vertex coordinates\n    this.x = x;\n    this.y = y;\n\n    // previous and next vertex nodes in a polygon ring\n    this.prev = null;\n    this.next = null;\n\n    // z-order curve value\n    this.z = null;\n\n    // previous and next nodes in z-order\n    this.prevZ = null;\n    this.nextZ = null;\n\n    // indicates whether this is a steiner point\n    this.steiner = false;\n}\n\n// return a percentage difference between the polygon area and its triangulation area;\n// used to verify correctness of triangulation\nearcut.deviation = function (data, holeIndices, dim, triangles) {\n    var hasHoles = holeIndices && holeIndices.length;\n    var outerLen = hasHoles ? holeIndices[0] * dim : data.length;\n\n    var polygonArea = Math.abs(signedArea(data, 0, outerLen, dim));\n    if (hasHoles) {\n        for (var i = 0, len = holeIndices.length; i < len; i++) {\n            var start = holeIndices[i] * dim;\n            var end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n            polygonArea -= Math.abs(signedArea(data, start, end, dim));\n        }\n    }\n\n    var trianglesArea = 0;\n    for (i = 0; i < triangles.length; i += 3) {\n        var a = triangles[i] * dim;\n        var b = triangles[i + 1] * dim;\n        var c = triangles[i + 2] * dim;\n        trianglesArea += Math.abs(\n            (data[a] - data[c]) * (data[b + 1] - data[a + 1]) -\n            (data[a] - data[b]) * (data[c + 1] - data[a + 1]));\n    }\n\n    return polygonArea === 0 && trianglesArea === 0 ? 0 :\n        Math.abs((trianglesArea - polygonArea) / polygonArea);\n};\n\nfunction signedArea(data, start, end, dim) {\n    var sum = 0;\n    for (var i = start, j = end - dim; i < end; i += dim) {\n        sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);\n        j = i;\n    }\n    return sum;\n}\n\n// turn a polygon in a multi-dimensional array form (e.g. as in GeoJSON) into a form Earcut accepts\nearcut.flatten = function (data) {\n    var dim = data[0][0].length,\n        result = {vertices: [], holes: [], dimensions: dim},\n        holeIndex = 0;\n\n    for (var i = 0; i < data.length; i++) {\n        for (var j = 0; j < data[i].length; j++) {\n            for (var d = 0; d < dim; d++) result.vertices.push(data[i][j][d]);\n        }\n        if (i > 0) {\n            holeIndex += data[i - 1].length;\n            result.holes.push(holeIndex);\n        }\n    }\n    return result;\n};\n","/*\r\n (c) 2017, Vladimir Agafonkin\r\n Simplify.js, a high-performance JS polyline simplification library\r\n mourner.github.io/simplify-js\r\n*/\r\n\r\n// to suit your point format, run search/replace for '.x' and '.y';\r\n// for 3D version, see 3d branch (configurability would draw significant performance overhead)\r\n\r\n// square distance between 2 points\r\nfunction getSqDist(p1, p2) {\r\n\r\n    var dx = p1[0] - p2[0],\r\n        dy = p1[1] - p2[1];\r\n\r\n    return dx * dx + dy * dy;\r\n}\r\n\r\n// square distance from a point to a segment\r\nfunction getSqSegDist(p, p1, p2) {\r\n\r\n    var x = p1[0],\r\n        y = p1[1],\r\n        dx = p2[0] - x,\r\n        dy = p2[1] - y;\r\n\r\n    if (dx !== 0 || dy !== 0) {\r\n\r\n        var t = ((p[0] - x) * dx + (p[1] - y) * dy) / (dx * dx + dy * dy);\r\n\r\n        if (t > 1) {\r\n            x = p2[0];\r\n            y = p2[1];\r\n\r\n        } else if (t > 0) {\r\n            x += dx * t;\r\n            y += dy * t;\r\n        }\r\n    }\r\n\r\n    dx = p[0] - x;\r\n    dy = p[1] - y;\r\n\r\n    return dx * dx + dy * dy;\r\n}\r\n// rest of the code doesn't care about point format\r\n\r\n// basic distance-based simplification\r\nfunction simplifyRadialDist(points, sqTolerance) {\r\n\r\n    var prevPoint = points[0],\r\n        newPoints = [prevPoint],\r\n        point;\r\n\r\n    for (var i = 1, len = points.length; i < len; i++) {\r\n        point = points[i];\r\n\r\n        if (getSqDist(point, prevPoint) > sqTolerance) {\r\n            newPoints.push(point);\r\n            prevPoint = point;\r\n        }\r\n    }\r\n\r\n    if (prevPoint !== point) newPoints.push(point);\r\n\r\n    return newPoints;\r\n}\r\n\r\nfunction simplifyDPStep(points, first, last, sqTolerance, simplified) {\r\n    var maxSqDist = sqTolerance,\r\n        index;\r\n\r\n    for (var i = first + 1; i < last; i++) {\r\n        var sqDist = getSqSegDist(points[i], points[first], points[last]);\r\n\r\n        if (sqDist > maxSqDist) {\r\n            index = i;\r\n            maxSqDist = sqDist;\r\n        }\r\n    }\r\n\r\n    if (maxSqDist > sqTolerance) {\r\n        if (index - first > 1) simplifyDPStep(points, first, index, sqTolerance, simplified);\r\n        simplified.push(points[index]);\r\n        if (last - index > 1) simplifyDPStep(points, index, last, sqTolerance, simplified);\r\n    }\r\n}\r\n\r\n// simplification using Ramer-Douglas-Peucker algorithm\r\nfunction simplifyDouglasPeucker(points, sqTolerance) {\r\n    var last = points.length - 1;\r\n\r\n    var simplified = [points[0]];\r\n    simplifyDPStep(points, 0, last, sqTolerance, simplified);\r\n    simplified.push(points[last]);\r\n\r\n    return simplified;\r\n}\r\n\r\n// both algorithms combined for awesome performance\r\nfunction simplify(points, tolerance, highestQuality) {\r\n\r\n    if (points.length <= 2) return points;\r\n\r\n    var sqTolerance = tolerance !== undefined ? tolerance * tolerance : 1;\r\n\r\n    points = highestQuality ? points : simplifyRadialDist(points, sqTolerance);\r\n    points = simplifyDouglasPeucker(points, sqTolerance);\r\n\r\n    return points;\r\n}\r\nexport default simplify;","export function dot(v1, v2) {\r\n    return v1[0] * v2[0] + v1[1] * v2[1] + v1[2] * v2[2];\r\n}\r\nexport function v2Dot(v1, v2) {\r\n    return v1[0] * v2[0] + v1[1] * v2[1];\r\n}\r\n\r\nexport function normalize(out, v) {\r\n    const x = v[0];\r\n    const y = v[1];\r\n    const z = v[2];\r\n    const d = Math.sqrt(x * x + y * y + z * z);\r\n    out[0] = x / d;\r\n    out[1] = y / d;\r\n    out[2] = z / d;\r\n    return out;\r\n}\r\n\r\nexport function v2Normalize(out, v) {\r\n    const x = v[0];\r\n    const y = v[1];\r\n    const d = Math.sqrt(x * x + y * y);\r\n    out[0] = x / d;\r\n    out[1] = y / d;\r\n    return out;\r\n}\r\n\r\nexport function scale(out, v, s) {\r\n    out[0] = v[0] * s;\r\n    out[1] = v[1] * s;\r\n    out[2] = v[2] * s;\r\n    return out;\r\n}\r\n\r\nexport function mul(out, v1, v2) {\r\n    out[0] = v1[0] * v2[0];\r\n    out[1] = v1[1] * v2[1];\r\n    out[2] = v1[2] * v2[2];\r\n    return out;\r\n}\r\n\r\nexport function scaleAndAdd(out, v1, v2, s) {\r\n    out[0] = v1[0] + v2[0] * s;\r\n    out[1] = v1[1] + v2[1] * s;\r\n    out[2] = v1[2] + v2[2] * s;\r\n    return out;\r\n}\r\n\r\nexport function add(out, v1, v2) {\r\n    out[0] = v1[0] + v2[0];\r\n    out[1] = v1[1] + v2[1];\r\n    out[2] = v1[2] + v2[2];\r\n    return out;\r\n}\r\n\r\nexport function v2Add(out, v1, v2) {\r\n    out[0] = v1[0] + v2[0];\r\n    out[1] = v1[1] + v2[1];\r\n    return out;\r\n}\r\n\r\nexport function sub(out, v1, v2) {\r\n    out[0] = v1[0] - v2[0];\r\n    out[1] = v1[1] - v2[1];\r\n    out[2] = v1[2] - v2[2];\r\n    return out;\r\n}\r\n\r\nexport function v2Sub(out, v1, v2) {\r\n    out[0] = v1[0] - v2[0];\r\n    out[1] = v1[1] - v2[1];\r\n    return out;\r\n}\r\n\r\nexport function v3Sub(out, v1, v2) {\r\n    out[0] = v1[0] - v2[0];\r\n    out[1] = v1[1] - v2[1];\r\n    out[2] = v1[2] - v2[2];\r\n    return out;\r\n}\r\n\r\nexport function v3Normalize(out, v) {\r\n    const x = v[0];\r\n    const y = v[1];\r\n    const z = v[2];\r\n    const d = Math.sqrt(x * x + y * y + z * z);\r\n    out[0] = x / d;\r\n    out[1] = y / d;\r\n    out[2] = z / d;\r\n    return out;\r\n}\r\n\r\nexport function v3Cross(out, v1, v2) {\r\n    var ax = v1[0], ay = v1[1], az = v1[2],\r\n        bx = v2[0], by = v2[1], bz = v2[2];\r\n\r\n    out[0] = ay * bz - az * by;\r\n    out[1] = az * bx - ax * bz;\r\n    out[2] = ax * by - ay * bx;\r\n    return out;\r\n}\r\n\r\nconst rel = [];\r\n// start and end must be normalized\r\nexport function slerp(out, start, end, t) {\r\n    // https://keithmaggio.wordpress.com/2011/02/15/math-magician-lerp-slerp-and-nlerp/\r\n    const cosT = dot(start, end);\r\n    const theta = Math.acos(cosT) * t;\r\n\r\n    scaleAndAdd(rel, end, start, -cosT);\r\n    normalize(rel, rel);// start and rel Orthonormal basis\r\n\r\n    scale(out, start, Math.cos(theta));\r\n    scaleAndAdd(out, out, rel, Math.sin(theta));\r\n\r\n    return out;\r\n}\r\n\r\nexport function lineIntersection(x1, y1, x2, y2, x3, y3, x4, y4, out, writeOffset) {\r\n    const dx1 = x2 - x1;\r\n    const dx2 = x4 - x3;\r\n    const dy1 = y2 - y1;\r\n    const dy2 = y4 - y3;\r\n\r\n    const cross = dy2 * dx1 - dx2 * dy1;\r\n    const tmp1 = y1 - y3;\r\n    const tmp2 = x1 - x3;\r\n    const t1 = (dx2 * tmp1 - dy2 * tmp2) / cross;\r\n    // const t2 = (dx1 * tmp1 - dy1 * tmp2) / cross;\r\n\r\n    out[writeOffset] = x1 + t1 * (x2 - x1);\r\n    out[writeOffset + 1] = y1 + t1 * (y2 - y1);\r\n\r\n    return t1;\r\n}\r\n\r\nexport function area(points, start, end) {\r\n    // Signed polygon area\r\n    const n = end - start;\r\n    if (n < 3) {\r\n        return 0;\r\n    }\r\n    let area = 0;\r\n    for (let i = (end - 1) * 2, j = start * 2; j < end * 2;) {\r\n        const x0 = points[i];\r\n        const y0 = points[i + 1];\r\n        const x1 = points[j];\r\n        const y1 = points[j + 1];\r\n        i = j;\r\n        j += 2;\r\n        area += x0 * y1 - x1 * y0;\r\n    }\r\n\r\n    return area;\r\n}\r\n\r\n\r\nexport function triangleArea(x0, y0, x1, y1, x2, y2) {\r\n    return (x1 - x0) * (y2 - y1) - (y1 - y0) * (x2 - x1);\r\n}","// TODO fitRect x, y are negative?\r\n// TODO Dimensions\r\n// TODO bevel=\"top\"|\"bottom\"\r\n\r\nimport earcut from 'earcut';\r\nimport doSimplify from './simplify';\r\nimport {\r\n    slerp, v2Normalize, v2Dot, v2Add, area,\r\n    v3Normalize, v3Sub, v3Cross\r\n} from './math';\r\n\r\nexport function triangulate(vertices, holes, dimensions=2) {\r\n    return earcut(vertices, holes, dimensions);\r\n};\r\n\r\nexport function flatten(data) {\r\n    return earcut.flatten(data);\r\n}\r\n\r\nconst v1 = [];\r\nconst v2 = [];\r\nconst v = [];\r\n\r\nfunction innerOffsetPolygon(\r\n    vertices, out, start, end, outStart, offset, miterLimit, close\r\n) {\r\n    const checkMiterLimit = miterLimit != null;\r\n    let outOff = outStart;\r\n    let indicesMap = null;\r\n    if (checkMiterLimit) {\r\n        indicesMap = new Uint32Array(end - start);\r\n    }\r\n    for (let i = start; i < end; i++) {\r\n        const nextIdx = i === end - 1 ? start : i + 1;\r\n        const prevIdx = i === start ? end - 1 : i - 1;\r\n        const x1 = vertices[prevIdx * 2];\r\n        const y1 = vertices[prevIdx * 2 + 1];\r\n        const x2 = vertices[i * 2];\r\n        const y2 = vertices[i * 2 + 1];\r\n        const x3 = vertices[nextIdx * 2];\r\n        const y3 = vertices[nextIdx * 2 + 1];\r\n\r\n        v1[0] = x2 - x1;\r\n        v1[1] = y2 - y1;\r\n        v2[0] = x3 - x2;\r\n        v2[1] = y3 - y2;\r\n\r\n        v2Normalize(v1, v1);\r\n        v2Normalize(v2, v2);\r\n\r\n        checkMiterLimit && (indicesMap[i] = outOff);\r\n        if (!close && i === start) {\r\n            v[0] = v2[1];\r\n            v[1] = -v2[0];\r\n            v2Normalize(v, v);\r\n            out[outOff * 2] = x2 + v[0] * offset;\r\n            out[outOff * 2 + 1] = y2 + v[1] * offset;\r\n            outOff++;\r\n        }\r\n        else if (!close && i === end - 1) {\r\n            v[0] = v1[1];\r\n            v[1] = -v1[0];\r\n            v2Normalize(v, v);\r\n            out[outOff * 2] = x2 + v[0] * offset;\r\n            out[outOff * 2 + 1] = y2 + v[1] * offset;\r\n            outOff++;\r\n        }\r\n        else {\r\n            // PENDING Why using sub will lost the direction info.\r\n            v2Add(v, v2, v1);\r\n            const tmp = v[1];\r\n            v[1] = -v[0];\r\n            v[0] = tmp;\r\n\r\n            v2Normalize(v, v);\r\n\r\n            const cosA = v2Dot(v, v2);\r\n            const sinA = Math.sqrt(1 - cosA * cosA);\r\n            // PENDING\r\n            const miter = offset * Math.min(10, 1 / sinA);\r\n\r\n            const isCovex = offset * cosA < 0;\r\n\r\n            if (checkMiterLimit && (1 / sinA) > miterLimit && isCovex) {\r\n                const mx = x2 + v[0] * offset;\r\n                const my = y2 + v[1] * offset;\r\n                const halfA = Math.acos(sinA) / 2;\r\n                const dist = Math.tan(halfA) * Math.abs(offset);\r\n                out[outOff * 2] = mx + v[1] * dist;\r\n                out[outOff * 2 + 1] = my - v[0] * dist;\r\n                outOff++;\r\n                out[outOff * 2] = mx - v[1] * dist;\r\n                out[outOff * 2 + 1] = my + v[0] * dist;\r\n                outOff++;\r\n            }\r\n            else {\r\n                out[outOff * 2] = x2 + v[0] * miter;\r\n                out[outOff * 2 + 1] = y2 + v[1] * miter;\r\n                outOff++;\r\n            }\r\n        }\r\n    }\r\n\r\n    return indicesMap;\r\n}\r\n\r\nexport function offsetPolygon(vertices, holes, offset, miterLimit, close) {\r\n    const offsetVertices = miterLimit != null ? [] : new Float32Array(vertices.length);\r\n    const exteriorSize = (holes && holes.length) ? holes[0] : vertices.length / 2;\r\n\r\n    innerOffsetPolygon(\r\n        vertices, offsetVertices, 0, exteriorSize, 0, offset, miterLimit, close, false\r\n    );\r\n\r\n    if (holes) {\r\n        for (let i = 0; i < holes.length; i++) {\r\n            const start = holes[i];\r\n            const end = holes[i + 1] || vertices.length / 2;\r\n            innerOffsetPolygon(\r\n                vertices, offsetVertices, start, end,\r\n                miterLimit != null ? offsetVertices.length / 2 : start,\r\n                offset, miterLimit, close\r\n            );\r\n        }\r\n    }\r\n\r\n    return offsetVertices;\r\n}\r\n\r\nfunction reversePoints(points, stride, start, end) {\r\n    for (let i = 0; i < Math.floor((end - start) / 2); i++) {\r\n        for (let j = 0; j < stride; j++) {\r\n            const a = (i + start) * stride + j;\r\n            const b = (end - i - 1) * stride + j;\r\n            const tmp = points[a];\r\n            points[a] = points[b];\r\n            points[b] = tmp;\r\n        }\r\n    }\r\n\r\n    return points;\r\n}\r\n\r\nfunction convertToClockwise(vertices, holes) {\r\n    let polygonVertexCount = vertices.length / 2;\r\n    let start = 0;\r\n    let end = holes && holes.length ? holes[0] : polygonVertexCount;\r\n    if (area(vertices, start, end) > 0) {\r\n        reversePoints(vertices, 2, start, end);\r\n    }\r\n    for (let h = 1; h < (holes ? holes.length : 0) + 1; h++) {\r\n        start = holes[h - 1];\r\n        end = holes[h] || polygonVertexCount;\r\n        if (area(vertices, start, end) < 0) {\r\n            reversePoints(vertices, 2, start, end);\r\n        }\r\n    }\r\n}\r\n\r\nfunction normalizeOpts(opts) {\r\n\r\n    opts.depth = opts.depth || 1;\r\n    opts.bevelSize = opts.bevelSize || 0;\r\n    opts.bevelSegments = opts.bevelSegments == null ? 2 : opts.bevelSegments;\r\n    opts.smoothSide = opts.smoothSide || false;\r\n    opts.smoothBevel = opts.smoothBevel || false;\r\n    opts.simplify = opts.simplify || 0;\r\n\r\n    // Normalize bevel options.\r\n    if (typeof opts.depth === 'number') {\r\n        opts.bevelSize = Math.min(!(opts.bevelSegments > 0) ? 0 : opts.bevelSize, opts.depth / 2);\r\n    }\r\n    if (!(opts.bevelSize > 0)) {\r\n        opts.bevelSegments = 0;\r\n    }\r\n    opts.bevelSegments = Math.round(opts.bevelSegments);\r\n\r\n    const boundingRect = opts.boundingRect;\r\n    opts.translate = opts.translate || [0, 0];\r\n    opts.scale = opts.scale || [1, 1];\r\n    if (opts.fitRect) {\r\n        let targetX = opts.fitRect.x == null\r\n            ? (boundingRect.x || 0)\r\n            : opts.fitRect.x;\r\n        let targetY = opts.fitRect.y == null\r\n            ? (boundingRect.y || 0)\r\n            : opts.fitRect.y;\r\n        let targetWidth = opts.fitRect.width;\r\n        let targetHeight = opts.fitRect.height;\r\n        if (targetWidth == null) {\r\n            if (targetHeight != null) {\r\n                targetWidth = targetHeight / boundingRect.height * boundingRect.width;\r\n            }\r\n            else {\r\n                targetWidth = boundingRect.width;\r\n                targetHeight = boundingRect.height;\r\n            }\r\n        }\r\n        else if (targetHeight == null) {\r\n            targetHeight = targetWidth / boundingRect.width * boundingRect.height;\r\n        }\r\n        opts.scale = [\r\n            targetWidth / boundingRect.width,\r\n            targetHeight / boundingRect.height\r\n        ];\r\n        opts.translate = [\r\n            (targetX - boundingRect.x) * opts.scale[0],\r\n            (targetY - boundingRect.y) * opts.scale[1]\r\n        ];\r\n    }\r\n}\r\n\r\nfunction generateNormal(indices, position) {\r\n\r\n    function v3Set(p, a, b, c) {\r\n        p[0] = a; p[1] = b; p[2] = c;\r\n    }\r\n\r\n    const p1 = [];\r\n    const p2 = [];\r\n    const p3 = [];\r\n\r\n    const v21 = [];\r\n    const v32 = [];\r\n\r\n    const n = [];\r\n\r\n    const len = indices.length;\r\n    const normals = new Float32Array(position.length);\r\n    for (let f = 0; f < len;) {\r\n        const i1 = indices[f++] * 3;\r\n        const i2 = indices[f++] * 3;\r\n        const i3 = indices[f++] * 3;\r\n\r\n        v3Set(p1, position[i1], position[i1 + 1], position[i1 + 2]);\r\n        v3Set(p2, position[i2], position[i2 + 1], position[i2 + 2]);\r\n        v3Set(p3, position[i3], position[i3 + 1], position[i3 + 2]);\r\n\r\n        v3Sub(v21, p1, p2);\r\n        v3Sub(v32, p2, p3);\r\n        v3Cross(n, v21, v32);\r\n        // Already be weighted by the triangle area\r\n        for (let i = 0; i < 3; i++) {\r\n            normals[i1 + i] = normals[i1 + i] + n[i];\r\n            normals[i2 + i] = normals[i2 + i] + n[i];\r\n            normals[i3 + i] = normals[i3 + i] + n[i];\r\n        }\r\n    }\r\n\r\n    for (var i = 0; i < normals.length;) {\r\n        v3Set(n, normals[i], normals[i+1], normals[i+2]);\r\n        v3Normalize(n, n);\r\n        normals[i++] = n[0];\r\n        normals[i++] = n[1];\r\n        normals[i++] = n[2];\r\n    }\r\n\r\n    return normals;\r\n}\r\n// 0,0----1,0\r\n// 0,1----1,1\r\nconst quadToTriangle = [\r\n    [0, 0], [1, 0], [1, 1],\r\n    [0, 0], [1, 1], [0, 1]\r\n];\r\n\r\n// Add side vertices and indices. Include bevel.\r\nfunction addExtrudeSide(\r\n    out, {vertices, topVertices, depth, rect}, start, end,\r\n    cursors, opts\r\n) {\r\n    const ringVertexCount = end - start;\r\n    const splitSide = opts.smoothSide ? 1 : 2;\r\n    const splitRingVertexCount = ringVertexCount * splitSide;\r\n\r\n    const splitBevel = opts.smoothBevel ? 1 : 2;\r\n    const bevelSize = Math.min(depth / 2, opts.bevelSize);\r\n    const bevelSegments = opts.bevelSegments;\r\n    const vertexOffset = cursors.vertex;\r\n    const size = Math.max(rect.width, rect.height, depth);\r\n\r\n    // Side vertices\r\n    if (bevelSize > 0) {\r\n\r\n        const v0 = [0, 0, 1];\r\n        const v1 = [];\r\n        const v2 = [0, 0, -1];\r\n        const v = [];\r\n\r\n        let ringCount = 0;\r\n        let vLen = new Float32Array(ringVertexCount);\r\n        for (let k = 0; k < 2; k++) {\r\n            const z = (k === 0 ? (depth - bevelSize) : bevelSize);\r\n            for (let s = 0; s <= bevelSegments * splitBevel; s++) {\r\n                let uLen = 0;\r\n                let prevX;\r\n                let prevY;\r\n                for (let i = 0; i < ringVertexCount; i++) {\r\n\r\n                    for (let j = 0; j < splitSide; j++) {\r\n                        // TODO Cache and optimize\r\n                        let idx = ((i + j) % ringVertexCount + start) * 2;\r\n                        v1[0] = vertices[idx] - topVertices[idx];\r\n                        v1[1] = vertices[idx + 1] - topVertices[idx + 1];\r\n                        v1[2] = 0;\r\n                        const l = Math.sqrt(v1[0] * v1[0] + v1[1] * v1[1]);\r\n                        v1[0] /= l;\r\n                        v1[1] /= l;\r\n\r\n                        const t = (Math.floor(s / splitBevel) + (s % splitBevel)) / bevelSegments;\r\n                        k === 0 ? slerp(v, v0, v1, t)\r\n                            : slerp(v, v1, v2, t);\r\n\r\n                        const t2 = k === 0  ? t : 1 - t;\r\n                        const a = bevelSize * Math.sin(t2 * Math.PI / 2);\r\n                        const b = l * Math.cos(t2 * Math.PI / 2);\r\n\r\n                        // ellipse radius\r\n                        const r = bevelSize * l / Math.sqrt(a * a + b * b);\r\n\r\n                        const x = v[0] * r + topVertices[idx];\r\n                        const y = v[1] * r + topVertices[idx + 1];\r\n                        const zz = v[2] * r + z;\r\n                        out.position[cursors.vertex * 3] = x;\r\n                        out.position[cursors.vertex * 3 + 1] = y;\r\n                        out.position[cursors.vertex * 3 + 2] = zz;\r\n\r\n                        // TODO Cache and optimize\r\n                        if (i > 0 || j > 0) {\r\n                            uLen += Math.sqrt((prevX - x) * (prevX - x) + (prevY - y) * (prevY - y));\r\n                        }\r\n                        if (s > 0 || k > 0) {\r\n                            let tmp = (cursors.vertex - splitRingVertexCount) * 3;\r\n                            let prevX2 = out.position[tmp];\r\n                            let prevY2 = out.position[tmp + 1];\r\n                            let prevZ2 = out.position[tmp + 2];\r\n\r\n                            vLen[i] += Math.sqrt(\r\n                                (prevX2 - x) * (prevX2 - x)\r\n                                + (prevY2 - y) * (prevY2 - y)\r\n                                + (prevZ2 - zz) * (prevZ2 - zz)\r\n                            );\r\n                        }\r\n                        out.uv[cursors.vertex * 2] = uLen / size;\r\n                        out.uv[cursors.vertex * 2 + 1] = vLen[i] / size;\r\n\r\n                        prevX = x;\r\n                        prevY = y;\r\n                        cursors.vertex++;\r\n                    }\r\n\r\n                    if ((splitBevel > 1 && (s % splitBevel)) || (splitBevel === 1 && s >= 1)) {\r\n                        for (let f = 0; f < 6; f++) {\r\n                            const m = (quadToTriangle[f][0] + i * splitSide) % splitRingVertexCount;\r\n                            const n = quadToTriangle[f][1] + ringCount;\r\n                            out.indices[cursors.index++] = (n - 1) * splitRingVertexCount + m + vertexOffset;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                ringCount++;\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        for (let k = 0; k < 2; k++) {\r\n            const z = k === 0 ? depth - bevelSize : bevelSize;\r\n            let uLen = 0;\r\n            let prevX;\r\n            let prevY;\r\n            for (let i = 0; i < ringVertexCount; i++) {\r\n                for (let m = 0; m < splitSide; m++) {\r\n                    const idx = ((i + m) % ringVertexCount + start) * 2;\r\n                    const x = vertices[idx];\r\n                    const y = vertices[idx + 1];\r\n                    out.position[cursors.vertex * 3] = x;\r\n                    out.position[cursors.vertex * 3 + 1] = y;\r\n                    out.position[cursors.vertex * 3 + 2] = z;\r\n                    if (i > 0 || m > 0) {\r\n                        uLen += Math.sqrt((prevX - x) * (prevX - x) + (prevY - y) * (prevY - y));\r\n                    }\r\n                    out.uv[cursors.vertex * 2] = uLen / size;\r\n                    out.uv[cursors.vertex * 2 + 1] = z / size;\r\n                    prevX = x;\r\n                    prevY = y;\r\n\r\n                    cursors.vertex++;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // Connect the side\r\n    const sideStartRingN = bevelSize > 0 ? (bevelSegments * splitBevel + 1) : 1;\r\n    for (let i = 0; i < ringVertexCount; i++) {\r\n        for (let f = 0; f < 6; f++) {\r\n            const m = (quadToTriangle[f][0] + i * splitSide) % splitRingVertexCount;\r\n            const n = quadToTriangle[f][1] + sideStartRingN;\r\n            out.indices[cursors.index++] = (n - 1) * splitRingVertexCount + m + vertexOffset;\r\n        }\r\n    }\r\n}\r\n\r\nfunction addTopAndBottom({indices, vertices, topVertices, rect, depth}, out, cursors, opts) {\r\n    if (vertices.length <= 4) {\r\n        return;\r\n    }\r\n\r\n    const vertexOffset = cursors.vertex;\r\n    // Top indices\r\n    const indicesLen = indices.length;\r\n    for (let i = 0; i < indicesLen; i++) {\r\n        out.indices[cursors.index++] = vertexOffset + indices[i];\r\n    }\r\n    const size = Math.max(rect.width, rect.height);\r\n    // Top and bottom vertices\r\n    for (let k = 0; k < (opts.excludeBottom ? 1 : 2); k++) {\r\n        for (let i = 0; i < topVertices.length; i += 2) {\r\n            const x = topVertices[i];\r\n            const y = topVertices[i + 1];\r\n            out.position[cursors.vertex * 3] = x;\r\n            out.position[cursors.vertex * 3 + 1] = y;\r\n            out.position[cursors.vertex * 3 + 2] = (1 - k) * depth;\r\n\r\n            out.uv[cursors.vertex * 2] = (x - rect.x) / size;\r\n            out.uv[cursors.vertex * 2 + 1] = (y - rect.y) / size;\r\n            cursors.vertex++;\r\n        }\r\n    }\r\n    // Bottom indices\r\n    if (!opts.excludeBottom) {\r\n        const vertexCount = vertices.length / 2;\r\n        for (let i = 0; i < indicesLen; i += 3) {\r\n            for (let k = 0; k < 3; k++) {\r\n                out.indices[cursors.index++] = vertexOffset + vertexCount + indices[i + 2 - k];\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\nfunction innerExtrudeTriangulatedPolygon(preparedData, opts) {\r\n    let indexCount = 0;\r\n    let vertexCount = 0;\r\n\r\n    for (let p = 0; p < preparedData.length; p++) {\r\n        const {indices, vertices, holes, depth} = preparedData[p];\r\n        const polygonVertexCount = vertices.length / 2;\r\n        const bevelSize = Math.min(depth / 2, opts.bevelSize);\r\n        const bevelSegments = !(bevelSize > 0) ? 0 : opts.bevelSegments;\r\n\r\n        indexCount += indices.length * (opts.excludeBottom ? 1 : 2);\r\n        vertexCount += polygonVertexCount * (opts.excludeBottom ? 1 : 2);\r\n        const ringCount = 2 + bevelSegments * 2;\r\n\r\n        let start = 0;\r\n        let end = 0;\r\n        for (let h = 0; h < (holes ? holes.length : 0) + 1; h++) {\r\n            if (h === 0) {\r\n                end = holes && holes.length ? holes[0] : polygonVertexCount;\r\n            }\r\n            else {\r\n                start = holes[h - 1];\r\n                end = holes[h] || polygonVertexCount;\r\n            }\r\n\r\n            indexCount += (end - start) * 6 * (ringCount - 1);\r\n\r\n            const sideRingVertexCount = (end - start) * (opts.smoothSide ? 1 : 2);\r\n            vertexCount += sideRingVertexCount * ringCount\r\n                // Double the bevel vertex number if not smooth\r\n                + (!opts.smoothBevel ? bevelSegments * sideRingVertexCount * 2 : 0);\r\n        }\r\n    }\r\n\r\n    const data = {\r\n        position: new Float32Array(vertexCount * 3),\r\n        indices: new (vertexCount > 0xffff ? Uint32Array : Uint16Array)(indexCount),\r\n        uv: new Float32Array(vertexCount * 2)\r\n    };\r\n\r\n    const cursors = {\r\n        vertex: 0, index: 0\r\n    };\r\n\r\n    for (let d = 0; d < preparedData.length; d++) {\r\n        addTopAndBottom(preparedData[d], data, cursors, opts);\r\n    }\r\n\r\n    for (let d = 0; d < preparedData.length; d++) {\r\n        const {holes, vertices} = preparedData[d];\r\n        const topVertexCount = vertices.length / 2;\r\n\r\n        let start = 0;\r\n        let end = (holes && holes.length) ? holes[0] : topVertexCount;\r\n        // Add exterior\r\n        addExtrudeSide(data, preparedData[d], start, end, cursors, opts);\r\n        // Add holes\r\n        if (holes) {\r\n            for (let h = 0; h < holes.length; h++) {\r\n                start = holes[h];\r\n                end = holes[h + 1] || topVertexCount;\r\n                addExtrudeSide(data, preparedData[d], start, end, cursors, opts);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Wrap uv\r\n    for (let i = 0; i < data.uv.length; i++) {\r\n        const val = data.uv[i];\r\n        if (val > 0 && Math.round(val) === val) {\r\n            data.uv[i] = 1;\r\n        }\r\n        else {\r\n            data.uv[i] = val % 1;\r\n        }\r\n    }\r\n\r\n    data.normal = generateNormal(data.indices, data.position);\r\n    // PENDING\r\n    data.boundingRect = preparedData[0] && preparedData[0].rect;\r\n\r\n    return data;\r\n}\r\n\r\nfunction convertPolylineToTriangulatedPolygon(polyline, polylineIdx, opts) {\r\n    const lineWidth = opts.lineWidth;\r\n    const pointCount = polyline.length;\r\n    const points = new Float32Array(pointCount * 2);\r\n    const translate = opts.translate || [0, 0];\r\n    const scale = opts.scale || [1, 1];\r\n    for (let i = 0, k = 0; i < pointCount; i++) {\r\n        points[k++] = polyline[i][0] * scale[0] + translate[0];\r\n        points[k++] = polyline[i][1] * scale[1] + translate[1];\r\n    }\r\n\r\n    if (area(points, 0, pointCount) < 0) {\r\n        reversePoints(points, 2, 0, pointCount);\r\n    }\r\n\r\n    const insidePoints = [];\r\n    const outsidePoints = [];\r\n    const miterLimit = opts.miterLimit;\r\n    const outsideIndicesMap = innerOffsetPolygon(\r\n        points, outsidePoints, 0, pointCount, 0, -lineWidth / 2, miterLimit, false\r\n    );\r\n    reversePoints(points, 2, 0, pointCount);\r\n    const insideIndicesMap = innerOffsetPolygon(\r\n        points, insidePoints, 0, pointCount, 0, -lineWidth / 2, miterLimit, false\r\n    );\r\n\r\n    const polygonVertexCount = (insidePoints.length + outsidePoints.length) / 2;\r\n    const polygonVertices = new Float32Array(polygonVertexCount * 2);\r\n\r\n    let offset = 0;\r\n    const outsidePointCount = outsidePoints.length / 2;\r\n    for (let i = 0; i < outsidePoints.length; i++) {\r\n        polygonVertices[offset++] = outsidePoints[i];\r\n    }\r\n    for (let i = 0; i < insidePoints.length; i++) {\r\n        polygonVertices[offset++] = insidePoints[i];\r\n    }\r\n\r\n    // Built indices\r\n    const indices = new (polygonVertexCount > 0xffff ? Uint32Array : Uint16Array)(\r\n        ((pointCount - 1) * 2 + (polygonVertexCount - pointCount * 2)) * 3\r\n    );\r\n    let off = 0;\r\n    for (let i = 0; i < pointCount - 1; i++) {\r\n        const i2 = i + 1;\r\n        indices[off++] = outsidePointCount - 1 - outsideIndicesMap[i];\r\n        indices[off++] = outsidePointCount - 1 - outsideIndicesMap[i] - 1;\r\n        indices[off++] = insideIndicesMap[i] + 1 + outsidePointCount;\r\n\r\n        indices[off++] = outsidePointCount - 1 - outsideIndicesMap[i];\r\n        indices[off++] = insideIndicesMap[i] + 1 + outsidePointCount;\r\n        indices[off++] = insideIndicesMap[i] + outsidePointCount;\r\n\r\n        if (insideIndicesMap[i2] - insideIndicesMap[i] === 2) {\r\n            indices[off++] = insideIndicesMap[i] + 2 + outsidePointCount;\r\n            indices[off++] = insideIndicesMap[i] + 1 + outsidePointCount;\r\n            indices[off++] = outsidePointCount - outsideIndicesMap[i2] - 1;\r\n        }\r\n        else if (outsideIndicesMap[i2] - outsideIndicesMap[i] === 2) {\r\n            indices[off++] = insideIndicesMap[i2] + outsidePointCount;\r\n            indices[off++] = outsidePointCount - 1 - (outsideIndicesMap[i] + 1);\r\n            indices[off++] = outsidePointCount - 1 - (outsideIndicesMap[i] + 2);\r\n        }\r\n    }\r\n\r\n    const topVertices = opts.bevelSize > 0\r\n        ? offsetPolygon(polygonVertices, [], opts.bevelSize, null, true) : polygonVertices;\r\n    const boundingRect = opts.boundingRect;\r\n    return {\r\n        vertices: polygonVertices,\r\n        indices,\r\n        topVertices,\r\n        rect: {\r\n            x: boundingRect.x * scale[0] + translate[0],\r\n            y: boundingRect.y * scale[1] + translate[1],\r\n            width: boundingRect.width * scale[0],\r\n            height: boundingRect.height * scale[1],\r\n        },\r\n        depth: typeof opts.depth === 'function' ? opts.depth(polylineIdx) : opts.depth,\r\n        holes: []\r\n    };\r\n}\r\n\r\nfunction removeClosePointsOfPolygon(polygon, epsilon) {\r\n    const newPolygon = [];\r\n    for (let k  = 0; k < polygon.length; k++) {\r\n        const points = polygon[k];\r\n        const newPoints = [];\r\n        const len = points.length;\r\n        let x1 = points[len - 1][0];\r\n        let y1 = points[len - 1][1];\r\n        let dist = 0;\r\n        for (let i = 0; i < len; i++) {\r\n            let x2 = points[i][0];\r\n            let y2 = points[i][1];\r\n            const dx = x2 - x1;\r\n            const dy = y2 - y1;\r\n            dist += Math.sqrt(dx * dx + dy * dy);\r\n            if (dist > epsilon) {\r\n                newPoints.push(points[i]);\r\n                dist = 0;\r\n            }\r\n            x1 = x2;\r\n            y1 = y2;\r\n        }\r\n        if (newPoints.length >= 3) {\r\n            newPolygon.push(newPoints);\r\n        }\r\n    }\r\n    return newPolygon.length > 0 ? newPolygon : null;\r\n}\r\n\r\nfunction simplifyPolygon(polygon, tolerance) {\r\n    const newPolygon = [];\r\n    for (let k  = 0; k < polygon.length; k++) {\r\n        let points = polygon[k];\r\n        points = doSimplify(points, tolerance, true);\r\n        if (points.length >= 3) {\r\n            newPolygon.push(points);\r\n        }\r\n    }\r\n    return newPolygon.length > 0 ? newPolygon : null;\r\n}\r\n/**\r\n *\r\n * @param {Array} polygons Polygons array that match GeoJSON MultiPolygon geometry.\r\n * @param {Object} [opts]\r\n * @param {number|Function} [opts.depth]\r\n * @param {number} [opts.bevelSize = 0]\r\n * @param {number} [opts.bevelSegments = 2]\r\n * @param {number} [opts.simplify = 0]\r\n * @param {boolean} [opts.smoothSide = false]\r\n * @param {boolean} [opts.smoothBevel = false]\r\n * @param {boolean} [opts.excludeBottom = false]\r\n * @param {Object} [opts.fitRect] translate and scale will be ignored if fitRect is set\r\n * @param {Array} [opts.translate]\r\n * @param {Array} [opts.scale]\r\n *\r\n * @return {Object} {indices, position, uv, normal, boundingRect}\r\n */\r\nexport function extrudePolygon(polygons, opts) {\r\n\r\n    opts = Object.assign({}, opts);\r\n\r\n    const min = [Infinity, Infinity];\r\n    const max = [-Infinity, -Infinity];\r\n    for (let i = 0; i < polygons.length; i++) {\r\n        updateBoundingRect(polygons[i][0], min, max);\r\n    }\r\n    opts.boundingRect = opts.boundingRect || {\r\n        x: min[0], y: min[1], width: max[0] - min[0], height: max[1] - min[1]\r\n    };\r\n\r\n    normalizeOpts(opts);\r\n\r\n    const preparedData = [];\r\n    const translate = opts.translate || [0, 0];\r\n    const scale = opts.scale || [1, 1];\r\n    const boundingRect = opts.boundingRect;\r\n    const transformdRect = {\r\n        x: boundingRect.x * scale[0] + translate[0],\r\n        y: boundingRect.y * scale[1] + translate[1],\r\n        width: boundingRect.width * scale[0],\r\n        height: boundingRect.height * scale[1],\r\n    };\r\n\r\n    const epsilon = Math.min(\r\n        boundingRect.width, boundingRect.height\r\n    ) / 1e5;\r\n    for (let i = 0; i < polygons.length; i++) {\r\n        let newPolygon = removeClosePointsOfPolygon(polygons[i], epsilon);\r\n        if (!newPolygon) {\r\n            continue;\r\n        }\r\n        const simplifyTolerance = opts.simplify / Math.max(scale[0], scale[1]);\r\n        if (simplifyTolerance > 0) {\r\n            newPolygon = simplifyPolygon(newPolygon, simplifyTolerance);\r\n        }\r\n        if (!newPolygon) {\r\n            continue;\r\n        }\r\n\r\n        const {vertices, holes, dimensions} = earcut.flatten(newPolygon);\r\n\r\n        for (let k = 0; k < vertices.length;) {\r\n            vertices[k] = vertices[k++] * scale[0] + translate[0];\r\n            vertices[k] = vertices[k++] * scale[1] + translate[1];\r\n        }\r\n\r\n        convertToClockwise(vertices, holes);\r\n\r\n        if (dimensions !== 2) {\r\n            throw new Error('Only 2D polygon points are supported');\r\n        }\r\n        const topVertices = opts.bevelSize > 0\r\n            ? offsetPolygon(vertices, holes, opts.bevelSize, null, true) : vertices;\r\n        const indices = triangulate(topVertices, holes, dimensions);\r\n        preparedData.push({\r\n            indices,\r\n            vertices,\r\n            topVertices,\r\n            holes,\r\n            rect: transformdRect,\r\n            depth: typeof opts.depth === 'function' ? opts.depth(i) : opts.depth\r\n        });\r\n    }\r\n    return innerExtrudeTriangulatedPolygon(preparedData, opts);\r\n};\r\n\r\n/**\r\n *\r\n * @param {Array} polylines Polylines array that match GeoJSON MultiLineString geometry.\r\n * @param {Object} [opts]\r\n * @param {number} [opts.depth]\r\n * @param {number} [opts.bevelSize = 0]\r\n * @param {number} [opts.bevelSegments = 2]\r\n * @param {number} [opts.simplify = 0]\r\n * @param {boolean} [opts.smoothSide = false]\r\n * @param {boolean} [opts.smoothBevel = false]\r\n * @param {boolean} [opts.excludeBottom = false]\r\n * @param {boolean} [opts.lineWidth = 1]\r\n * @param {boolean} [opts.miterLimit = 2]\r\n * @param {Object} [opts.fitRect] translate and scale will be ignored if fitRect is set\r\n * @param {Array} [opts.translate]\r\n * @param {Array} [opts.scale]\r\n * @param {Object} [opts.boundingRect]\r\n * @return {Object} {indices, position, uv, normal, boundingRect}\r\n */\r\nexport function extrudePolyline(polylines, opts) {\r\n\r\n    opts = Object.assign({}, opts);\r\n\r\n    const min = [Infinity, Infinity];\r\n    const max = [-Infinity, -Infinity];\r\n    for (let i = 0; i < polylines.length; i++) {\r\n        updateBoundingRect(polylines[i], min, max);\r\n    }\r\n    opts.boundingRect = opts.boundingRect || {\r\n        x: min[0], y: min[1], width: max[0] - min[0], height: max[1] - min[1]\r\n    };\r\n\r\n    normalizeOpts(opts);\r\n    const scale = opts.scale || [1, 1];\r\n\r\n    if (opts.lineWidth == null) {\r\n        opts.lineWidth = 1;\r\n    }\r\n    if (opts.miterLimit == null) {\r\n        opts.miterLimit = 2;\r\n    }\r\n    const preparedData = [];\r\n    // Extrude polyline to polygon\r\n    for (let i = 0; i < polylines.length; i++) {\r\n        let newPolyline = polylines[i];\r\n        const simplifyTolerance = opts.simplify / Math.max(scale[0], scale[1]);\r\n        if (simplifyTolerance > 0) {\r\n            newPolyline = doSimplify(newPolyline, simplifyTolerance, true);\r\n        }\r\n        preparedData.push(convertPolylineToTriangulatedPolygon(newPolyline, i, opts));\r\n    }\r\n\r\n    return innerExtrudeTriangulatedPolygon(preparedData, opts);\r\n}\r\n\r\nfunction updateBoundingRect(points, min, max) {\r\n    for (let i = 0; i < points.length; i++) {\r\n        min[0] = Math.min(points[i][0], min[0]);\r\n        min[1] = Math.min(points[i][1], min[1]);\r\n        max[0] = Math.max(points[i][0], max[0]);\r\n        max[1] = Math.max(points[i][1], max[1]);\r\n    }\r\n}\r\n\r\n/**\r\n *\r\n * @param {Object} geojson\r\n * @param {Object} [opts]\r\n * @param {number} [opts.depth]\r\n * @param {number} [opts.bevelSize = 0]\r\n * @param {number} [opts.bevelSegments = 2]\r\n * @param {number} [opts.simplify = 0]\r\n * @param {boolean} [opts.smoothSide = false]\r\n * @param {boolean} [opts.smoothBevel = false]\r\n * @param {boolean} [opts.excludeBottom = false]\r\n * @param {boolean} [opts.lineWidth = 1]\r\n * @param {boolean} [opts.miterLimit = 2]\r\n * @param {Object} [opts.fitRect] translate and scale will be ignored if fitRect is set\r\n * @param {Array} [opts.translate]\r\n * @param {Array} [opts.scale]\r\n * @param {Object} [opts.boundingRect]\r\n * @return {Object} {polyline: {indices, position, uv, normal}, polygon: {indices, position, uv, normal}}\r\n */\r\n\r\n // TODO Not merge feature\r\nexport function extrudeGeoJSON(geojson, opts) {\r\n\r\n    opts = Object.assign({}, opts);\r\n\r\n    const polylines = [];\r\n    const polygons = [];\r\n\r\n    const polylineFeatureIndices = [];\r\n    const polygonFeatureIndices = [];\r\n\r\n    const min = [Infinity, Infinity];\r\n    const max = [-Infinity, -Infinity];\r\n\r\n    for (let i = 0; i < geojson.features.length; i++) {\r\n        const feature = geojson.features[i];\r\n        const geometry = feature.geometry;\r\n        if (geometry && geometry.coordinates) {\r\n            switch (geometry.type) {\r\n                case 'LineString':\r\n                    polylines.push(geometry.coordinates);\r\n                    polylineFeatureIndices.push(i);\r\n                    updateBoundingRect(geometry.coordinates, min, max);\r\n                    break;\r\n                case 'MultiLineString':\r\n                    for (let k = 0; k < geometry.coordinates.length; k++) {\r\n                        polylines.push(geometry.coordinates[k]);\r\n                        polylineFeatureIndices.push(i);\r\n                        updateBoundingRect(geometry.coordinates[k], min, max);\r\n                    }\r\n                    break;\r\n                case 'Polygon':\r\n                    polygons.push(geometry.coordinates);\r\n                    polygonFeatureIndices.push(i);\r\n                    updateBoundingRect(geometry.coordinates[0], min, max);\r\n                    break;\r\n                case 'MultiPolygon':\r\n                    for (let k = 0; k < geometry.coordinates.length; k++) {\r\n                        polygons.push(geometry.coordinates[k]);\r\n                        polygonFeatureIndices.push(i);\r\n                        updateBoundingRect(geometry.coordinates[k][0], min, max);\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    opts.boundingRect = opts.boundingRect || {\r\n        x: min[0], y: min[1], width: max[0] - min[0], height: max[1] - min[1]\r\n    };\r\n\r\n    const originalDepth = opts.depth;\r\n    return {\r\n        polyline: extrudePolyline(polylines, Object.assign(opts, {\r\n            depth: function (idx) {\r\n                if (typeof originalDepth === 'function') {\r\n                    return originalDepth(\r\n                        geojson.features[polylineFeatureIndices[idx]]\r\n                    );\r\n                }\r\n                return originalDepth;\r\n            }\r\n        })),\r\n        polygon: extrudePolygon(polygons, Object.assign(opts, {\r\n            depth: function (idx) {\r\n                if (typeof originalDepth === 'function') {\r\n                    return originalDepth(\r\n                        geojson.features[polygonFeatureIndices[idx]]\r\n                    );\r\n                }\r\n                return originalDepth;\r\n            }\r\n        }))\r\n    };\r\n}","/* eslint-disable indent */\r\nimport * as maptalks from 'maptalks';\r\nimport { GeoJSONFeature } from './../type/index';\r\n\r\n\r\nconst TYPES: Array<string> = ['Point', 'MultiPoint', 'LineString', 'MultiLineString', 'Polygon', 'MultiPolygon'];\r\n\r\nfunction getGeoJSONType(feature: GeoJSONFeature): string {\r\n    return feature.geometry ? feature.geometry.type : null;\r\n}\r\n\r\n\r\nexport function isGeoJSON(feature: GeoJSONFeature): boolean {\r\n    const type = getGeoJSONType(feature);\r\n    if (type) {\r\n        for (let i = 0, len = TYPES.length; i < len; i++) {\r\n            if (TYPES[i] === type) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n\r\nexport function isGeoJSONPolygon(feature: GeoJSONFeature): boolean {\r\n    const type = getGeoJSONType(feature);\r\n    if (type && (type === TYPES[4] || type === TYPES[5])) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nexport function isGeoJSONLine(feature: GeoJSONFeature): boolean {\r\n    const type = getGeoJSONType(feature);\r\n    if (type && (type === TYPES[2] || type === TYPES[3])) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nexport function isGeoJSONPoint(feature: GeoJSONFeature): boolean {\r\n    const type = getGeoJSONType(feature);\r\n    if (type && (type === TYPES[0] || type === TYPES[1])) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nexport function isGeoJSONMulti(feature: GeoJSONFeature): boolean {\r\n    const type = getGeoJSONType(feature);\r\n    if (type) {\r\n        if (type.indexOf('Multi') > -1) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nexport function getGeoJSONCoordinates(feature: GeoJSONFeature):\r\n    Array<number> | Array<Array<number>> | Array<Array<Array<number>>> | Array<Array<Array<Array<number>>>> {\r\n    return feature.geometry ? feature.geometry.coordinates : [];\r\n}\r\n\r\n\r\nexport function getGeoJSONCenter(feature: GeoJSONFeature, out?: maptalks.Coordinate): maptalks.Coordinate {\r\n    const type = getGeoJSONType(feature);\r\n    if (!type || !feature.geometry) {\r\n        return null;\r\n    }\r\n    const geometry = feature.geometry;\r\n    const coordinates = geometry.coordinates;\r\n    if (!coordinates) {\r\n        return null;\r\n    }\r\n    // const coords: Array<Array<number>> = [];\r\n    let sumX = 0, sumY = 0, coordLen = 0;\r\n    switch (type) {\r\n        case 'Point': {\r\n            sumX = (coordinates as Array<number>)[0];\r\n            sumY = (coordinates as Array<number>)[1];\r\n            // coords.push(coordinates as Array<number>);\r\n            coordLen++;\r\n            break;\r\n        }\r\n        case 'MultiPoint':\r\n        case 'LineString': {\r\n            for (let i = 0, len = coordinates.length; i < len; i++) {\r\n                sumX += (coordinates[i] as Array<number>)[0];\r\n                sumY += (coordinates[i] as Array<number>)[1];\r\n                coordLen++;\r\n                // coords.push(coordinates[i] as Array<number>);\r\n            }\r\n            break;\r\n        }\r\n        case 'MultiLineString':\r\n        case 'Polygon': {\r\n            for (let i = 0, len = coordinates.length; i < len; i++) {\r\n                for (let j = 0, len1 = (coordinates[i] as Array<Array<number>>).length; j < len1; j++) {\r\n                    // coords.push((coordinates[i] as Array<Array<number>>)[j]);\r\n                    sumX += (coordinates[i] as Array<Array<number>>)[j][0];\r\n                    sumY += (coordinates[i] as Array<Array<number>>)[j][1];\r\n                    coordLen++;\r\n                }\r\n            }\r\n            break;\r\n        }\r\n        case 'MultiPolygon': {\r\n            for (let i = 0, len = coordinates.length; i < len; i++) {\r\n                for (let j = 0, len1 = (coordinates[i] as Array<Array<Array<number>>>).length; j < len1; j++) {\r\n                    for (let m = 0, len2 = (coordinates[i] as Array<Array<Array<number>>>)[j].length; m < len2; m++) {\r\n                        // coords.push(((coordinates[i] as Array<Array<Array<number>>>)[j])[m]);\r\n                        sumX += (coordinates[i] as Array<Array<Array<number>>>)[j][m][0];\r\n                        sumY += (coordinates[i] as Array<Array<Array<number>>>)[j][m][1];\r\n                        coordLen++;\r\n                    }\r\n                }\r\n            }\r\n            break;\r\n        }\r\n    }\r\n    const x = sumX / coordLen, y = sumY / coordLen;\r\n    if (out) {\r\n        out.x = x;\r\n        out.y = y;\r\n        return out;\r\n    }\r\n    return new maptalks.Coordinate(x, y);\r\n}\r\n\r\n\r\n\r\nexport function spliteGeoJSONMulti(feature: GeoJSONFeature): GeoJSONFeature[] {\r\n    const type = getGeoJSONType(feature);\r\n    if (!type || !feature.geometry) {\r\n        return null;\r\n    }\r\n    const geometry = feature.geometry;\r\n    const properties = feature.properties || {};\r\n    const coordinates = geometry.coordinates;\r\n    if (!coordinates) {\r\n        return null;\r\n    }\r\n    const features: GeoJSONFeature[] = [];\r\n    let fType;\r\n    switch (type) {\r\n        case 'MultiPoint': {\r\n            fType = 'Point';\r\n            break;\r\n        }\r\n        case 'MultiLineString': {\r\n            fType = 'LineString';\r\n            break;\r\n        }\r\n        case 'MultiPolygon': {\r\n            fType = 'Polygon';\r\n            break;\r\n        }\r\n    }\r\n    if (fType) {\r\n        for (let i = 0, len = coordinates.length; i < len; i++) {\r\n            features.push({\r\n                type: 'Feature',\r\n                geometry: {\r\n                    type: fType as any,\r\n                    coordinates: coordinates[i] as any\r\n                },\r\n                properties\r\n            });\r\n        }\r\n    } else {\r\n        features.push(feature);\r\n    }\r\n    return features;\r\n}\r\n","import * as THREE from 'three';\r\nimport * as maptalks from 'maptalks';\r\nimport { extrudePolyline } from 'deyihu-geometry-extrude';\r\nimport { isGeoJSON, getGeoJSONCoordinates, getGeoJSONCenter, isGeoJSONMulti, spliteGeoJSONMulti } from './GeoJSONUtil';\r\nimport { addAttribute } from './ThreeAdaptUtil';\r\nimport { ThreeLayer } from './../index';\r\nimport { GeoJSONLineStringFeature, LineStringType, MergeAttributeType, SingleLineStringType } from './../type/index';\r\nconst COMMA = ',';\r\n\r\n/**\r\n *\r\n * @param {maptalks.LineString} lineString\r\n * @param {ThreeLayer} layer\r\n */\r\nexport function getLinePosition(lineString: SingleLineStringType | Array<THREE.Vector3>,\r\n    layer: ThreeLayer, center: maptalks.Coordinate): {\r\n        positions2d: Float32Array,\r\n        positions: Float32Array;\r\n        positionsV: THREE.Vector3[];\r\n    } {\r\n    const positionsV: THREE.Vector3[] = [];\r\n    if (Array.isArray(lineString) && lineString[0] instanceof THREE.Vector3) {\r\n        for (let i = 0, len = lineString.length; i < len; i++) {\r\n            const v = lineString[i];\r\n            positionsV.push(v);\r\n        }\r\n    } else {\r\n        if (Array.isArray(lineString)) {\r\n            lineString = new maptalks.LineString(lineString);\r\n        }\r\n        const z = 0;\r\n        //support geojson\r\n        let coordinates: any, cent: maptalks.Coordinate;\r\n        if (isGeoJSON(lineString as any)) {\r\n            coordinates = getGeoJSONCoordinates(lineString as any);\r\n            if (!center) {\r\n                cent = getGeoJSONCenter(lineString as any);\r\n            }\r\n        } else if (lineString instanceof maptalks.LineString) {\r\n            coordinates = lineString.getCoordinates();\r\n            if (!center) {\r\n                cent = lineString.getCenter();\r\n            }\r\n        }\r\n        const centerPt = layer.coordinateToVector3(center || cent);\r\n        for (let i = 0, len = coordinates.length; i < len; i++) {\r\n            const coordinate = coordinates[i];\r\n            const v = layer.coordinateToVector3(coordinate, z).sub(centerPt);\r\n            // positions.push(v.x, v.y, v.z);\r\n            positionsV.push(v);\r\n        }\r\n    }\r\n    const positions = new Float32Array(positionsV.length * 3);\r\n    const positions2d = new Float32Array(positionsV.length * 2);\r\n    for (let i = 0, len = positionsV.length; i < len; i++) {\r\n        const idx = i * 3;\r\n        const v = positionsV[i];\r\n        positions[idx] = v.x;\r\n        positions[idx + 1] = v.y;\r\n        positions[idx + 2] = v.z;\r\n\r\n        const idx1 = i * 2;\r\n        positions2d[idx1] = v.x;\r\n        positions2d[idx1 + 1] = v.y;\r\n    }\r\n    return {\r\n        positions,\r\n        positionsV,\r\n        positions2d\r\n    };\r\n}\r\n\r\n\r\n\r\n/**\r\n *\r\n * @param {maptalks.LineString} lineString\r\n * @param {Number} lineWidth\r\n * @param {Number} depth\r\n * @param {ThreeLayer} layer\r\n */\r\nexport function getExtrudeLineGeometry(lineString: SingleLineStringType, lineWidth = 1, depth = 1,\r\n    layer: ThreeLayer, center: maptalks.Coordinate): THREE.BufferGeometry {\r\n    const {\r\n        indices,\r\n        position,\r\n        normal,\r\n        uv\r\n    } = getExtrudeLineParams(lineString, lineWidth, depth, layer, center);\r\n    const geometry = new THREE.BufferGeometry();\r\n    addAttribute(geometry, 'position', new THREE.BufferAttribute(position, 3));\r\n    addAttribute(geometry, 'normal', new THREE.BufferAttribute(normal, 3));\r\n    addAttribute(geometry, 'uv', new THREE.BufferAttribute(uv, 2));\r\n    geometry.setIndex(new THREE.BufferAttribute(indices, 1));\r\n    return geometry;\r\n}\r\n\r\n/**\r\n *\r\n * @param {Array[Array]} chunkLines\r\n * @param {*} layer\r\n */\r\nexport function getChunkLinesPosition(chunkLines: Array<Array<Array<number>>>, layer: ThreeLayer, positionMap: { [key: string]: any }, centerPt: THREE.Vector3) {\r\n    const positions: Array<number> = [],\r\n        positionsV: Array<THREE.Vector3> = [], lnglats: Array<Array<number>> = [];\r\n    for (let i = 0, len = chunkLines.length; i < len; i++) {\r\n        const line = chunkLines[i];\r\n        for (let j = 0, len1 = line.length; j < len1; j++) {\r\n            const lnglat = line[j];\r\n            if (lnglats.length > 0) {\r\n                const key = lnglat.join(COMMA).toString();\r\n                const key1 = lnglats[lnglats.length - 1].join(COMMA).toString();\r\n                if (key !== key1) {\r\n                    lnglats.push(lnglat);\r\n                }\r\n            } else {\r\n                lnglats.push(lnglat);\r\n            }\r\n        }\r\n    }\r\n    const z = 0;\r\n    for (let i = 0, len = lnglats.length; i < len; i++) {\r\n        const lnglat = lnglats[i];\r\n        let v;\r\n        const key = lnglat.join(COMMA).toString();\r\n        if (positionMap && positionMap[key]) {\r\n            v = positionMap[key];\r\n        } else {\r\n            v = layer.coordinateToVector3(lnglat, z).sub(centerPt);\r\n        }\r\n        positionsV.push(v);\r\n        positions.push(v.x, v.y, v.z);\r\n    }\r\n    return {\r\n        positions: positions,\r\n        positionsV: positionsV,\r\n        lnglats: lnglats\r\n    };\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param {*} lineString\r\n * @param {*} lineWidth\r\n * @param {*} depth\r\n * @param {*} layer\r\n */\r\nexport function getExtrudeLineParams(lineString: SingleLineStringType | Array<THREE.Vector3>,\r\n    lineWidth = 1, depth = 1, layer: ThreeLayer, center?: maptalks.Coordinate): MergeAttributeType {\r\n    const positions = getLinePosition(lineString, layer, center).positionsV;\r\n    const ps = [];\r\n    for (let i = 0, len = positions.length; i < len; i++) {\r\n        const p = positions[i];\r\n        ps.push([p.x, p.y]);\r\n    }\r\n    const {\r\n        indices,\r\n        position,\r\n        normal,\r\n        uv\r\n    } = extrudePolyline([ps], {\r\n        lineWidth: lineWidth,\r\n        depth: depth\r\n    });\r\n    return {\r\n        position: position,\r\n        normal: normal,\r\n        indices: indices,\r\n        uv\r\n    };\r\n}\r\n\r\nexport function LineStringSplit(lineString: LineStringType) {\r\n    let lineStrings: Array<SingleLineStringType> = [], center: maptalks.Coordinate;\r\n    if (lineString instanceof maptalks.MultiLineString) {\r\n        lineStrings = lineString.getGeometries();\r\n        center = lineString.getCenter();\r\n    } else if (lineString instanceof maptalks.LineString) {\r\n        lineStrings.push(lineString);\r\n        center = lineString.getCenter();\r\n    } else if (isGeoJSON(lineString)) {\r\n        center = getGeoJSONCenter(lineString);\r\n        if (isGeoJSONMulti(lineString)) {\r\n            lineStrings = spliteGeoJSONMulti(lineString) as any;\r\n        } else {\r\n            lineStrings.push(lineString as GeoJSONLineStringFeature);\r\n        }\r\n    }\r\n    return {\r\n        lineStrings,\r\n        center\r\n    };\r\n}\r\n\r\nexport function setLineSegmentPosition(position: Array<number>, positionsV: Array<THREE.Vector3>) {\r\n    for (let i = 0, len = positionsV.length; i < len; i++) {\r\n        const v = positionsV[i];\r\n        if (i > 0 && i < len - 1) {\r\n            position.push(v.x, v.y, v.z);\r\n        }\r\n        position.push(v.x, v.y, v.z);\r\n    }\r\n}\r\n","import * as maptalks from 'maptalks';\r\nimport * as THREE from 'three';\r\nimport BaseObject from './BaseObject';\r\nimport { ThreeLayer } from './index';\r\nimport { LineMaterialType, LineOptionType, LineStringType } from './type/index';\r\nimport { setBottomHeight } from './util';\r\nimport { getLinePosition, LineStringSplit, setLineSegmentPosition } from './util/LineUtil';\r\nimport { addAttribute, getVertexColors } from './util/ThreeAdaptUtil';\r\n\r\nfunction initColors(cs) {\r\n    const colors = [];\r\n    if (cs && cs.length) {\r\n        cs.forEach(color => {\r\n            color = (color instanceof THREE.Color ? color : new THREE.Color(color));\r\n            colors.push(color.r, color.g, color.b);\r\n        });\r\n    }\r\n    return colors;\r\n}\r\n\r\nconst OPTIONS = {\r\n    altitude: 0,\r\n    bottomHeight: 0,\r\n    colors: null\r\n};\r\n\r\n/**\r\n *\r\n */\r\nclass Line extends BaseObject {\r\n    constructor(lineString: LineStringType, options: LineOptionType, material: LineMaterialType, layer: ThreeLayer) {\r\n        options = maptalks.Util.extend({}, OPTIONS, options, { layer, lineString });\r\n        super();\r\n        this._initOptions(options);\r\n        const { lineStrings, center } = LineStringSplit(lineString);\r\n        const ps = [];\r\n        for (let i = 0, len = lineStrings.length; i < len; i++) {\r\n            const lineString = lineStrings[i];\r\n            const { positionsV } = getLinePosition(lineString, layer, center);\r\n            setLineSegmentPosition(ps, positionsV);\r\n        }\r\n        const geometry = new THREE.BufferGeometry();\r\n        addAttribute(geometry, 'position', new THREE.Float32BufferAttribute(ps, 3));\r\n        setBottomHeight(geometry, options.bottomHeight, layer);\r\n        const colors = initColors(options.colors);\r\n        if (colors && colors.length) {\r\n            addAttribute(geometry, 'color', new THREE.Float32BufferAttribute(colors, 3));\r\n            (material as any).vertexColors = getVertexColors();\r\n        }\r\n        this._createLineSegments(geometry, material);\r\n\r\n        const { altitude } = options;\r\n        const z = layer.distanceToVector3(altitude, altitude).x;\r\n        const v = layer.coordinateToVector3(center, z);\r\n        this.getObject3d().position.copy(v);\r\n        this.type = 'Line';\r\n    }\r\n}\r\n\r\nexport default Line;\r\n","import * as THREE from 'three';\r\nimport * as maptalks from 'maptalks';\r\nimport { isGeoJSONPolygon, spliteGeoJSONMulti, getGeoJSONCenter, isGeoJSONMulti, getGeoJSONCoordinates } from './GeoJSONUtil';\r\nimport { extrudePolygon } from 'deyihu-geometry-extrude';\r\nimport { addAttribute } from './ThreeAdaptUtil';\r\nimport { ThreeLayer } from './../index';\r\nimport { MergeAttributeType, PolygonType, SinglePolygonType } from './../type/index';\r\n\r\nconst topColor: THREE.Color = new THREE.Color('#fff'),\r\n    bottomColor: THREE.Color = new THREE.Color('#fff');\r\n/**\r\n * this is for ExtrudeMesh util\r\n */\r\n\r\n/**\r\n * Fix the bug in the center of multipoygon\r\n * @param {maptalks.Polygon} polygon\r\n * @param {*} layer\r\n */\r\n// export function toShape(datas = []) {\r\n//     const shapes = [];\r\n//     for (let i = 0, len = datas.length; i < len; i++) {\r\n//         const { outer, holes } = datas[i];\r\n//         const shape = [outer];\r\n//         if (holes && holes.length) {\r\n//             for (let j = 0, len1 = holes.length; j < len1; j++) {\r\n//                 shape.push(holes[j]);\r\n//             }\r\n//         }\r\n//         shapes.push(shape);\r\n//     }\r\n//     return shapes;\r\n// }\r\n\r\n/**\r\n *  Support custom center point\r\n * @param {maptalks.Polygon|maptalks.MultiPolygon} polygon\r\n * @param {*} height\r\n * @param {*} layer\r\n */\r\nexport function getExtrudeGeometry(polygon: PolygonType, height: number, layer: ThreeLayer, center?: maptalks.Coordinate): THREE.BufferGeometry {\r\n    const { position, normal, uv, indices } = getExtrudeGeometryParams(polygon, height, layer, center);\r\n    const color = new Float32Array(position.length);\r\n    color.fill(1, 0, position.length);\r\n    const bufferGeomertry = new THREE.BufferGeometry();\r\n    addAttribute(bufferGeomertry, 'color', new THREE.BufferAttribute(color, 3));\r\n    addAttribute(bufferGeomertry, 'normal', new THREE.BufferAttribute(normal, 3));\r\n    addAttribute(bufferGeomertry, 'position', new THREE.BufferAttribute(position, 3));\r\n    addAttribute(bufferGeomertry, 'uv', new THREE.BufferAttribute(uv, 2));\r\n    bufferGeomertry.setIndex(new THREE.Uint32BufferAttribute(indices, 1));\r\n    return bufferGeomertry;\r\n}\r\n\r\n\r\nexport function getExtrudeGeometryParams(polygon: PolygonType, height: number, layer: ThreeLayer, center: maptalks.Coordinate, centerPt?: THREE.Vector3, altCache?: any): MergeAttributeType {\r\n    const datas = getPolygonPositions(polygon, layer, center, centerPt, false);\r\n    const shapes = datas;\r\n    //Possible later use of geojson\r\n    if (!shapes) return null;\r\n    //Reduce height and repeat calculation\r\n    if (altCache) {\r\n        if (altCache[height] == null) {\r\n            altCache[height] = layer.distanceToVector3(height, height).x;\r\n        }\r\n        height = altCache[height];\r\n    } else {\r\n        height = layer.distanceToVector3(height, height).x;\r\n    }\r\n    const { position, normal, uv, indices } = extrudePolygon(shapes as any, {\r\n        depth: height\r\n    });\r\n    return {\r\n        position, normal, uv, indices\r\n    };\r\n}\r\n\r\n/**\r\n *\r\n * @param {*} geometry\r\n * @param {*} color\r\n * @param {*} _topColor\r\n */\r\nexport function initVertexColors(geometry: THREE.BufferGeometry, color: string, _topColor: string, minZ: number | Array<any>): Float32Array {\r\n    if (minZ === undefined) {\r\n        minZ = 0;\r\n    }\r\n    const position = geometry.attributes.position.array;\r\n    const len = position.length;\r\n    bottomColor.setStyle(color);\r\n    topColor.setStyle(_topColor);\r\n    let colors: Float32Array;\r\n    if (Array.isArray(minZ)) {\r\n        let colorLen = 0;\r\n        for (let i = 0, len = minZ.length; i < len; i++) {\r\n            const { count } = minZ[i].position;\r\n            colorLen += count * 3;\r\n        }\r\n        colors = new Float32Array(colorLen);\r\n    } else {\r\n        colors = new Float32Array(position.length);\r\n    }\r\n    if (Array.isArray(minZ)) {\r\n        for (let i = 0, len = minZ.length; i < len; i++) {\r\n            const { middleZ, start, end } = minZ[i].position;\r\n            for (let j = start; j < end; j += 3) {\r\n                const z = position[j + 2];\r\n                if (z > middleZ) {\r\n                    colors[j] = topColor.r;\r\n                    colors[j + 1] = topColor.g;\r\n                    colors[j + 2] = topColor.b;\r\n                } else {\r\n                    colors[j] = bottomColor.r;\r\n                    colors[j + 1] = bottomColor.g;\r\n                    colors[j + 2] = bottomColor.b;\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n        for (let i = 0; i < len; i += 3) {\r\n            const z = position[i + 2];\r\n            if (z > minZ) {\r\n                colors[i] = topColor.r;\r\n                colors[i + 1] = topColor.g;\r\n                colors[i + 2] = topColor.b;\r\n            } else {\r\n                colors[i] = bottomColor.r;\r\n                colors[i + 1] = bottomColor.g;\r\n                colors[i + 2] = bottomColor.b;\r\n            }\r\n        }\r\n    }\r\n    addAttribute(geometry, 'color', new THREE.BufferAttribute(colors, 3, true));\r\n    return colors;\r\n}\r\n\r\n/**\r\n *\r\n * @param {*} polygon\r\n * @param {*} layer\r\n * @param {*} center\r\n */\r\nexport function getPolygonPositions(polygon: PolygonType, layer: ThreeLayer, center: maptalks.Coordinate, centerPt: THREE.Vector3, isArrayBuff = false): Array<Array<Array<Array<number>> | ArrayBufferLike>> {\r\n    if (!polygon) {\r\n        return null;\r\n    }\r\n    let datas = [];\r\n    if (polygon instanceof maptalks.MultiPolygon) {\r\n        datas = polygon.getGeometries().map(p => {\r\n            return getSinglePolygonPositions(p, layer, center || polygon.getCenter(), centerPt, isArrayBuff);\r\n        });\r\n    } else if (polygon instanceof maptalks.Polygon) {\r\n        const data = getSinglePolygonPositions(polygon, layer, center || polygon.getCenter(), centerPt, isArrayBuff);\r\n        datas.push(data);\r\n    } else if (isGeoJSONPolygon(polygon)) {\r\n        // const cent = getGeoJSONCenter(polygon);\r\n        if (!isGeoJSONMulti(polygon)) {\r\n            const data = getSinglePolygonPositions(polygon as any, layer, center || getGeoJSONCenter(polygon), centerPt, isArrayBuff);\r\n            datas.push(data);\r\n        } else {\r\n            const fs = spliteGeoJSONMulti(polygon);\r\n            for (let i = 0, len = fs.length; i < len; i++) {\r\n                datas.push(getSinglePolygonPositions(fs[i] as any, layer, center || getGeoJSONCenter(polygon), centerPt, isArrayBuff));\r\n            }\r\n        }\r\n    }\r\n    return datas;\r\n}\r\n\r\nexport function getSinglePolygonPositions(polygon: SinglePolygonType, layer: ThreeLayer,\r\n    center: maptalks.Coordinate, centerPt: THREE.Vector3, isArrayBuff = false): Array<Array<Array<number>> | ArrayBufferLike> {\r\n    let shell: Array<any>, holes: Array<any>;\r\n    //it is pre for geojson,Possible later use of geojson\r\n    if (isGeoJSONPolygon(polygon as any)) {\r\n        const coordinates = getGeoJSONCoordinates(polygon as any);\r\n        shell = coordinates[0] as Array<any>;\r\n        holes = coordinates.slice(1, coordinates.length);\r\n        center = center || getGeoJSONCenter(polygon as any);\r\n    } else if (polygon instanceof maptalks.Polygon) {\r\n        shell = polygon.getShell();\r\n        holes = polygon.getHoles();\r\n        center = center || polygon.getCenter();\r\n    }\r\n    centerPt = centerPt || layer.coordinateToVector3(center);\r\n    let outer: Array<Array<number>> | Float32Array;\r\n    if (isArrayBuff) {\r\n        outer = new Float32Array(shell.length * 2);\r\n    } else {\r\n        outer = [];\r\n    }\r\n    for (let i = 0, len = shell.length; i < len; i++) {\r\n        const c = shell[i];\r\n        const v = layer.coordinateToVector3(c).sub(centerPt);\r\n        if (isArrayBuff) {\r\n            const idx = i * 2;\r\n            outer[idx] = v.x;\r\n            outer[idx + 1] = v.y;\r\n            // outer[idx + 2] = v.z;\r\n        } else {\r\n            (outer as Array<Array<number>>).push([v.x, v.y]);\r\n        }\r\n    }\r\n    const data = [(isArrayBuff ? (outer as Float32Array).buffer : outer)];\r\n    if (holes && holes.length > 0) {\r\n        for (let i = 0, len = holes.length; i < len; i++) {\r\n            const pts: Array<Array<number>> | Float32Array = (isArrayBuff ? new Float32Array(holes[i].length * 2) : []);\r\n            for (let j = 0, len1 = holes[i].length; j < len1; j++) {\r\n                const c = holes[i][j];\r\n                const pt = layer.coordinateToVector3(c).sub(centerPt);\r\n                if (isArrayBuff) {\r\n                    const idx = j * 2;\r\n                    pts[idx] = pt.x;\r\n                    pts[idx + 1] = pt.y;\r\n                    // pts[idx + 2] = pt.z;\r\n                } else {\r\n                    (pts as Array<Array<number>>).push([pt.x, pt.y]);\r\n                }\r\n            }\r\n            data.push((isArrayBuff ? (pts as Float32Array).buffer : pts));\r\n        }\r\n    }\r\n    return data;\r\n}\r\n\r\n","import * as maptalks from 'maptalks';\r\nimport * as THREE from 'three';\r\nimport BaseObject from './BaseObject';\r\nimport { ThreeLayer } from './index';\r\nimport { ExtrudeLineOptionType, LineStringType, MergeAttributeType } from './type/index';\r\nimport { setBottomHeight } from './util';\r\nimport { initVertexColors } from './util/ExtrudeUtil';\r\nimport { LineStringSplit, getExtrudeLineParams } from './util/LineUtil';\r\nimport { mergeBufferGeometries } from './util/MergeGeometryUtil';\r\nimport { getVertexColors } from './util/ThreeAdaptUtil';\r\n\r\nconst OPTIONS = {\r\n    bottomHeight: 0,\r\n    width: 3,\r\n    height: 1,\r\n    altitude: 0,\r\n    topColor: null,\r\n    bottomColor: '#2d2f61',\r\n};\r\n\r\n\r\n/**\r\n *\r\n */\r\nclass ExtrudeLine extends BaseObject {\r\n    constructor(lineString: LineStringType, options: ExtrudeLineOptionType, material: THREE.Material, layer: ThreeLayer) {\r\n        options = maptalks.Util.extend({}, OPTIONS, options, { layer, lineString });\r\n        super();\r\n        this._initOptions(options);\r\n\r\n        const { height, width, bottomColor, topColor, bottomHeight, altitude } = options;\r\n        const h = layer.distanceToVector3(height, height).x;\r\n        const w = layer.distanceToVector3(width, width).x;\r\n        const { lineStrings, center } = LineStringSplit(lineString);\r\n        const extrudeParams: MergeAttributeType[] = [];\r\n        let minZ = 0;\r\n        const cache = {};\r\n        for (let i = 0, len = lineStrings.length; i < len; i++) {\r\n            const attribute = getExtrudeLineParams(lineStrings[i], w, h, layer, center);\r\n            minZ = setBottomHeight(attribute, bottomHeight, layer, cache);\r\n            extrudeParams.push(attribute);\r\n        }\r\n        const geometry = mergeBufferGeometries(extrudeParams);\r\n        if (topColor) {\r\n            initVertexColors(geometry, bottomColor, topColor, minZ + h / 2);\r\n            (material as any).vertexColors = getVertexColors();\r\n        }\r\n        this._createMesh(geometry, material);\r\n\r\n        // const center = (isGeoJSON(lineString) ? getGeoJSONCenter(lineString) : lineString.getCenter());\r\n        const z = layer.distanceToVector3(altitude, altitude).x;\r\n        const v = layer.coordinateToVector3(center, z);\r\n        this.getObject3d().position.copy(v);\r\n        this.type = 'ExtrudeLine';\r\n    }\r\n}\r\n\r\nexport default ExtrudeLine;\r\n","import * as maptalks from 'maptalks';\r\nimport * as THREE from 'three';\r\nimport BaseObject from './BaseObject';\r\nimport { ThreeLayer } from './index';\r\nimport { ExtrudePolygonOptionType, PolygonType } from './type/index';\r\nimport { setBottomHeight } from './util';\r\nimport { getExtrudeGeometry, initVertexColors } from './util/ExtrudeUtil';\r\nimport { getGeoJSONCenter, isGeoJSONPolygon } from './util/GeoJSONUtil';\r\nimport { getVertexColors } from './util/ThreeAdaptUtil';\r\n\r\nconst OPTIONS = {\r\n    altitude: 0,\r\n    height: 1,\r\n    bottomHeight: 0,\r\n    topColor: null,\r\n    bottomColor: '#2d2f61',\r\n};\r\n\r\n/**\r\n *\r\n */\r\nclass ExtrudePolygon extends BaseObject {\r\n    constructor(polygon: PolygonType, options: ExtrudePolygonOptionType, material: THREE.Material, layer: ThreeLayer) {\r\n        options = maptalks.Util.extend({}, OPTIONS, options, { layer, polygon });\r\n        super();\r\n        this._initOptions(options);\r\n        const { height, topColor, bottomColor, altitude, bottomHeight } = options;\r\n        const geometry = getExtrudeGeometry(polygon, height, layer);\r\n        const center = (isGeoJSONPolygon(polygon as any) ? getGeoJSONCenter(polygon as any) : (polygon as any).getCenter());\r\n        const h = setBottomHeight(geometry, bottomHeight, layer);\r\n        if (topColor) {\r\n            const extrudeH = layer.distanceToVector3(height, height).x;\r\n            initVertexColors(geometry, bottomColor, topColor, h + extrudeH / 2);\r\n            (material as any).vertexColors = getVertexColors();\r\n        }\r\n        this._createMesh(geometry, material);\r\n        const z = layer.distanceToVector3(altitude, altitude).x;\r\n        const v = layer.coordinateToVector3(center, z);\r\n        this.getObject3d().position.copy(v);\r\n        this.type = 'ExtrudePolygon';\r\n    }\r\n}\r\n\r\nexport default ExtrudePolygon;\r\n","import * as maptalks from 'maptalks';\r\nimport { ThreeLayer } from './index';\r\nimport BaseObject from './BaseObject';\r\nimport { BaseObjectOptionType } from './type';\r\n\r\nconst OPTIONS = {\r\n    altitude: 0,\r\n    coordinate: null\r\n};\r\n\r\n\r\n/**\r\n * Model container\r\n */\r\nclass Model extends BaseObject {\r\n    constructor(model: THREE.Object3D, options: BaseObjectOptionType = {}, layer: ThreeLayer) {\r\n        if (!options.coordinate) {\r\n            console.warn('coordinate is null,it is important to locate the model');\r\n            options.coordinate = layer.getMap().getCenter();\r\n        }\r\n        options = maptalks.Util.extend({}, OPTIONS, options, { layer, model });\r\n        super();\r\n        this._initOptions(options);\r\n        this._createGroup();\r\n        this.getObject3d().add(model);\r\n        const { altitude, coordinate } = options;\r\n        const z = layer.distanceToVector3(altitude, altitude).x;\r\n        const position = layer.coordinateToVector3(coordinate, z);\r\n        this.getObject3d().position.copy(position);\r\n        this.type = 'Model';\r\n    }\r\n}\r\n\r\nexport default Model;\r\n","/**\r\n * provide a simple geo function\r\n */\r\nimport * as maptalks from 'maptalks';\r\n\r\nconst PI = Math.PI / 180;\r\nconst R = 6378137;\r\nconst MINLENGTH = 1;\r\n\r\n\r\nfunction formatLineArray(polyline: maptalks.LineString): Array<Array<number>> {\r\n    const lnglats = polyline.getCoordinates();\r\n    return lnglats.map(lnglat => {\r\n        return lnglat.toArray();\r\n    });\r\n}\r\n\r\nfunction degreesToRadians(d: number): number {\r\n    return d * PI;\r\n}\r\n\r\n\r\n\r\nexport function distance(c1: Array<number> | maptalks.Coordinate, c2: Array<number> | maptalks.Coordinate): number {\r\n    if (!c1 || !c2) {\r\n        return 0;\r\n    }\r\n    if (!Array.isArray(c1)) {\r\n        c1 = c1.toArray();\r\n    }\r\n    if (!Array.isArray(c2)) {\r\n        c2 = c2.toArray();\r\n    }\r\n    let b = degreesToRadians(c1[1]);\r\n    const d = degreesToRadians(c2[1]),\r\n        e = b - d,\r\n        f = degreesToRadians(c1[0]) - degreesToRadians(c2[0]);\r\n    b = 2 * Math.asin(Math.sqrt(Math.pow(Math.sin(e / 2), 2) + Math.cos(b) * Math.cos(d) * Math.pow(Math.sin(f / 2), 2)));\r\n    b *= R;\r\n    return Math.round(b * 1E5) / 1E5;\r\n}\r\n\r\n\r\nexport function lineLength(polyline: Array<Array<number>> | maptalks.LineString): number {\r\n    let lnglatArray = polyline;\r\n    if (!Array.isArray(polyline)) {\r\n        lnglatArray = formatLineArray(polyline);\r\n    }\r\n    let l = 0;\r\n    for (let i = 0, len = (lnglatArray as Array<Array<number>>).length; i < len - 1; i++) {\r\n        l += distance((lnglatArray as Array<Array<number>>)[i], (lnglatArray as Array<Array<number>>)[i + 1]);\r\n    }\r\n    return l;\r\n}\r\n\r\n\r\nfunction getPercentLngLat(l: any, length: number): Array<number> {\r\n    const { len, c1, c2 } = l;\r\n    const dx = c2[0] - c1[0],\r\n        dy = c2[1] - c1[1];\r\n    const percent = length / len;\r\n    const lng = c1[0] + percent * dx;\r\n    const lat = c1[1] + percent * dy;\r\n    return [lng, lat];\r\n}\r\n\r\n\r\n\r\n/**\r\n * This is not an accurate line segment cutting method, but rough, in order to speed up the calculation,\r\n * the correct cutting algorithm can be referred to. http://turfjs.org/docs/#lineChunk\r\n * @param {*} cs\r\n * @param {*} lineChunkLength\r\n */\r\nexport function lineSlice(cs: Array<Array<number>> | maptalks.LineString, lineChunkLength = 10): Array<Array<Array<number>>> {\r\n    lineChunkLength = Math.max(lineChunkLength, MINLENGTH);\r\n    if (!Array.isArray(cs)) {\r\n        cs = formatLineArray(cs);\r\n    }\r\n    const LEN = cs.length;\r\n    let list = [];\r\n    let totalLen = 0;\r\n    for (let i = 0; i < LEN - 1; i++) {\r\n        const len = distance(cs[i], cs[i + 1]);\r\n        const floorlen = Math.floor(len);\r\n        list.push({\r\n            c1: cs[i],\r\n            len: floorlen,\r\n            c2: cs[i + 1]\r\n        });\r\n        totalLen += floorlen;\r\n    }\r\n    if (totalLen <= lineChunkLength) {\r\n        const lnglats = list.map(d => {\r\n            return [d.c1, d.c2];\r\n        });\r\n        return lnglats;\r\n    }\r\n    if (list.length === 1) {\r\n        if (list[0].len <= lineChunkLength) {\r\n            return [\r\n                [list[0].c1, list[0].c2]\r\n            ];\r\n        }\r\n    }\r\n\r\n    const LNGLATSLEN = list.length;\r\n    const first = list[0];\r\n\r\n    let idx = 0;\r\n    let currentLngLat;\r\n    let currentLen = 0;\r\n    const lines = [];\r\n    let lls = [first.c1];\r\n    while (idx < LNGLATSLEN) {\r\n        const { len, c2 } = list[idx];\r\n        currentLen += len;\r\n        if (currentLen < lineChunkLength) {\r\n            lls.push(c2);\r\n            if (idx === LNGLATSLEN - 1) {\r\n                lines.push(lls);\r\n            }\r\n            idx++;\r\n        }\r\n        if (currentLen === lineChunkLength) {\r\n            lls.push(c2);\r\n            currentLen = 0;\r\n            lines.push(lls);\r\n            //next\r\n            lls = [c2];\r\n            idx++;\r\n        }\r\n        if (currentLen > lineChunkLength) {\r\n            const offsetLen = (len - currentLen + lineChunkLength);\r\n            currentLngLat = getPercentLngLat(list[idx], offsetLen);\r\n            lls.push(currentLngLat);\r\n            lines.push(lls);\r\n            currentLen = 0;\r\n            list[idx].c1 = currentLngLat;\r\n            list[idx].len = len - offsetLen;\r\n            //next\r\n            lls = [];\r\n            lls.push(currentLngLat);\r\n        }\r\n    }\r\n    return lines;\r\n}\r\n","import * as maptalks from 'maptalks';\r\nimport * as THREE from 'three';\r\nimport BaseObject from './BaseObject';\r\n\r\nimport { lineSlice } from './util/GeoUtil';\r\nimport { getExtrudeLineParams, getChunkLinesPosition } from './util/LineUtil';\r\nimport { isGeoJSON, getGeoJSONCenter, getGeoJSONCoordinates } from './util/GeoJSONUtil';\r\nimport { addAttribute } from './util/ThreeAdaptUtil';\r\nimport { ExtrudeLineTrailOptionType, SingleLineStringType } from './type';\r\nimport { ThreeLayer } from './index';\r\n\r\nconst MAX_POINTS = 1000;\r\n\r\n/**\r\n *\r\n * @param {THREE.BufferGeometry} geometry\r\n * @param {*} ps\r\n * @param {*} norls\r\n * @param {*} indices\r\n */\r\nfunction setExtrudeLineGeometryAttribute(geometry, ps, norls, indices) {\r\n    const len = ps.length;\r\n    geometry.attributes.normal.count = len;\r\n    geometry.attributes.position.count = len;\r\n    const positions = geometry.attributes.position.array;\r\n    const normals = geometry.attributes.normal.array;\r\n    for (let i = 0; i < len; i++) {\r\n        positions[i] = ps[i];\r\n        normals[i] = norls[i];\r\n    }\r\n    // geometry.index.array = new Uint16Array(indices.length);\r\n    geometry.index.count = indices.length;\r\n    // geometry.index.needsUpdate = true;\r\n    for (let i = 0, len1 = indices.length; i < len1; i++) {\r\n        geometry.index.array[i] = indices[i];\r\n    }\r\n    // geometry.setIndex(new THREE.Uint32BufferAttribute(indices, 1));\r\n    // geometry.setDrawRange(0, len / 3);\r\n}\r\n\r\n\r\nconst OPTIONS = {\r\n    trail: 5,\r\n    chunkLength: 50,\r\n    width: 2,\r\n    height: 1,\r\n    speed: 1,\r\n    altitude: 0,\r\n    interactive: false\r\n};\r\n\r\n/**\r\n *\r\n */\r\nclass ExtrudeLineTrail extends BaseObject {\r\n    constructor(lineString: SingleLineStringType, options: ExtrudeLineTrailOptionType, material: THREE.Material, layer: ThreeLayer) {\r\n        options = maptalks.Util.extend({}, OPTIONS, options, { layer, lineString });\r\n        super();\r\n        this._initOptions(options);\r\n\r\n        const { width, height, altitude, speed, chunkLength, trail } = options;\r\n        let center: maptalks.Coordinate, coordinates;\r\n        if (isGeoJSON(lineString as any)) {\r\n            center = getGeoJSONCenter(lineString as any);\r\n            coordinates = getGeoJSONCoordinates(lineString as any);\r\n        } else {\r\n            center = (lineString as any).getCenter();\r\n            coordinates = lineString;\r\n        }\r\n        const chunkLines = lineSlice(coordinates, chunkLength);\r\n\r\n        const centerPt = layer.coordinateToVector3(center);\r\n        //cache position for  faster computing,reduce double counting\r\n        const positionMap: { [key: string]: THREE.Vector3 } = {};\r\n        for (let i = 0, len = chunkLines.length; i < len; i++) {\r\n            const chunkLine = chunkLines[i];\r\n            for (let j = 0, len1 = chunkLine.length; j < len1; j++) {\r\n                const lnglat = chunkLine[j];\r\n                const key = lnglat.join(',').toString();\r\n                if (!positionMap[key]) {\r\n                    positionMap[key] = layer.coordinateToVector3(lnglat).sub(centerPt);\r\n                }\r\n            }\r\n        }\r\n\r\n        const positions = getChunkLinesPosition(chunkLines.slice(0, 1), layer, positionMap, centerPt).positionsV;\r\n\r\n        //generate geometry\r\n        const geometry = new THREE.BufferGeometry();\r\n        const ps = new Float32Array(MAX_POINTS * 3); // 3 vertices per point\r\n        const norls = new Float32Array(MAX_POINTS * 3); // 3 vertices per point\r\n        const inds = new Uint16Array(MAX_POINTS);\r\n        addAttribute(geometry, 'position', (new THREE.BufferAttribute(ps, 3)));\r\n        addAttribute(geometry, 'normal', (new THREE.BufferAttribute(norls, 3)));\r\n        geometry.setIndex(new THREE.BufferAttribute(inds, 1));\r\n\r\n\r\n        const lineWidth = layer.distanceToVector3(width, width).x;\r\n        const depth = layer.distanceToVector3(height, height).x;\r\n        const params = getExtrudeLineParams(positions, lineWidth, depth, layer);\r\n        setExtrudeLineGeometryAttribute(geometry, params.position, params.normal, params.indices);\r\n\r\n        this._createMesh(geometry, material);\r\n        const z = layer.distanceToVector3(altitude, altitude).x;\r\n        const v = layer.coordinateToVector3(center, z);\r\n        this.getObject3d().position.copy(v);\r\n\r\n        this._params = {\r\n            index: 0,\r\n            chunkLines,\r\n            geometries: [],\r\n            layer,\r\n            trail: Math.max(1, trail),\r\n            lineWidth,\r\n            depth,\r\n            speed: Math.min(1, speed),\r\n            idx: 0,\r\n            loaded: false,\r\n            positionMap,\r\n            centerPt\r\n        };\r\n        this._init(this._params);\r\n        this.type = 'ExtrudeLineTrail';\r\n\r\n    }\r\n\r\n    /**\r\n     * Follow-up support for adding webworker\r\n     * @param {*} params\r\n     */\r\n    _init(params) {\r\n        const { layer, trail, lineWidth, depth, chunkLines, positionMap, centerPt } = params;\r\n        const len = chunkLines.length, geometries = [];\r\n        for (let i = 0; i < len; i++) {\r\n            const lines = chunkLines.slice(i, i + trail);\r\n            const ps = getChunkLinesPosition(lines, layer, positionMap, centerPt).positionsV;\r\n            geometries.push(getExtrudeLineParams(ps, lineWidth, depth, layer));\r\n        }\r\n        this._params.geometries = geometries;\r\n        this._params.loaded = true;\r\n    }\r\n\r\n\r\n    _animation() {\r\n        const { index, geometries, speed, idx, chunkLines, trail, lineWidth, depth, loaded, layer, positionMap, centerPt } = this._params;\r\n        if (!loaded) return;\r\n        const i = Math.round(index);\r\n        if (i > idx) {\r\n            this._params.idx++;\r\n            let p = geometries[i];\r\n            //if not init, this is will running\r\n            if (!p) {\r\n                const lines = chunkLines.slice(i, i + trail);\r\n                const ps = getChunkLinesPosition(lines, layer, positionMap, centerPt).positionsV;\r\n                p = getExtrudeLineParams(ps, lineWidth, depth, layer);\r\n                geometries[i] = p;\r\n            }\r\n            const object3d = this.getObject3d() as any;\r\n            setExtrudeLineGeometryAttribute(object3d.geometry, p.position, p.normal, p.indices);\r\n            object3d.geometry.attributes.position.needsUpdate = true;\r\n            object3d.geometry.attributes.normal.needsUpdate = true;\r\n            object3d.geometry.index.needsUpdate = true;\r\n        }\r\n        if (index >= chunkLines.length - 1) {\r\n            this._params.index = -1;\r\n            this._params.idx = -1;\r\n        }\r\n        this._params.index += speed;\r\n    }\r\n}\r\n\r\nexport default ExtrudeLineTrail;\r\n","import * as THREE from 'three';\r\nimport BaseObject from './BaseObject';\r\nimport { getGeometriesColorArray } from './util';\r\nimport { addAttribute, getVertexColors } from './util/ThreeAdaptUtil';\r\n\r\nconst EVENTS = ['click', 'mousemove', 'mousedown', 'mouseup', 'dblclick', 'contextmenu'].join(' ').toString();\r\nconst defaultMaterial = new THREE.MeshBasicMaterial();\r\n(defaultMaterial as any).vertexColors = getVertexColors();\r\n\r\ntype Constructor<T> = new (...args: any[]) => T;\r\n\r\n/**\r\n * This is for the merger, MergedExtrudeMesh,Points ...\r\n * @param {*} Base\r\n */\r\nconst MergedMixin = <T extends Constructor<BaseObject>>(Base: T) => {\r\n\r\n    return class extends Base {\r\n        _faceMap: Array<Array<number>>;\r\n        _baseObjects: Array<BaseObject>;\r\n        _datas: Array<any>;\r\n        faceIndex: number;\r\n        index: number;\r\n        _geometriesAttributes: Array<any>;\r\n        _geometryCache: THREE.BufferGeometry;\r\n        isHide: boolean;\r\n\r\n        // this._faceMap=[];\r\n        // this._baseObjects = [];\r\n        // this._datas = [];\r\n        // this.faceIndex = null;\r\n        // this.index=null;\r\n        // this._geometriesAttributes = [];\r\n        // this._geometryCache = geometry.clone();\r\n        // this.isHide = false;\r\n\r\n        /**\r\n         *\r\n         * @param {*} baseObjects\r\n         */\r\n        _initBaseObjectsEvent(baseObjects: Array<BaseObject>) {\r\n            if (baseObjects && Array.isArray(baseObjects) && baseObjects.length) {\r\n                for (let i = 0, len = baseObjects.length; i < len; i++) {\r\n                    const baseObject = baseObjects[i];\r\n                    this._proxyEvent(baseObject);\r\n                }\r\n            }\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         *Events representing the merge\r\n         * @param {*} baseObject\r\n         */\r\n        _proxyEvent(baseObject: BaseObject): void {\r\n            baseObject.on('add', (e) => {\r\n                this._showGeometry(e.target, true);\r\n            });\r\n            baseObject.on('remove', (e) => {\r\n                this._showGeometry(e.target, false);\r\n            });\r\n            baseObject.on('mouseout', (e) => {\r\n                this._mouseover = false;\r\n                this.fire('mouseout', Object.assign({}, e, { target: this, selectMesh: (this.getSelectMesh ? this.getSelectMesh() : null) }));\r\n                // this._showGeometry(e.target, false);\r\n            });\r\n            baseObject.on(EVENTS, (e) => {\r\n                this.fire(e.type, Object.assign({}, e, { target: this, selectMesh: (this.getSelectMesh ? this.getSelectMesh() : null) }));\r\n            });\r\n        }\r\n\r\n\r\n        /**\r\n         * Get the index of the monomer to be hidden\r\n         * @param {*} attribute\r\n         */\r\n        _getHideGeometryIndex(attribute: string) {\r\n            const indexs: Array<number> = [];\r\n            let count = 0;\r\n            for (let i = 0, len = this._geometriesAttributes.length; i < len; i++) {\r\n                if (this._geometriesAttributes[i].hide === true) {\r\n                    indexs.push(i);\r\n                    count += this._geometriesAttributes[i][attribute].count;\r\n                }\r\n            }\r\n            return {\r\n                indexs,\r\n                count\r\n            };\r\n        }\r\n\r\n        /**\r\n         * update geometry attributes\r\n         * @param {*} bufferAttribute\r\n         * @param {*} attribute\r\n         */\r\n        _updateAttribute(bufferAttribute: THREE.BufferAttribute, attribute: string) {\r\n            const { indexs } = this._getHideGeometryIndex(attribute);\r\n            const array = this._geometryCache.attributes[attribute].array;\r\n            const len = array.length;\r\n            for (let i = 0; i < len; i++) {\r\n                (bufferAttribute as any).array[i] = array[i];\r\n            }\r\n            let value = NaN;\r\n            if (this.getObject3d() instanceof THREE.LineSegments) {\r\n                value = 0;\r\n            }\r\n            for (let j = 0; j < indexs.length; j++) {\r\n                const index = indexs[j];\r\n                const { start, end } = this._geometriesAttributes[index][attribute];\r\n                for (let i = start; i < end; i++) {\r\n                    (bufferAttribute as any).array[i] = value;\r\n                }\r\n            }\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * show or hide monomer\r\n         * @param {*} baseObject\r\n         * @param {*} isHide\r\n         */\r\n        _showGeometry(baseObject: BaseObject, isHide: boolean) {\r\n            let index;\r\n            if (baseObject) {\r\n                index = baseObject.getOptions().index;\r\n            }\r\n            if (index != null) {\r\n                const geometryAttributes = this._geometriesAttributes[index];\r\n                const { hide } = geometryAttributes;\r\n                if (hide === isHide) {\r\n                    return this;\r\n                }\r\n                geometryAttributes.hide = isHide;\r\n                const buffGeom = (this.getObject3d() as any).geometry;\r\n                this._updateAttribute(buffGeom.attributes.position, 'position');\r\n                // this._updateAttribute(buffGeom.attributes.normal, 'normal', 3);\r\n                // this._updateAttribute(buffGeom.attributes.color, 'color', 3);\r\n                // this._updateAttribute(buffGeom.attributes.uv, 'uv', 2);\r\n                buffGeom.attributes.position.needsUpdate = true;\r\n                // buffGeom.attributes.color.needsUpdate = true;\r\n                // buffGeom.attributes.normal.needsUpdate = true;\r\n                // buffGeom.attributes.uv.needsUpdate = true;\r\n                this.isHide = isHide;\r\n            }\r\n            return this;\r\n        }\r\n\r\n\r\n        /**\r\n         * Get selected monomer\r\n         */\r\n        // eslint-disable-next-line consistent-return\r\n        getSelectMesh(): {\r\n            data: any;\r\n            baseObject: BaseObject;\r\n        } {\r\n            const index = this._getIndex();\r\n            if (index != null) {\r\n                return {\r\n                    data: this._datas[index],\r\n                    baseObject: this._baseObjects[index]\r\n                };\r\n            }\r\n        }\r\n\r\n        _getIndex(faceIndex?: number): number {\r\n            if (faceIndex == null) {\r\n                faceIndex = this.faceIndex || this.index;\r\n            }\r\n            return faceIndex;\r\n        }\r\n\r\n        _init(): void {\r\n            const pick = this.getLayer().getPick();\r\n            this.on('add', () => {\r\n                pick.add(this.pickObject3d);\r\n            });\r\n            this.on('remove', () => {\r\n                pick.remove(this.pickObject3d);\r\n            });\r\n        }\r\n\r\n        //Different objects need to implement their own methods\r\n        _setPickObject3d() {\r\n            // multiplexing geometry\r\n            const geometry = this._geometryCache || (this.getObject3d() as any).geometry.clone();\r\n            const pick = this.getLayer().getPick();\r\n            const { _geometriesAttributes } = this;\r\n            const len = _geometriesAttributes.length;\r\n            const colors = getGeometriesColorArray(_geometriesAttributes);\r\n            let cIndex = 0;\r\n            for (let i = 0; i < len; i++) {\r\n                const color = pick.getColor();\r\n                const colorIndex = color.getHex();\r\n                this._colorMap[colorIndex] = i;\r\n                const { count } = _geometriesAttributes[i].position;\r\n                this._datas[i].colorIndex = colorIndex;\r\n                for (let j = 0; j < count; j++) {\r\n                    colors[cIndex] = color.r;\r\n                    colors[cIndex + 1] = color.g;\r\n                    colors[cIndex + 2] = color.b;\r\n                    cIndex += 3;\r\n                }\r\n            }\r\n            addAttribute(geometry, 'color', new THREE.BufferAttribute(colors, 3, true));\r\n            // const material = new THREE.MeshBasicMaterial();\r\n            // material.vertexColors = THREE.VertexColors;\r\n            const color = pick.getColor();\r\n            const colorIndex = color.getHex();\r\n            const mesh = new THREE.Mesh(geometry, defaultMaterial);\r\n            mesh.position.copy(this.getObject3d().position);\r\n            mesh['_colorIndex'] = colorIndex;\r\n            this.setPickObject3d(mesh);\r\n        }\r\n    };\r\n};\r\n\r\nexport default MergedMixin;\r\n","// eslint-disable-next-line quotes\r\nconst workerCode = `{code}`;\r\nconst workerName = '__maptalks.three__';\r\n\r\nexport function getWorkerName() {\r\n    return workerName;\r\n}\r\n\r\nexport function getWorkerCode() {\r\n    return workerCode;\r\n}\r\n","import * as maptalks from 'maptalks';\r\nimport { isGeoJSONLine, isGeoJSONPolygon } from '../util/GeoJSONUtil';\r\nimport { getPolygonPositions } from '../util/ExtrudeUtil';\r\n// import pkg from './../../package.json';\r\nimport { getLinePosition } from '../util/LineUtil';\r\nimport { LineStringType, PolygonType, SingleLineStringType } from './../type/index';\r\nimport { ThreeLayer } from './../index';\r\nimport { getWorkerName } from './worker';\r\n\r\nlet MeshActor;\r\nif (maptalks.worker) {\r\n    MeshActor = class extends maptalks.worker.Actor {\r\n        test(info, cb) {\r\n            //send data to worker thread\r\n            this.send(info, null, cb);\r\n        }\r\n\r\n        pushQueue(q: any = {}) {\r\n            const { type, data, callback, layer, key, center, lineStrings } = q;\r\n            let params;\r\n            if (type === 'Polygon') {\r\n                params = gengerateExtrudePolygons(data, center, layer);\r\n            } else if (type === 'LineString') {\r\n                //todo liness\r\n                params = gengerateExtrudeLines(data, center, layer, lineStrings);\r\n            } else if (type === 'Point') {\r\n                //todo points\r\n            }\r\n            this.send({ type, datas: params.datas }, params.transfe, function (err, message) {\r\n                if (err) {\r\n                    console.error(err);\r\n                }\r\n                message.key = key;\r\n                callback(message);\r\n            });\r\n        }\r\n\r\n\r\n        // eslint-disable-next-line no-unused-vars\r\n        // receive(message) {\r\n        //     console.log(message);\r\n        // }\r\n    };\r\n}\r\n\r\nvar actor: maptalks.worker.Actor;\r\nexport function getActor(): maptalks.worker.Actor {\r\n    if (!maptalks.worker) {\r\n        console.error('maptalks.worker is not defined,You can\\'t use ThreeVectorTileLayer');\r\n    }\r\n    if (!actor) {\r\n        actor = new MeshActor(getWorkerName());\r\n    }\r\n    return actor;\r\n}\r\n\r\n/**\r\n * generate extrudepolygons data for worker\r\n * @param {*} polygons\r\n * @param {*} layer\r\n */\r\nfunction gengerateExtrudePolygons(polygons: PolygonType[] = [], center: maptalks.Coordinate, layer: ThreeLayer) {\r\n    const centerPt = layer.coordinateToVector3(center);\r\n    const len = polygons.length;\r\n    const datas = [], transfer = [], altCache = {};\r\n    for (let i = 0; i < len; i++) {\r\n        const polygon = polygons[i];\r\n        const data = getPolygonPositions(polygon, layer, center, centerPt, true);\r\n        for (let j = 0, len1 = data.length; j < len1; j++) {\r\n            const d = data[j];\r\n            for (let m = 0, len2 = d.length; m < len2; m++) {\r\n                //ring\r\n                transfer.push(d[m]);\r\n            }\r\n        }\r\n        const properties = (isGeoJSONPolygon(polygon as any) ? polygon['properties'] : (polygon as any).getProperties() || {});\r\n        let height = properties.height || 1;\r\n        let bottomHeight = properties.bottomHeight || 0;\r\n        if (bottomHeight !== undefined && typeof bottomHeight === 'number' && bottomHeight !== 0) {\r\n            if (altCache[bottomHeight] === undefined) {\r\n                altCache[bottomHeight] = layer.distanceToVector3(bottomHeight, bottomHeight).x;\r\n            }\r\n            bottomHeight = altCache[bottomHeight];\r\n        }\r\n        if (altCache[height] === undefined) {\r\n            altCache[height] = layer.distanceToVector3(height, height).x;\r\n        }\r\n        height = altCache[height];\r\n        datas.push({\r\n            data,\r\n            height,\r\n            bottomHeight\r\n        });\r\n    }\r\n    return {\r\n        datas,\r\n        transfer\r\n    };\r\n}\r\n\r\n/**\r\n * generate ExtrudeLines data for worker\r\n * @param {*} lineStringList\r\n * @param {*} center\r\n * @param {*} layer\r\n */\r\nfunction gengerateExtrudeLines(lineStringList: Array<Array<SingleLineStringType>>, center: maptalks.Coordinate, layer: ThreeLayer, lineStrings: Array<LineStringType>) {\r\n    const datas = [], transfer = [], altCache = {};\r\n    const len = lineStringList.length;\r\n    for (let i = 0; i < len; i++) {\r\n        const multiLineString = lineStringList[i];\r\n        const properties = (isGeoJSONLine(lineStrings[i] as any) ? lineStrings[i]['properties'] : (lineStrings[i] as any).getProperties() || {});\r\n        const width = properties.width || 1;\r\n        const height = properties.height || 1;\r\n        let bottomHeight = properties.bottomHeight || 0;\r\n        if (bottomHeight !== undefined && typeof bottomHeight === 'number' && bottomHeight !== 0) {\r\n            if (altCache[bottomHeight] === undefined) {\r\n                altCache[bottomHeight] = layer.distanceToVector3(bottomHeight, bottomHeight).x;\r\n            }\r\n            bottomHeight = altCache[bottomHeight];\r\n        }\r\n        if (altCache[height] === undefined) {\r\n            altCache[height] = layer.distanceToVector3(height, height).x;\r\n        }\r\n        if (altCache[width] === undefined) {\r\n            altCache[width] = layer.distanceToVector3(width, width).x;\r\n        }\r\n        const data = [];\r\n        for (let j = 0, len1 = multiLineString.length; j < len1; j++) {\r\n            const lineString = multiLineString[j];\r\n            const positions2d = getLinePosition(lineString, layer, center).positions2d;\r\n            transfer.push(positions2d);\r\n            data.push(positions2d);\r\n        }\r\n        datas.push({\r\n            data,\r\n            height: altCache[height],\r\n            width: altCache[width],\r\n            bottomHeight\r\n        });\r\n    }\r\n    return {\r\n        datas,\r\n        transfer\r\n    };\r\n}\r\n\r\n\r\n\r\n\r\n","import * as maptalks from 'maptalks';\r\nimport * as THREE from 'three';\r\nimport BaseObject from './BaseObject';\r\nimport { initVertexColors, getExtrudeGeometryParams } from './util/ExtrudeUtil';\r\nimport ExtrudePolygon from './ExtrudePolygon';\r\nimport MergedMixin from './MergedMixin';\r\nimport { getGeoJSONCenter, isGeoJSONPolygon } from './util/GeoJSONUtil';\r\nimport { generateBufferGeometry, generatePickBufferGeometry, getDefaultBufferGeometry, mergeBufferGeometries } from './util/MergeGeometryUtil';\r\nimport { getActor } from './worker/MeshActor';\r\nimport { ExtrudePolygonOptionType, PolygonType } from './type';\r\nimport { ThreeLayer } from './index';\r\nimport { getVertexColors } from './util/ThreeAdaptUtil';\r\nimport { setBottomHeight } from './util';\r\n\r\nconst OPTIONS = {\r\n    altitude: 0,\r\n    height: 1,\r\n    bottomHeight: 0,\r\n    topColor: null,\r\n    bottomColor: '#2d2f61',\r\n};\r\nconst TEMP_COORD = new maptalks.Coordinate(0, 0);\r\n\r\nclass ExtrudePolygons extends MergedMixin(BaseObject) {\r\n    constructor(polygons: Array<PolygonType>, options: ExtrudePolygonOptionType, material: THREE.Material, layer: ThreeLayer) {\r\n        if (!Array.isArray(polygons)) {\r\n            polygons = [polygons];\r\n        }\r\n        const len = polygons.length;\r\n        if (len === 0) {\r\n            console.error('polygons is empty');\r\n        }\r\n        // const centers = [];\r\n        let minX = Infinity, minY = Infinity, maxX = -Infinity, maxY = -Infinity;\r\n        for (let i = 0; i < len; i++) {\r\n            const polygon = polygons[i];\r\n            const center = ((polygon as any).getCenter ? (polygon as any).getCenter() : getGeoJSONCenter((polygon as any), TEMP_COORD));\r\n            let x, y;\r\n            if (Array.isArray(center)) {\r\n                x = center[0];\r\n                y = center[1];\r\n            } else if (center instanceof maptalks.Coordinate) {\r\n                x = center.x;\r\n                y = center.y;\r\n            }\r\n            minX = Math.min(minX, x);\r\n            minY = Math.min(minY, y);\r\n            maxX = Math.max(maxX, x);\r\n            maxY = Math.max(maxY, y);\r\n        }\r\n        // Get the center point of the point set\r\n        const center = new maptalks.Coordinate((minX + maxX) / 2, (minY + maxY) / 2);\r\n        options = maptalks.Util.extend({}, OPTIONS, options, { layer, polygons, coordinate: center });\r\n        const { topColor, bottomColor, altitude, asynchronous } = options;\r\n        let bufferGeometry;\r\n        const extrudePolygons = [], faceMap = [], geometriesAttributes = [];\r\n        if (asynchronous) {\r\n            var actor = getActor();\r\n            bufferGeometry = getDefaultBufferGeometry();\r\n            (actor as any).pushQueue({\r\n                type: 'Polygon',\r\n                layer,\r\n                key: options.key,\r\n                center,\r\n                data: polygons,\r\n                callback: (e) => {\r\n                    const { faceMap, geometriesAttributes } = e;\r\n                    this._faceMap = faceMap;\r\n                    this._geometriesAttributes = geometriesAttributes;\r\n                    const bufferGeometry = generateBufferGeometry(e);\r\n                    this._geometryCache = generatePickBufferGeometry(bufferGeometry);\r\n                    if (topColor) {\r\n                        initVertexColors(bufferGeometry, bottomColor, topColor, geometriesAttributes);\r\n                        (material as any).vertexColors = getVertexColors();\r\n                    }\r\n                    const object3d = this.getObject3d() as any;\r\n                    object3d.geometry = bufferGeometry;\r\n                    object3d.material.needsUpdate = true;\r\n                    this._setPickObject3d();\r\n                    this._init();\r\n                    if (this.isAdd) {\r\n                        const pick = this.getLayer().getPick();\r\n                        pick.add(this.pickObject3d);\r\n                    }\r\n                    this._fire('workerload', { target: this });\r\n                }\r\n            });\r\n        } else {\r\n            const centerPt = layer.coordinateToVector3(center);\r\n            const geometries = [];\r\n            let faceIndex = 0, psIndex = 0, normalIndex = 0, uvIndex = 0;\r\n            const altCache = {};\r\n            for (let i = 0; i < len; i++) {\r\n                const polygon = polygons[i];\r\n                const properties = (isGeoJSONPolygon(polygon as any) ? polygon['properties'] : (polygon as any).getProperties() || {});\r\n                const height = properties.height || 1;\r\n                const bottomHeight = properties.bottomHeight || 0;\r\n                const buffGeom = getExtrudeGeometryParams(polygon, height, layer, center, centerPt, altCache);\r\n                geometries.push(buffGeom);\r\n                const minZ = setBottomHeight(buffGeom, bottomHeight, layer, altCache);\r\n\r\n                // const extrudePolygon = new ExtrudePolygon(polygon, Object.assign({}, options, { height, index: i }), material, layer);\r\n                // extrudePolygons.push(extrudePolygon);\r\n\r\n                const { position, normal, uv, indices } = buffGeom;\r\n                const faceLen = indices.length / 3;\r\n                faceMap[i] = [faceIndex + 1, faceIndex + faceLen];\r\n                faceIndex += faceLen;\r\n                const psCount = position.length / 3,\r\n                    //  colorCount = buffGeom.attributes.color.count,\r\n                    normalCount = normal.length / 3, uvCount = uv.length / 2;\r\n                geometriesAttributes[i] = {\r\n                    position: {\r\n                        middleZ: minZ + altCache[height] / 2,\r\n                        count: psCount,\r\n                        start: psIndex,\r\n                        end: psIndex + psCount * 3,\r\n                    },\r\n                    normal: {\r\n                        count: normalCount,\r\n                        start: normalIndex,\r\n                        end: normalIndex + normalCount * 3,\r\n                    },\r\n                    // color: {\r\n                    //     count: colorCount,\r\n                    //     start: colorIndex,\r\n                    //     end: colorIndex + colorCount * 3,\r\n                    // },\r\n                    uv: {\r\n                        count: uvCount,\r\n                        start: uvIndex,\r\n                        end: uvIndex + uvCount * 2,\r\n                    },\r\n                    hide: false\r\n                };\r\n                psIndex += psCount * 3;\r\n                normalIndex += normalCount * 3;\r\n                // colorIndex += colorCount * 3;\r\n                uvIndex += uvCount * 2;\r\n            }\r\n            bufferGeometry = mergeBufferGeometries(geometries);\r\n            if (topColor) {\r\n                initVertexColors(bufferGeometry, bottomColor, topColor, geometriesAttributes);\r\n                (material as any).vertexColors = getVertexColors();\r\n            }\r\n        }\r\n\r\n        super();\r\n        this._initOptions(options);\r\n\r\n        this._createMesh(bufferGeometry, material);\r\n        const z = layer.distanceToVector3(altitude, altitude).x;\r\n        const v = layer.coordinateToVector3(center, z);\r\n        this.getObject3d().position.copy(v);\r\n\r\n        //Face corresponding to monomer\r\n        this._faceMap = faceMap;\r\n        this._baseObjects = extrudePolygons;\r\n        this._datas = polygons;\r\n        this._geometriesAttributes = geometriesAttributes;\r\n        this.faceIndex = null;\r\n        this._geometryCache = bufferGeometry.clone();\r\n        this.isHide = false;\r\n        this._colorMap = {};\r\n        this._initBaseObjectsEvent(extrudePolygons);\r\n        if (!asynchronous) {\r\n            this._setPickObject3d();\r\n            this._init();\r\n        }\r\n        this.type = 'ExtrudePolygons';\r\n    }\r\n\r\n    // eslint-disable-next-line consistent-return\r\n    getSelectMesh() {\r\n        const index = this._getIndex();\r\n        if (index != null) {\r\n            if (!this._baseObjects[index]) {\r\n                const polygon = this._datas[index];\r\n                const opts = Object.assign({}, this.options, isGeoJSONPolygon(polygon) ? polygon.properties : polygon.getProperties(), { index });\r\n                this._baseObjects[index] = new ExtrudePolygon(polygon, opts, (this.getObject3d() as any).material, this.getLayer());\r\n                this._proxyEvent(this._baseObjects[index]);\r\n            }\r\n            return {\r\n                data: this._datas[index],\r\n                baseObject: this._baseObjects[index]\r\n            };\r\n        }\r\n    }\r\n\r\n    // eslint-disable-next-line no-unused-vars\r\n    identify(coordinate): boolean {\r\n        return this.picked;\r\n    }\r\n}\r\n\r\nexport default ExtrudePolygons;\r\n","/* eslint-disable indent */\r\nimport * as maptalks from 'maptalks';\r\nimport { ThreeLayer } from './../index';\r\nimport * as THREE from 'three';\r\nimport { distanceToVector3 } from './index';\r\n\r\nfunction positionsConvert(worldPoints: Array<number>, altitude: number = 0, layer: ThreeLayer): Array<THREE.Vector3> {\r\n    const vectors: THREE.Vector3[] = [], cache = {};\r\n    for (let i = 0, len = worldPoints.length; i < len; i += 3) {\r\n        let x = worldPoints[i], y = worldPoints[i + 1], z = worldPoints[i + 2];\r\n        if (altitude > 0) {\r\n            z += distanceToVector3(altitude, layer, cache);\r\n        }\r\n        vectors.push(new THREE.Vector3(x, y, z));\r\n    }\r\n    return vectors;\r\n}\r\n\r\nexport function vectors2Pixel(worldPoints: Array<number> | Array<THREE.Vector3>, size: maptalks.Size,\r\n    camera: THREE.Camera, altitude = 0, layer: ThreeLayer): Array<{\r\n        x: number;\r\n        y: number;\r\n    }> {\r\n    if (!(worldPoints[0] instanceof THREE.Vector3)) {\r\n        worldPoints = positionsConvert(worldPoints as Array<number>, altitude, layer);\r\n    }\r\n    const pixels = (worldPoints as Array<THREE.Vector3>).map(worldPoint => {\r\n        return vector2Pixel(worldPoint, size, camera);\r\n    });\r\n    return pixels;\r\n\r\n}\r\n\r\n// eslint-disable-next-line camelcase\r\nexport function vector2Pixel(world_vector: THREE.Vector3, size: maptalks.Size, camera: THREE.Camera): {\r\n    x: number;\r\n    y: number;\r\n} {\r\n    // eslint-disable-next-line camelcase\r\n    const vector = world_vector.project(camera);\r\n    const halfWidth = size.width / 2;\r\n    const halfHeight = size.height / 2;\r\n    const result = {\r\n        x: Math.round(vector.x * halfWidth + halfWidth),\r\n        y: Math.round(-vector.y * halfHeight + halfHeight)\r\n    };\r\n    return result;\r\n}","import * as maptalks from 'maptalks';\r\nimport { ThreeLayer } from './index';\r\nimport * as THREE from 'three';\r\nimport BaseObject from './BaseObject';\r\nimport { PointOptionType } from './type';\r\nimport { vector2Pixel } from './util/IdentifyUtil';\r\nimport { addAttribute } from './util/ThreeAdaptUtil';\r\n\r\nconst OPTIONS = {\r\n    altitude: 0,\r\n    height: 0,\r\n    color: null\r\n};\r\n\r\nconst vector = new THREE.Vector3();\r\n\r\nclass Point extends BaseObject {\r\n    constructor(coordinate: maptalks.Coordinate, options: PointOptionType, material: THREE.PointsMaterial, layer: ThreeLayer) {\r\n        options = maptalks.Util.extend({}, OPTIONS, options, { layer, coordinate });\r\n        super();\r\n        let { height, altitude, color, size } = options;\r\n        const vs = [], colors = [];\r\n        if (color) {\r\n            color = (color instanceof THREE.Color ? color : new THREE.Color(color));\r\n            colors.push(color.r, color.g, color.b);\r\n        }\r\n        const z = layer.distanceToVector3(height, height).x;\r\n        const v = layer.coordinateToVector3(coordinate, z);\r\n        vs.push(0, 0, v.z);\r\n        const geometry = new THREE.BufferGeometry();\r\n        addAttribute(geometry, 'position', new THREE.Float32BufferAttribute(vs, 3, true));\r\n        if (colors.length) {\r\n            addAttribute(geometry, 'color', new THREE.Float32BufferAttribute(colors, 3, true));\r\n        }\r\n        if (size !== undefined) {\r\n            addAttribute(geometry, 'size', new THREE.Float32BufferAttribute([size], 1, true));\r\n        }\r\n\r\n        (options as any).positions = v;\r\n        this._initOptions(options);\r\n        this._createPoints(geometry, material);\r\n        const z1 = layer.distanceToVector3(altitude, altitude).x;\r\n        const v1 = new THREE.Vector3(v.x, v.y, z1);\r\n        this.getObject3d().position.copy(v1);\r\n        this.type = 'Point';\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {maptalks.Coordinate} coordinate\r\n     */\r\n    identify(coordinate: maptalks.Coordinate) {\r\n        const layer = this.getLayer(), size = this.getMap().getSize(),\r\n            camera = this.getLayer().getCamera(), positions = (this.getOptions() as any).positions, altitude = this.getOptions().altitude;\r\n        //Size of points\r\n        let pointSize = (this.getObject3d() as any).material.size;\r\n        if (pointSize === undefined) {\r\n            pointSize = (this.options as any).size || 1;\r\n        }\r\n        const pixel = this.getMap().coordToContainerPoint(coordinate);\r\n\r\n        const z = layer.distanceToVector3(altitude, altitude).x;\r\n        vector.x = positions.x;\r\n        vector.y = positions.y;\r\n        vector.z = positions.z + z;\r\n        //3D vector to screen coordinates\r\n        const p = vector2Pixel(vector, size, camera);\r\n        //Distance between two points\r\n        const distance = Math.sqrt(Math.pow(pixel.x - p.x, 2) + Math.pow(pixel.y - p.y, 2));\r\n        return (distance <= pointSize / 2);\r\n    }\r\n}\r\n\r\nexport default Point;\r\n","\r\nimport * as maptalks from 'maptalks';\r\ntype Grids = {\r\n    grids: BBox[],\r\n    averageX: number,\r\n    averageY: number,\r\n    ROWS: number,\r\n    COLS: number\r\n};\r\n\r\nconst ROW: number = 30, COL: number = 30;\r\n\r\n\r\nfunction contains(b: BBox, p: Array<number>) {\r\n    const { minx, miny, maxx, maxy } = b;\r\n    const [x, y] = p;\r\n    if (minx <= x && x <= maxx && miny <= y && y <= maxy) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nclass BBox {\r\n    minlng: number;\r\n    minlat: number;\r\n    maxlng: number;\r\n    maxlat: number;\r\n    minx: number;\r\n    miny: number;\r\n    maxx: number;\r\n    maxy: number;\r\n    coordinates: Array<Array<number>>;\r\n    positions: Array<THREE.Vector3>;\r\n    indexs: Array<number>;\r\n    key: string;\r\n\r\n    constructor(minlng: number, minlat: number, maxlng: number, maxlat: number) {\r\n        this.minlng = minlng;\r\n        this.minlat = minlat;\r\n        this.maxlng = maxlng;\r\n        this.maxlat = maxlat;\r\n        this.minx = Infinity;\r\n        this.miny = Infinity;\r\n        this.maxx = -Infinity;\r\n        this.maxy = -Infinity;\r\n        this.coordinates = [];\r\n        this.positions = [];\r\n        this.indexs = [];\r\n        this.key = null;\r\n    }\r\n\r\n\r\n    /**\r\n     *\r\n     * @param {*} map\r\n     */\r\n    updateBBoxPixel(map: maptalks.Map) {\r\n        let minx = Infinity, miny = Infinity, maxx = -Infinity, maxy = -Infinity;\r\n        const { minlng, minlat, maxlng, maxlat } = this;\r\n        [\r\n            [minlng, minlat],\r\n            [minlng, maxlat],\r\n            [maxlng, minlat],\r\n            [maxlng, maxlat]\r\n        ].map(lnglat => {\r\n            return new maptalks.Coordinate(lnglat);\r\n        }).map(coordinate => {\r\n            return map.coordToContainerPoint(coordinate);\r\n        }).forEach(pixel => {\r\n            minx = Math.min(minx, pixel.x);\r\n            miny = Math.min(miny, pixel.y);\r\n            maxx = Math.max(maxx, pixel.x);\r\n            maxy = Math.max(maxy, pixel.y);\r\n        });\r\n        this.minx = minx;\r\n        this.miny = miny;\r\n        this.maxx = maxx;\r\n        this.maxy = maxy;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     *Determine whether a point is included\r\n     * @param {*} c\r\n     */\r\n    containsCoordinate(c: Array<number> | maptalks.Coordinate) {\r\n        let lng, lat;\r\n        if (Array.isArray(c)) {\r\n            lng = c[0];\r\n            lat = c[1];\r\n        } else if (c instanceof maptalks.Coordinate) {\r\n            lng = c.x;\r\n            lat = c.y;\r\n        }\r\n        const { minlng, minlat, maxlng, maxlat } = this;\r\n        return (minlng <= lng && lng <= maxlng && minlat <= lat && lat <= maxlat);\r\n    }\r\n\r\n    /**\r\n     *Judge rectangle intersection\r\n     * @param {*} pixel\r\n     * @param {*} size\r\n     */\r\n    isRecCross(pixel: maptalks.Point, size: number): boolean {\r\n        const { x, y } = pixel;\r\n        const rec = {\r\n            minx: x - size / 2,\r\n            miny: y - size / 2,\r\n            maxx: x + size / 2,\r\n            maxy: y + size / 2\r\n        };\r\n        const { minx, miny, maxx, maxy } = rec;\r\n        if (contains(this, [minx, miny]) ||\r\n            contains(this, [minx, maxy]) ||\r\n            contains(this, [maxx, miny]) ||\r\n            contains(this, [maxx, maxy]) ||\r\n            contains(rec as BBox, [this.minx, this.miny]) ||\r\n            contains(rec as BBox, [this.minx, this.maxy]) ||\r\n            contains(rec as BBox, [this.maxx, this.miny]) ||\r\n            contains(rec as BBox, [this.maxx, this.maxy])) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     *generate grids\r\n     * @param {*} minlng\r\n     * @param {*} minlat\r\n     * @param {*} maxlng\r\n     * @param {*} maxlat\r\n     */\r\n    static initGrids(minlng: number, minlat: number, maxlng: number, maxlat: number): Grids {\r\n        const grids: BBox[] = [], offsetX = maxlng - minlng, offsetY = maxlat - minlat;\r\n        const averageX = offsetX / COL, averageY = offsetY / ROW;\r\n        let x = minlng, y = minlat;\r\n        for (let i = 0; i < COL; i++) {\r\n            x = minlng + i * averageX;\r\n            for (let j = 0; j < ROW; j++) {\r\n                y = minlat + j * averageY;\r\n                const bounds = new BBox(x, y, x + averageX, y + averageY);\r\n                bounds.key = j + '-' + i;\r\n                grids.push(bounds);\r\n            }\r\n        }\r\n        return { grids, averageX, averageY, ROWS: ROW, COLS: COL };\r\n    }\r\n\r\n}\r\n\r\nexport default BBox;\r\n","import * as maptalks from 'maptalks';\r\nimport * as THREE from 'three';\r\nimport BaseObject from './BaseObject';\r\nimport Point from './Point';\r\nimport { vector2Pixel } from './util/IdentifyUtil';\r\nimport MergedMixin from './MergedMixin';\r\nimport BBox from './util/BBox';\r\nimport { addAttribute } from './util/ThreeAdaptUtil';\r\nimport { distanceToVector3 } from './util';\r\nimport { PointOptionType } from './type';\r\nimport { ThreeLayer } from './index';\r\n\r\nconst OPTIONS = {\r\n    altitude: 0\r\n};\r\n\r\nconst vector = new THREE.Vector3();\r\n\r\nfunction roundFun(value: number, n: number) {\r\n    const tempValue = Math.pow(10, n);\r\n    return Math.round(value * tempValue) / tempValue;\r\n}\r\n\r\n/**\r\n *points\r\n */\r\nclass Points extends MergedMixin(BaseObject) {\r\n    constructor(points: Array<PointOptionType>, options: PointOptionType, material: THREE.PointsMaterial, layer: ThreeLayer) {\r\n        if (!Array.isArray(points)) {\r\n            points = [points];\r\n        }\r\n        options = maptalks.Util.extend({}, OPTIONS, options, { layer, points });\r\n        let minX = Infinity, minY = Infinity, maxX = -Infinity, maxY = -Infinity;\r\n        for (let i = 0, len = points.length; i < len; i++) {\r\n            const { coordinate } = points[i];\r\n            let x, y;\r\n            if (Array.isArray(coordinate)) {\r\n                x = coordinate[0];\r\n                y = coordinate[1];\r\n            } else if (coordinate instanceof maptalks.Coordinate) {\r\n                x = coordinate.x;\r\n                y = coordinate.y;\r\n            }\r\n            points[i].coords = [x, y];\r\n            minX = Math.min(minX, x);\r\n            minY = Math.min(minY, y);\r\n            maxX = Math.max(maxX, x);\r\n            maxY = Math.max(maxY, y);\r\n        }\r\n        const centerPt = layer.coordinateToVector3([(minX + maxX) / 2, (minY + maxY) / 2]);\r\n        const { grids, averageX, averageY, ROWS, COLS } = BBox.initGrids(minX, minY, maxX, maxY);\r\n        const gridslen = grids.length;\r\n\r\n        const vs = new Float32Array(points.length * 3), vectors = [],\r\n            colors = new Float32Array(points.length * 3), sizes = new Float32Array(points.length),\r\n            pointMeshes = [], geometriesAttributes = [];\r\n        const cache = {};\r\n        let maxSize = 0;\r\n        let hasColor = false, hasSize = false;\r\n        const TEMP_VECTOR = new THREE.Vector3(0, 0, 0);\r\n        for (let i = 0, len = points.length; i < len; i++) {\r\n            let { coordinate, height, color, size, coords } = points[i];\r\n            const idx = i * 3;\r\n            if (color) {\r\n                hasColor = true;\r\n                color = (color instanceof THREE.Color ? color : new THREE.Color(color));\r\n                colors[idx] = color.r;\r\n                colors[idx + 1] = color.g;\r\n                colors[idx + 2] = color.b;\r\n            }\r\n            if (size) {\r\n                hasSize = true;\r\n                sizes[i] = size;\r\n                maxSize = Math.max(maxSize, size);\r\n            }\r\n            const z = distanceToVector3(height, layer, cache);\r\n            const v = layer.coordinateToVector3(coordinate, z);\r\n            TEMP_VECTOR.x = v.x;\r\n            TEMP_VECTOR.y = v.y;\r\n            TEMP_VECTOR.z = v.z;\r\n            TEMP_VECTOR.sub(centerPt);\r\n            // const v1 = v.clone().sub(centerPt);\r\n            vs[idx] = TEMP_VECTOR.x;\r\n            vs[idx + 1] = TEMP_VECTOR.y;\r\n            vs[idx + 2] = TEMP_VECTOR.z;\r\n\r\n            vectors.push(v);\r\n\r\n            geometriesAttributes[i] = {\r\n                position: {\r\n                    count: 1,\r\n                    start: i * 3,\r\n                    end: i * 3 + 3\r\n                },\r\n                hide: false\r\n            };\r\n            let row = roundFun(((coords[1] - minY) / averageY), 4);\r\n            let col = roundFun(((coords[0] - minX) / averageX), 4);\r\n            row -= 1;\r\n            col -= 1;\r\n            row = Math.max(0, row);\r\n            col = Math.max(0, col);\r\n            row = Math.ceil(row);\r\n            col = Math.ceil(col);\r\n            const gridIndex = col * ROWS + row;\r\n            if (grids[gridIndex]) {\r\n                grids[gridIndex].positions.push(v);\r\n                grids[gridIndex].indexs.push(i);\r\n            }\r\n            // for (let j = 0; j < gridslen; j++) {\r\n            //     if (grids[j].containsCoordinate(coordinate)) {\r\n            //         // grids[j].coordinates.push(coordinate);\r\n            //         grids[j].positions.push(v);\r\n            //         grids[j].indexs.push(i);\r\n            //         console.log(j, gridIndex);\r\n            //         break;\r\n            //     }\r\n            // }\r\n        }\r\n        const geometry = new THREE.BufferGeometry();\r\n        addAttribute(geometry, 'position', new THREE.BufferAttribute(vs, 3, true));\r\n        if (hasColor) {\r\n            addAttribute(geometry, 'color', new THREE.BufferAttribute(colors, 3, true));\r\n        }\r\n        if (hasSize) {\r\n            addAttribute(geometry, 'size', new THREE.BufferAttribute(sizes, 1, true));\r\n        }\r\n\r\n        //for identify\r\n        (options as any).positions = vectors;\r\n        super();\r\n        this._initOptions(options);\r\n        this._createPoints(geometry, material);\r\n        const altitude = options.altitude;\r\n        const z = layer.distanceToVector3(altitude, altitude).x;\r\n        const v = centerPt.clone();\r\n        v.z = z;\r\n        this.getObject3d().position.copy(v);\r\n\r\n        this._baseObjects = pointMeshes;\r\n        this._datas = points;\r\n        this.faceIndex = null;\r\n        this._geometriesAttributes = geometriesAttributes;\r\n        this._geometryCache = geometry.clone();\r\n        this.isHide = false;\r\n        this._initBaseObjectsEvent(pointMeshes);\r\n        this._grids = grids;\r\n        this._bindMapEvents();\r\n        this.type = 'Points';\r\n        this.maxSize = maxSize;\r\n    }\r\n\r\n    _bindMapEvents() {\r\n        const map = this.getMap();\r\n        const events = 'zoomstart zooming zoomend movestart moving moveend pitch rotate';\r\n        this.on('add', () => {\r\n            this._updateGrids();\r\n            map.on(events, this._updateGrids, this);\r\n        });\r\n        this.on('remove', () => {\r\n            map.off(events, this._updateGrids, this);\r\n        });\r\n    }\r\n\r\n    _updateGrids() {\r\n        const map = this.getMap();\r\n        this._grids.forEach(b => {\r\n            if (b.indexs.length) {\r\n                b.updateBBoxPixel(map);\r\n            }\r\n        });\r\n    }\r\n\r\n    // eslint-disable-next-line consistent-return\r\n    getSelectMesh() {\r\n        const index = this.faceIndex;\r\n        if (index != null) {\r\n            if (!this._baseObjects[index]) {\r\n                const data = this._datas[index];\r\n                const { coordinate, height, color, size } = data;\r\n                this._baseObjects[index] = new Point(coordinate, { height, index, color, size } as any, (this.getObject3d() as any).material, this.getLayer());\r\n                this._proxyEvent(this._baseObjects[index]);\r\n            }\r\n            return {\r\n                data: this._datas[index],\r\n                baseObject: this._baseObjects[index]\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n   *\r\n   * @param {maptalks.Coordinate} coordinate\r\n   */\r\n    identify(coordinate: maptalks.Coordinate) {\r\n        const layer = this.getLayer(), size = this.getMap().getSize(),\r\n            camera = this.getLayer().getCamera(), altitude = this.getOptions().altitude, map = this.getMap();\r\n        const z = layer.distanceToVector3(altitude, altitude).x;\r\n        let pointSize = (this.getObject3d() as any).material.size;\r\n        const isDynamicSize = pointSize === undefined;\r\n        const pixel = map.coordToContainerPoint(coordinate);\r\n        const bs = [];\r\n        this._grids.forEach(b => {\r\n            if (b.indexs.length) {\r\n                if (b.isRecCross(pixel, isDynamicSize ? this.maxSize : pointSize)) {\r\n                    bs.push(b);\r\n                }\r\n            }\r\n        });\r\n        if (bs.length < 1) {\r\n            return false;\r\n        }\r\n\r\n        for (let i = 0, len = bs.length; i < len; i++) {\r\n            for (let len1 = bs[i].positions.length, j = len1 - 1; j >= 0; j--) {\r\n                if (isDynamicSize) {\r\n                    pointSize = this._datas[bs[i].indexs[j]].size || 1;\r\n                }\r\n                const v = bs[i].positions[j];\r\n                vector.x = v.x;\r\n                vector.y = v.y;\r\n                vector.z = v.z + z;\r\n                const p = vector2Pixel(vector, size, camera);\r\n                const distance = Math.sqrt(Math.pow(pixel.x - p.x, 2) + Math.pow(pixel.y - p.y, 2));\r\n                if (distance <= pointSize / 2) {\r\n                    this.faceIndex = bs[i].indexs[j];\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\nexport default Points;\r\n","import * as maptalks from 'maptalks';\r\nimport BaseObject from './BaseObject';\r\nimport { getGeometry, initVertexColors, mergeBarGeometry } from './util/BarUtil';\r\nimport Bar from './Bar';\r\nimport MergedMixin from './MergedMixin';\r\nimport { distanceToVector3, getCenterOfPoints } from './util/index';\r\nimport { getVertexColors } from './util/ThreeAdaptUtil';\r\nimport { BarOptionType } from './type/index';\r\nimport { ThreeLayer } from './index';\r\n\r\n\r\nconst OPTIONS = {\r\n    coordinate: '',\r\n    radius: 10,\r\n    height: 100,\r\n    radialSegments: 6,\r\n    altitude: 0,\r\n    topColor: '',\r\n    bottomColor: '#2d2f61',\r\n};\r\n\r\n/**\r\n * merged bars\r\n */\r\nclass Bars extends MergedMixin(BaseObject) {\r\n    constructor(points: Array<BarOptionType>, options: BarOptionType, material: THREE.Material, layer: ThreeLayer) {\r\n        if (!Array.isArray(points)) {\r\n            points = [points];\r\n        }\r\n        const len = points.length;\r\n        const center = getCenterOfPoints(points);\r\n        const centerPt = layer.coordinateToVector3(center);\r\n        const geometries = [], bars = [], geometriesAttributes = [], faceMap = [];\r\n        let faceIndex = 0, psIndex = 0, normalIndex = 0, uvIndex = 0;\r\n        const cache = {};\r\n        for (let i = 0; i < len; i++) {\r\n            const opts = maptalks.Util.extend({ index: i }, OPTIONS, points[i]);\r\n            const { radius, radialSegments, altitude, topColor, bottomColor, height, coordinate } = opts;\r\n            const r = distanceToVector3(radius, layer, cache);\r\n            const h = distanceToVector3(height, layer, cache);\r\n            const alt = distanceToVector3(altitude, layer, cache);\r\n            const buffGeom = getGeometry({ radius: r, height: h, radialSegments });\r\n            if (topColor) {\r\n                initVertexColors(buffGeom, bottomColor, topColor, 'z', h / 2);\r\n                (material as any).vertexColors = getVertexColors();\r\n            }\r\n            // buffGeom.rotateX(Math.PI / 2);\r\n            const v = layer.coordinateToVector3(coordinate).sub(centerPt);\r\n            const parray = buffGeom.attributes.position.array as any;\r\n            for (let j = 0, len1 = parray.length; j < len1; j += 3) {\r\n                parray[j + 2] += alt;\r\n                parray[j] += v.x;\r\n                parray[j + 1] += v.y;\r\n                parray[j + 2] += v.z;\r\n            }\r\n            geometries.push(buffGeom);\r\n            const bar = new Bar(coordinate, opts, material, layer);\r\n            bars.push(bar);\r\n\r\n            const faceLen = buffGeom.index.count / 3;\r\n            faceMap[i] = [faceIndex + 1, faceIndex + faceLen];\r\n            faceIndex += faceLen;\r\n\r\n            const psCount = buffGeom.attributes.position.count,\r\n                //  colorCount = buffGeom.attributes.color.count,\r\n                normalCount = buffGeom.attributes.normal.count, uvCount = buffGeom.attributes.uv.count;\r\n            geometriesAttributes[i] = {\r\n                position: {\r\n                    count: psCount,\r\n                    start: psIndex,\r\n                    end: psIndex + psCount * 3,\r\n                },\r\n                normal: {\r\n                    count: normalCount,\r\n                    start: normalIndex,\r\n                    end: normalIndex + normalCount * 3,\r\n                },\r\n                // color: {\r\n                //     count: colorCount,\r\n                //     start: colorIndex,\r\n                //     end: colorIndex + colorCount * 3,\r\n                // },\r\n                uv: {\r\n                    count: uvCount,\r\n                    start: uvIndex,\r\n                    end: uvIndex + uvCount * 2,\r\n                },\r\n                hide: false\r\n            };\r\n            psIndex += psCount * 3;\r\n            normalIndex += normalCount * 3;\r\n            // colorIndex += colorCount * 3;\r\n            uvIndex += uvCount * 2;\r\n        }\r\n        super();\r\n        options = maptalks.Util.extend({}, { altitude: 0, layer, points }, options);\r\n        this._initOptions(options);\r\n        const geometry = mergeBarGeometry(geometries);\r\n        this._createMesh(geometry, material);\r\n        const altitude = options.altitude;\r\n        const z = layer.distanceToVector3(altitude, altitude).x;\r\n        const v = centerPt.clone();\r\n        v.z = z;\r\n        this.getObject3d().position.copy(v);\r\n        this._faceMap = faceMap;\r\n        this._baseObjects = bars;\r\n        this._datas = points;\r\n        this._geometriesAttributes = geometriesAttributes;\r\n        this.faceIndex = null;\r\n        this._geometryCache = geometry.clone();\r\n        this.isHide = false;\r\n        this._colorMap = {};\r\n        this._initBaseObjectsEvent(bars);\r\n        this._setPickObject3d();\r\n        this._init();\r\n        this.type = 'Bars';\r\n    }\r\n\r\n    // eslint-disable-next-line no-unused-vars\r\n    identify() {\r\n        return this.picked;\r\n    }\r\n}\r\n\r\nexport default Bars;\r\n","import * as maptalks from 'maptalks';\r\nimport * as THREE from 'three';\r\nimport MergedMixin from './MergedMixin';\r\nimport BaseObject from './BaseObject';\r\nimport { initVertexColors } from './util/ExtrudeUtil';\r\nimport { getExtrudeLineParams, LineStringSplit } from './util/LineUtil';\r\nimport ExtrudeLine from './ExtrudeLine';\r\nimport { isGeoJSON, isGeoJSONLine } from './util/GeoJSONUtil';\r\nimport { generateBufferGeometry, generatePickBufferGeometry, getDefaultBufferGeometry, mergeBufferGeometries, mergeBufferGeometriesAttribute } from './util/MergeGeometryUtil';\r\nimport { distanceToVector3, getCenterOfPoints, setBottomHeight } from './util/index';\r\nimport { getActor } from './worker/MeshActor';\r\nimport { ExtrudeLineOptionType, LineStringType, MergeAttributeType, SingleLineStringType } from './type/index';\r\nimport { ThreeLayer } from './index';\r\nimport { getVertexColors } from './util/ThreeAdaptUtil';\r\n\r\nconst OPTIONS = {\r\n    width: 3,\r\n    height: 1,\r\n    altitude: 0,\r\n    topColor: null,\r\n    bottomColor: '#2d2f61'\r\n};\r\n\r\nclass ExtrudeLines extends MergedMixin(BaseObject) {\r\n    constructor(lineStrings: Array<LineStringType>, options: ExtrudeLineOptionType, material: THREE.Material, layer: ThreeLayer) {\r\n        if (!Array.isArray(lineStrings)) {\r\n            lineStrings = [lineStrings];\r\n        }\r\n        const centers: maptalks.Coordinate[] = [], lineStringList: Array<Array<SingleLineStringType>> = [];\r\n        const len = lineStrings.length;\r\n        for (let i = 0; i < len; i++) {\r\n            const lineString = lineStrings[i];\r\n            const result = LineStringSplit(lineString);\r\n            centers.push(result.center);\r\n            lineStringList.push(result.lineStrings);\r\n        }\r\n        // Get the center point of the point set\r\n        const center = getCenterOfPoints(centers);\r\n        options = maptalks.Util.extend({}, OPTIONS, options, { layer, lineStrings, coordinate: center });\r\n        const { altitude, topColor, bottomColor, asynchronous } = options;\r\n        let bufferGeometry: THREE.BufferGeometry;\r\n        const faceMap = [], extrudeLines = [], geometriesAttributes = [];\r\n        if (asynchronous) {\r\n            var actor = getActor();\r\n            bufferGeometry = getDefaultBufferGeometry();\r\n            (actor as any).pushQueue({\r\n                type: 'LineString',\r\n                layer,\r\n                key: options.key,\r\n                center,\r\n                data: lineStringList,\r\n                lineStrings,\r\n                callback: (e) => {\r\n                    const { faceMap, geometriesAttributes } = e;\r\n                    this._faceMap = faceMap;\r\n                    this._geometriesAttributes = geometriesAttributes;\r\n                    const bufferGeometry = generateBufferGeometry(e);\r\n                    this._geometryCache = generatePickBufferGeometry(bufferGeometry);\r\n                    if (topColor) {\r\n                        initVertexColors(bufferGeometry, bottomColor, topColor, geometriesAttributes);\r\n                        (material as any).vertexColors = getVertexColors();\r\n                    }\r\n                    (this.getObject3d() as any).geometry = bufferGeometry;\r\n                    (this.getObject3d() as any).material.needsUpdate = true;\r\n                    this._setPickObject3d();\r\n                    this._init();\r\n                    if (this.isAdd) {\r\n                        const pick = this.getLayer().getPick();\r\n                        pick.add(this.pickObject3d);\r\n                    }\r\n                    this._fire('workerload', { target: this });\r\n                }\r\n            });\r\n        } else {\r\n            const geometries: MergeAttributeType[] = [];\r\n            let faceIndex = 0, faceMap = [],\r\n                psIndex = 0, normalIndex = 0;\r\n            const cache = {};\r\n            for (let i = 0; i < len; i++) {\r\n                const lineString = lineStrings[i];\r\n                const opts = maptalks.Util.extend({}, OPTIONS, isGeoJSON(lineString as any) ? lineString['properties'] : (lineString as any).getProperties(), { index: i });\r\n                const { height, width, bottomHeight } = opts;\r\n                const w = distanceToVector3(width, layer, cache);\r\n                const h = distanceToVector3(height, layer, cache);\r\n                const lls = lineStringList[i];\r\n                const extrudeParams: MergeAttributeType[] = [];\r\n                let minZ = 0;\r\n                for (let m = 0, le = lls.length; m < le; m++) {\r\n                    const attribute = getExtrudeLineParams(lls[m], w, h, layer, center);\r\n                    minZ = setBottomHeight(attribute, bottomHeight, layer, cache);\r\n                    extrudeParams.push(attribute);\r\n                }\r\n                const buffGeom = mergeBufferGeometriesAttribute(extrudeParams);\r\n                geometries.push(buffGeom);\r\n\r\n                // const extrudeLine = new ExtrudeLine(lineString, opts, material, layer);\r\n                // extrudeLines.push(extrudeLine);\r\n\r\n                const { position, normal, indices } = buffGeom;\r\n                const faceLen = indices.length / 3;\r\n                faceMap[i] = [faceIndex + 1, faceIndex + faceLen];\r\n                faceIndex += faceLen;\r\n                const psCount = position.length / 3,\r\n                    //  colorCount = buffGeom.attributes.color.count,\r\n                    normalCount = normal.length / 3;\r\n                geometriesAttributes[i] = {\r\n                    position: {\r\n                        middleZ: minZ + h / 2,\r\n                        count: psCount,\r\n                        start: psIndex,\r\n                        end: psIndex + psCount * 3,\r\n                    },\r\n                    normal: {\r\n                        count: normalCount,\r\n                        start: normalIndex,\r\n                        end: normalIndex + normalCount * 3,\r\n                    },\r\n                    // color: {\r\n                    //     count: colorCount,\r\n                    //     start: colorIndex,\r\n                    //     end: colorIndex + colorCount * 3,\r\n                    // },\r\n                    // uv: {\r\n                    //     count: uvCount,\r\n                    //     start: uvIndex,\r\n                    //     end: uvIndex + uvCount * 2,\r\n                    // },\r\n                    hide: false\r\n                };\r\n                psIndex += psCount * 3;\r\n                normalIndex += normalCount * 3;\r\n                // colorIndex += colorCount * 3;\r\n                // uvIndex += uvCount * 2;\r\n            }\r\n            bufferGeometry = mergeBufferGeometries(geometries);\r\n\r\n            if (topColor) {\r\n                initVertexColors(bufferGeometry, bottomColor, topColor, geometriesAttributes);\r\n                (material as any).vertexColors = getVertexColors();\r\n            }\r\n        }\r\n\r\n        super();\r\n        this._initOptions(options);\r\n\r\n        this._createMesh(bufferGeometry, material);\r\n        const z = layer.distanceToVector3(altitude, altitude).x;\r\n        const v = layer.coordinateToVector3(center, z);\r\n        this.getObject3d().position.copy(v);\r\n\r\n        //Face corresponding to monomer\r\n        this._faceMap = faceMap;\r\n        this._baseObjects = extrudeLines;\r\n        this._datas = lineStrings;\r\n        this._geometriesAttributes = geometriesAttributes;\r\n        this.faceIndex = null;\r\n        this._geometryCache = bufferGeometry.clone();\r\n        this.isHide = false;\r\n        this._colorMap = {};\r\n        this._initBaseObjectsEvent(extrudeLines);\r\n        if (!asynchronous) {\r\n            this._setPickObject3d();\r\n            this._init();\r\n        }\r\n        this.type = 'ExtrudeLines';\r\n    }\r\n\r\n    // eslint-disable-next-line consistent-return\r\n    getSelectMesh() {\r\n        const index = this._getIndex();\r\n        if (index != null) {\r\n            if (!this._baseObjects[index]) {\r\n                const lineString = this._datas[index];\r\n                const opts = Object.assign({}, this.options, isGeoJSONLine(lineString) ? lineString.properties : lineString.getProperties(), { index });\r\n                this._baseObjects[index] = new ExtrudeLine(lineString, opts, (this.getObject3d() as any).material, this.getLayer());\r\n                this._proxyEvent(this._baseObjects[index]);\r\n            }\r\n            return {\r\n                data: this._datas[index],\r\n                baseObject: this._baseObjects[index]\r\n            };\r\n        }\r\n    }\r\n\r\n    // eslint-disable-next-line no-unused-vars\r\n    identify(coordinate): boolean {\r\n        return this.picked;\r\n    }\r\n}\r\n\r\nexport default ExtrudeLines;\r\n","import * as maptalks from 'maptalks';\r\nimport * as THREE from 'three';\r\nimport BaseObject from './BaseObject';\r\nimport { getLinePosition, LineStringSplit, setLineSegmentPosition } from './util/LineUtil';\r\nimport MergedMixin from './MergedMixin';\r\nimport Line from './Line';\r\nimport { isGeoJSONLine } from './util/GeoJSONUtil';\r\nimport { addAttribute, getVertexColors } from './util/ThreeAdaptUtil';\r\nimport { getCenterOfPoints, getGeometriesColorArray, setBottomHeight } from './util/index';\r\nimport { LineMaterialType, LineOptionType, LineStringType } from './type/index';\r\nimport { ThreeLayer } from './index';\r\n\r\nconst OPTIONS = {\r\n    altitude: 0,\r\n    colors: null\r\n};\r\n\r\n/**\r\n *\r\n */\r\nclass Lines extends MergedMixin(BaseObject) {\r\n    constructor(lineStrings: Array<LineStringType>, options: LineOptionType, material: LineMaterialType, layer: ThreeLayer) {\r\n        if (!Array.isArray(lineStrings)) {\r\n            lineStrings = [lineStrings];\r\n        }\r\n\r\n        const centers = [], lineStringList = [];\r\n        const len = lineStrings.length;\r\n        for (let i = 0; i < len; i++) {\r\n            const lineString = lineStrings[i];\r\n            const result = LineStringSplit(lineString);\r\n            centers.push(result.center);\r\n            lineStringList.push(result.lineStrings);\r\n        }\r\n        // Get the center point of the point set\r\n        const center = getCenterOfPoints(centers);\r\n        options = maptalks.Util.extend({}, OPTIONS, options, { layer, lineStrings, coordinate: center });\r\n\r\n        const lines = [], cache = {};\r\n        let faceIndex = 0, faceMap = [], geometriesAttributes = [],\r\n            psIndex = 0, ps = [];\r\n        for (let i = 0; i < len; i++) {\r\n            const lls = lineStringList[i];\r\n            let psCount = 0;\r\n            for (let m = 0, le = lls.length; m < le; m++) {\r\n                const properties = (isGeoJSONLine(lls[m] as any) ? lls[m]['properties'] : (lls[m] as any).getProperties() || {});\r\n                const { positionsV } = getLinePosition(lls[m], layer, center);\r\n                setBottomHeight(positionsV, properties.bottomHeight, layer, cache);\r\n                psCount += (positionsV.length * 2 - 2);\r\n                setLineSegmentPosition(ps, positionsV);\r\n            }\r\n\r\n\r\n            // const line = new Line(lineString, opts, material, layer);\r\n            // lines.push(line);\r\n\r\n            // const psCount = positionsV.length + positionsV.length - 2;\r\n            const faceLen = psCount;\r\n            faceMap[i] = [faceIndex, faceIndex + faceLen];\r\n            faceIndex += faceLen;\r\n\r\n            geometriesAttributes[i] = {\r\n                position: {\r\n                    count: psCount,\r\n                    start: psIndex,\r\n                    end: psIndex + psCount * 3,\r\n                },\r\n                hide: false\r\n            };\r\n            psIndex += psCount * 3;\r\n        }\r\n\r\n        const geometry = new THREE.BufferGeometry();\r\n        addAttribute(geometry, 'position', new THREE.Float32BufferAttribute(ps, 3));\r\n        super();\r\n        this._initOptions(options);\r\n\r\n        this._createLineSegments(geometry, material);\r\n\r\n        const { altitude } = options;\r\n        const z = layer.distanceToVector3(altitude, altitude).x;\r\n        const v = layer.coordinateToVector3(center, z);\r\n        this.getObject3d().position.copy(v);\r\n\r\n        this._faceMap = faceMap;\r\n        this._baseObjects = lines;\r\n        this._datas = lineStrings;\r\n        this._geometriesAttributes = geometriesAttributes;\r\n        this.faceIndex = null;\r\n        this.index = null;\r\n        this._geometryCache = geometry.clone();\r\n        this.isHide = false;\r\n        this._colorMap = {};\r\n        this._initBaseObjectsEvent(lines);\r\n        this._setPickObject3d();\r\n        this._init();\r\n        this.type = 'Lines';\r\n    }\r\n\r\n    // eslint-disable-next-line consistent-return\r\n    getSelectMesh() {\r\n        const index = this._getIndex();\r\n        if (index != null) {\r\n            if (!this._baseObjects[index]) {\r\n                const lineString = this._datas[index];\r\n                const opts = maptalks.Util.extend({}, this.getOptions(), { index },\r\n                    isGeoJSONLine(lineString) ? lineString.properties : lineString.getProperties());\r\n                this._baseObjects[index] = new Line(lineString, opts, (this.getObject3d() as any).material, this.getLayer());\r\n                this._proxyEvent(this._baseObjects[index]);\r\n            }\r\n            return {\r\n                data: this._datas[index],\r\n                baseObject: this._baseObjects[index]\r\n            };\r\n        }\r\n    }\r\n\r\n    _setPickObject3d() {\r\n        const geometry = this._geometryCache || (this.getObject3d() as any).geometry.clone();\r\n        const pick = this.getLayer().getPick();\r\n        const { _geometriesAttributes } = this;\r\n        const len = _geometriesAttributes.length;\r\n        const colors = getGeometriesColorArray(_geometriesAttributes);\r\n        let cIndex = 0;\r\n        for (let i = 0; i < len; i++) {\r\n            const color = pick.getColor();\r\n            const colorIndex = color.getHex();\r\n            this._colorMap[colorIndex] = i;\r\n            const { count } = _geometriesAttributes[i].position;\r\n            this._datas[i].colorIndex = colorIndex;\r\n            for (let j = 0; j < count; j++) {\r\n                colors[cIndex] = color.r;\r\n                colors[cIndex + 1] = color.g;\r\n                colors[cIndex + 2] = color.b;\r\n                cIndex += 3;\r\n            }\r\n        }\r\n        addAttribute(geometry, 'color', new THREE.BufferAttribute(colors, 3, true));\r\n        const material = (this.getObject3d() as any).material.clone();\r\n        material.color.set('#fff');\r\n        material.vertexColors = getVertexColors();\r\n        const color = pick.getColor();\r\n        const colorIndex = color.getHex();\r\n        const mesh = new THREE.LineSegments(geometry, material);\r\n        mesh.position.copy(this.getObject3d().position);\r\n        mesh['_colorIndex'] = colorIndex;\r\n        this.setPickObject3d(mesh);\r\n    }\r\n\r\n    // eslint-disable-next-line no-unused-vars\r\n    identify(coordinate) {\r\n        return this.picked;\r\n    }\r\n}\r\n\r\nexport default Lines;\r\n","/*\r\n\r\nGlobal sharing\r\n\r\n*/\r\n\r\nimport { Queue } from \"./../type\";\r\n\r\n//Maximum concurrent\r\nconst MAX: number = 10;\r\nconst waitingQueue: Array<Queue> = [];\r\nconst currentQueue: Array<Queue> = [];\r\n\r\nexport function getQueues(): {\r\n    waitingQueue: Queue[];\r\n    currentQueue: Queue[];\r\n} {\r\n    return {\r\n        waitingQueue,\r\n        currentQueue\r\n    };\r\n}\r\n\r\n/**\r\n *\r\n * @param {*} key\r\n * @param {*} url\r\n * @param {*} callback\r\n * @param {*} img\r\n * @param {*} vt\r\n */\r\nexport function pushQueue(key: string, url: string, callback: Function, img: any, vt: any): void {\r\n    // url += `?key=${key}`;\r\n    const q = {\r\n        key,\r\n        url,\r\n        callback,\r\n        img,\r\n        vt\r\n    };\r\n    if (currentQueue.length < MAX) {\r\n        currentQueue.push(q);\r\n        vt.loopMessage(q);\r\n    } else {\r\n        waitingQueue.push(q);\r\n    }\r\n}\r\n\r\n/**\r\n *\r\n * @param {*} index\r\n */\r\nexport function outQueue(index: string): void {\r\n    const callback = deleteQueueItem(waitingQueue, index);\r\n    if (callback) {\r\n        callback(index);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param {*} queArray\r\n * @param {*} index\r\n */\r\nexport function deleteQueueItem(queArray: Queue[], index: string): Function {\r\n    for (let i = 0, len = queArray.length; i < len; i++) {\r\n        const q = queArray[i];\r\n        if (q) {\r\n            const { key, callback } = q;\r\n            if (index === key) {\r\n                queArray.splice(i, 1);\r\n                return callback;\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/**\r\n *\r\n * @param {*} key\r\n * @param {*} vt\r\n */\r\nexport function nextLoop(key: string, vt: any): void {\r\n    deleteQueueItem(currentQueue, key);\r\n    if (waitingQueue.length) {\r\n        currentQueue.push(waitingQueue[0]);\r\n        waitingQueue.splice(0, 1);\r\n        const last = currentQueue[currentQueue.length - 1];\r\n        vt.loopMessage(last);\r\n    }\r\n}","\r\nconst canvas: HTMLCanvasElement = document.createElement('canvas');\r\nconst SIZE: number = 256;\r\ncanvas.width = canvas.height = SIZE;\r\n\r\n\r\nexport function generateImage(key: string, debug: boolean = false): string {\r\n    const ctx = canvas.getContext('2d');\r\n    ctx.clearRect(0, 0, SIZE, SIZE);\r\n    ctx.save();\r\n    if (debug) {\r\n        ctx.fillStyle = 'red';\r\n        ctx.strokeStyle = 'rgba(255,0,0,0.4)';\r\n        ctx.lineWidth = 0.2;\r\n        const text = key || 'tile';\r\n        ctx.font = '18px sans-serif';\r\n        ctx.rect(0, 0, SIZE, SIZE);\r\n        ctx.stroke();\r\n        ctx.fillText(text, 15, SIZE / 2);\r\n    }\r\n    return canvas.toDataURL();\r\n}\r\n\r\n\r\nexport function createCanvas(width: number = 1, height: number = 1): HTMLCanvasElement {\r\n    let canvas;\r\n    if (typeof document === 'undefined') {\r\n        // var Canvas = require('canvas');\r\n        // canvas = new Canvas(width, height);\r\n    } else {\r\n        canvas = document.createElement('canvas');\r\n        if (width) {\r\n            canvas.width = width;\r\n        }\r\n        if (height) {\r\n            canvas.height = height;\r\n        }\r\n    }\r\n    return canvas;\r\n}\r\n","import * as maptalks from 'maptalks';\r\nimport BaseObject from './BaseObject';\r\nimport { ThreeLayer } from './index';\r\nimport { getBaseObjectMaterialType, Queue } from './type';\r\nimport { generateImage } from './util/CanvasUtil';\r\n\r\n/**\r\n *\r\n */\r\nclass BaseVectorTileLayer extends maptalks.TileLayer {\r\n    _opts: any;\r\n    _layer: ThreeLayer;\r\n    material: THREE.Material;\r\n    getMaterial: getBaseObjectMaterialType;\r\n    _baseObjectKeys: { [key: string]: Array<BaseObject> };\r\n    _loadTiles: { [key: string]: any };\r\n    _add: boolean;\r\n    _layerLaodTime: number;\r\n    intervalId: any;\r\n    constructor(url, options = {}) {\r\n        super(maptalks.Util.GUID(), maptalks.Util.extend({ urlTemplate: url }, options));\r\n        this._opts = null;\r\n        this._layer = null;\r\n        this.material = null;\r\n        this.getMaterial = null;\r\n        this._baseObjectKeys = {};\r\n        this._loadTiles = {};\r\n        this._add = null;\r\n        this._layerLaodTime = new Date().getTime();\r\n    }\r\n\r\n\r\n    isAsynchronous(): boolean {\r\n        return this._opts.worker;\r\n    }\r\n\r\n\r\n    /**\r\n     *get current all baseobject\r\n     */\r\n    getBaseObjects(): BaseObject[] {\r\n        const loadTiles = this._loadTiles;\r\n        const baseos = [];\r\n        for (let key in loadTiles) {\r\n            const baseobjects = this._baseObjectKeys[key];\r\n            if (baseobjects && Array.isArray(baseobjects) && baseobjects.length) {\r\n                for (let i = 0, len = baseobjects.length; i < len; i++) {\r\n                    baseos.push(baseobjects[i]);\r\n                }\r\n            }\r\n        }\r\n        return baseos;\r\n    }\r\n\r\n    /**\r\n   * This method should be overridden for event handling\r\n   * @param {*} type\r\n   * @param {*} e\r\n   */\r\n    // eslint-disable-next-line no-unused-vars\r\n    onSelectMesh(type: string, e: any): void {\r\n\r\n    }\r\n\r\n\r\n    /**\r\n   * this is can override\r\n   * @param {*} index\r\n   * @param {*} json\r\n   */\r\n    // eslint-disable-next-line no-unused-vars\r\n    formatBaseObjects(index: string, json: any): BaseObject[] {\r\n        return [];\r\n    }\r\n\r\n    //queue loop\r\n    // eslint-disable-next-line no-unused-vars\r\n    loopMessage(q: Queue): void {\r\n\r\n    }\r\n\r\n\r\n    /**\r\n    *\r\n    * @param {*} q\r\n    */\r\n    getTileData(q: Queue): void {\r\n        const { key, url, callback, img } = q;\r\n        maptalks.Ajax.getJSON(url, {}, function (error, res) {\r\n            if (error) {\r\n                console.error(error);\r\n                callback(key, null, img);\r\n            } else {\r\n                callback(key, res, img);\r\n            }\r\n        });\r\n    }\r\n\r\n    _getCurentTileKeys() {\r\n        const tileGrids = this.getTiles().tileGrids || [];\r\n        const keys: Array<string> = [], keysMap: { [key: string]: boolean } = {};\r\n        for (let i = 0, len = tileGrids.length; i < len; i++) {\r\n            const d = tileGrids[i];\r\n            const tiles = d.tiles || [];\r\n            for (let j = 0, len1 = tiles.length; j < len1; j++) {\r\n                const { id } = tiles[j];\r\n                keys.push(id);\r\n                keysMap[id] = true;\r\n            }\r\n\r\n        }\r\n        return { keys, keysMap };\r\n    }\r\n\r\n\r\n    _isLoad(): boolean {\r\n        const { keys } = this._getCurentTileKeys();\r\n        const keys1 = Object.keys(this._renderer.tilesInView);\r\n        if (keys.length === keys1.length) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    _layerOnLoad(): void {\r\n        // This event will be triggered multiple times per unit time\r\n        const time = new Date().getTime();\r\n        const offsetTime = time - this._layerLaodTime;\r\n        if (offsetTime < 20) {\r\n            return;\r\n        }\r\n        this._layerLaodTime = time;\r\n        const tilesInView = this._renderer.tilesInView, loadTiles = this._loadTiles, threeLayer = this._layer, keys = this._baseObjectKeys;\r\n        const tilesInViewLen = Object.keys(tilesInView).length, loadTilesLen = Object.keys(loadTiles).length;\r\n        const needsRemoveBaseObjects: BaseObject[] = [];\r\n        if (tilesInViewLen && loadTilesLen) {\r\n            for (let index in loadTiles) {\r\n                if (!tilesInView[index]) {\r\n                    if (keys[index]) {\r\n                        (keys[index] || []).forEach(baseobject => {\r\n                            needsRemoveBaseObjects.push(baseobject);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (needsRemoveBaseObjects.length) {\r\n            threeLayer.removeMesh(needsRemoveBaseObjects, false);\r\n        }\r\n        if (tilesInViewLen && loadTilesLen) {\r\n            for (let index in tilesInView) {\r\n                if (!loadTiles[index]) {\r\n                    if (keys[index]) {\r\n                        const baseobject = keys[index];\r\n                        threeLayer.addMesh(baseobject);\r\n                    } else {\r\n                        const { x, y, z } = this._getXYZOfIndex(index);\r\n                        this.getTileUrl(x, y, z);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this._loadTiles = Object.assign({}, tilesInView);\r\n        this._diffCache();\r\n    }\r\n\r\n\r\n    _init(): void {\r\n\r\n    }\r\n\r\n\r\n    _workerLoad(e: any) {\r\n        const baseobject = e.target;\r\n        const img = baseobject._img;\r\n        img.currentCount++;\r\n        if (img.currentCount === img.needCount) {\r\n            img.src = generateImage(img._key, this._opts.debug);\r\n        }\r\n    }\r\n\r\n\r\n    _generateBaseObjects(index: string, res: any, img: any) {\r\n        if (res && img) {\r\n            const { keysMap } = this._getCurentTileKeys();\r\n            //not in current ,ignore\r\n            if (!keysMap[index]) {\r\n                img.src = generateImage(index, this._opts.debug);\r\n                return;\r\n            }\r\n            const baseobjects = this.formatBaseObjects(index, res);\r\n            if (baseobjects.length) {\r\n                img.needCount = baseobjects.length;\r\n                img.currentCount = 0;\r\n                for (let i = 0, len = baseobjects.length; i < len; i++) {\r\n                    const baseobject = baseobjects[i];\r\n                    baseobject._img = img;\r\n                    baseobject._vt = this;\r\n                    if (!this.isVisible()) {\r\n                        baseobject.hide();\r\n                    }\r\n                    this._cachetile(index, baseobject);\r\n                    if (!baseobject.isAsynchronous()) {\r\n                        img.currentCount++;\r\n                    }\r\n                }\r\n\r\n                this._layer.addMesh(baseobjects, false);\r\n                if (img.needCount === img.currentCount) {\r\n                    img.src = generateImage(index, this._opts.debug);\r\n                }\r\n                if (this.isAsynchronous()) {\r\n                    baseobjects.filter(baseobject => {\r\n                        return baseobject.isAsynchronous();\r\n                    }).forEach(baseobject => {\r\n                        baseobject.on('workerload', this._workerLoad, this);\r\n                    });\r\n                } else {\r\n                    img.src = generateImage(index, this._opts.debug);\r\n                }\r\n            } else {\r\n                img.src = generateImage(index, this._opts.debug);\r\n            }\r\n            this._loadTiles[index] = true;\r\n        } else if (img) {\r\n            img.src = generateImage(index, this._opts.debug);\r\n        }\r\n    }\r\n\r\n    _diffCache(): void {\r\n        // if (this._layer.getMap().isInteracting()) {\r\n        //     return;\r\n        // }\r\n        if (Object.keys(this._baseObjectKeys).length > this._renderer.tileCache.max) {\r\n            const tileCache = this._renderer.tileCache.data;\r\n            const tilesInView = this._renderer.tilesInView;\r\n            const needsRemoveBaseObjects: BaseObject[] = [];\r\n            for (let index in this._baseObjectKeys) {\r\n                if (!tileCache[index] && !tilesInView[index]) {\r\n                    (this._baseObjectKeys[index] || []).forEach(baseobject => {\r\n                        if (baseobject.isAdd) {\r\n                            needsRemoveBaseObjects.push(baseobject);\r\n                        }\r\n                    });\r\n                    this._diposeBaseObject(index);\r\n                    delete this._baseObjectKeys[index];\r\n                }\r\n            }\r\n            // Batch deletion can have better performance\r\n            if (needsRemoveBaseObjects.length) {\r\n                this._layer.removeMesh(needsRemoveBaseObjects, false);\r\n            }\r\n        }\r\n    }\r\n\r\n    _diposeBaseObject(index: string): void {\r\n        const baseobjects = this._baseObjectKeys[index];\r\n        if (baseobjects && baseobjects.length) {\r\n            baseobjects.forEach(baseobject => {\r\n                (baseobject.getObject3d() as any).geometry.dispose();\r\n                if (baseobject._geometryCache) {\r\n                    baseobject._geometryCache.dispose();\r\n                }\r\n                const bos = baseobject._baseObjects;\r\n                if (bos && bos.length) {\r\n                    bos.forEach(bo => {\r\n                        (bo.getObject3d() as any).geometry.dispose();\r\n                        bo = null;\r\n                    });\r\n                }\r\n                baseobject._datas = null;\r\n                baseobject._geometriesAttributes = null;\r\n                baseobject._faceMap = null;\r\n                baseobject._colorMap = null;\r\n                if (baseobject.pickObject3d) {\r\n                    (baseobject.pickObject3d as any).geometry.dispose();\r\n                    // baseobject.pickObject3d.material.dispose();\r\n                }\r\n                baseobject = null;\r\n            });\r\n        }\r\n    }\r\n\r\n    _cachetile(index: string, baseobject: BaseObject): void {\r\n        if (!this._baseObjectKeys[index]) {\r\n            this._baseObjectKeys[index] = [];\r\n        }\r\n        this._baseObjectKeys[index].push(baseobject);\r\n\r\n    }\r\n\r\n    _getXYZOfIndex(index: string) {\r\n        const splitstr = index.indexOf('_') > -1 ? '_' : '-';\r\n        let [y, x, z] = index.split(splitstr).slice(1, 4);\r\n        const x1 = parseInt(x);\r\n        const y1 = parseInt(y);\r\n        const z1 = parseInt(z);\r\n        return { x: x1, y: y1, z: z1 };\r\n    }\r\n\r\n\r\n    _getTileExtent(x: number, y: number, z: number): maptalks.Extent {\r\n        const map = this.getMap(),\r\n            res = map._getResolution(z),\r\n            tileConfig = this._getTileConfig(),\r\n            tileExtent = tileConfig.getTilePrjExtent(x, y, res);\r\n        return tileExtent;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {} x\r\n     * @param {*} y\r\n     * @param {*} z\r\n     */\r\n    _getTileLngLatExtent(x: number, y: number, z: number): maptalks.Extent {\r\n        const tileExtent = this._getTileExtent(x, y, z);\r\n        let max = tileExtent.getMax(),\r\n            min = tileExtent.getMin();\r\n        const map = this.getMap();\r\n        const projection = map.getProjection();\r\n        min = projection.unproject(min);\r\n        max = projection.unproject(max);\r\n        return new maptalks.Extent(min, max);\r\n    }\r\n}\r\n\r\nexport default BaseVectorTileLayer;\r\n\r\n","import * as maptalks from 'maptalks';\r\nimport * as THREE from 'three';\r\nimport { pushQueue, outQueue, getQueues, nextLoop } from './queue/TileDataQueue';\r\nimport { isGeoJSONPolygon, isGeoJSONLine, spliteGeoJSONMulti, isGeoJSONPoint, getGeoJSONCoordinates } from './util/GeoJSONUtil';\r\nimport BaseVectorTileLayer from './BaseVectorTileLayer';\r\nimport { ThreeLayer } from './index';\r\nimport BaseObject from './BaseObject';\r\nimport { Queue } from './type';\r\nimport { getBaseObjectMaterialType } from './type/Material';\r\n\r\nconst OPTIONS = {\r\n    worker: false\r\n};\r\n/**\r\n *Provide a simple data loading layer with large amount of data\r\n */\r\nclass ThreeVectorTileLayer extends BaseVectorTileLayer {\r\n    constructor(url: string, options: any = {}, getMaterial: getBaseObjectMaterialType, layer: ThreeLayer) {\r\n        super(maptalks.Util.GUID(), maptalks.Util.extend({ urlTemplate: url }, OPTIONS, options));\r\n        this._opts = options;\r\n        this._layer = layer;\r\n        this.getMaterial = getMaterial;\r\n        this._baseObjectKeys = {};\r\n        this._loadTiles = {};\r\n        this._add = null;\r\n        this._layerLaodTime = new Date().getTime();\r\n        this._init();\r\n    }\r\n\r\n    /**\r\n     * this is can override\r\n     * @param {*} index\r\n     * @param {*} json\r\n     */\r\n    formatBaseObjects(index: string, json: any): BaseObject[] {\r\n        const opts = this._opts, baseobjects: BaseObject[] = [];\r\n        const asynchronous = this.isAsynchronous();\r\n        for (let layerName in json) {\r\n            const geojson = json[layerName] || {};\r\n            let features;\r\n            if (Array.isArray(geojson)) {\r\n                features = geojson;\r\n            } else if (geojson.type === 'FeatureCollection') {\r\n                features = geojson.features;\r\n            }\r\n            if (features && features.length) {\r\n                const polygons = [], lineStrings = [], points = [];\r\n                for (let i = 0, len = features.length; i < len; i++) {\r\n                    const feature = features[i];\r\n                    if (isGeoJSONPolygon(feature)) {\r\n                        polygons.push(feature);\r\n                    } else if (isGeoJSONLine(feature)) {\r\n                        const fs = spliteGeoJSONMulti(feature);\r\n                        for (let j = 0, len1 = fs.length; j < len1; j++) {\r\n                            lineStrings.push(fs[j]);\r\n                        }\r\n                    } else if (isGeoJSONPoint(feature)) {\r\n                        const fs = spliteGeoJSONMulti(feature);\r\n                        for (let j = 0, len1 = fs.length; j < len1; j++) {\r\n                            points.push(maptalks.Util.extend({}, fs[j].properties, fs[j], { coordinate: getGeoJSONCoordinates(fs[j]) }));\r\n                        }\r\n                    }\r\n                }\r\n                if (polygons.length) {\r\n                    const material = this._getMaterial(layerName, polygons, index, geojson);\r\n                    if (material) {\r\n                        const extrudepolygons = this._layer.toExtrudePolygons(polygons,\r\n                            maptalks.Util.extend({}, { topColor: '#fff', layerName, asynchronous, key: index }, opts), material);\r\n                        baseobjects.push(extrudepolygons);\r\n                    }\r\n                }\r\n\r\n                if (lineStrings.length) {\r\n                    const material = this._getMaterial(layerName, lineStrings, index, geojson);\r\n                    if (material && (material instanceof THREE.LineBasicMaterial || material instanceof THREE.LineDashedMaterial)) {\r\n                        const lines = this._layer.toLines(lineStrings, maptalks.Util.extend({}, { layerName }, opts), material);\r\n                        baseobjects.push(lines);\r\n                    }\r\n                }\r\n                if (points.length) {\r\n                    const material = this._getMaterial(layerName, points, index, geojson);\r\n                    if (material && material instanceof THREE.PointsMaterial) {\r\n                        const ps = this._layer.toPoints(points, maptalks.Util.extend({}, { layerName }, opts), material);\r\n                        baseobjects.push(ps);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return baseobjects;\r\n    }\r\n\r\n    //queue loop\r\n    loopMessage(q: Queue): void {\r\n        const { currentQueue } = getQueues();\r\n        if (currentQueue.length > 0) {\r\n            this.getTileData(q);\r\n        }\r\n    }\r\n\r\n    _init(): void {\r\n        this.on('layerload', this._layerOnLoad);\r\n        this.on('add', () => {\r\n            if (this._add === false) {\r\n                const baseobjects = this.getBaseObjects();\r\n                this._layer.addMesh(baseobjects);\r\n            }\r\n            this._add = true;\r\n            /**\r\n             * layerload have a bug ,Sometimes it doesn't trigger,I don't know why\r\n             * Add heartbeat detection mechanism\r\n             */\r\n            this.intervalId = setInterval(() => {\r\n                if (this._isLoad() && (!this._layer.getMap().isInteracting())) {\r\n                    this.fire('layerload');\r\n                }\r\n            }, 1000);\r\n        });\r\n        this.on('remove', () => {\r\n            this._add = false;\r\n            const baseobjects = this.getBaseObjects();\r\n            this._layer.removeMesh(baseobjects);\r\n            clearInterval(this.intervalId);\r\n        });\r\n        this.on('show', () => {\r\n            const baseobjects = this.getBaseObjects();\r\n            baseobjects.forEach(baseobject => {\r\n                baseobject.show();\r\n            });\r\n            for (let key in this._baseObjectKeys) {\r\n                const baseobjects = this._baseObjectKeys[key] || [];\r\n                baseobjects.forEach(baseobject => {\r\n                    baseobject.show();\r\n                });\r\n            }\r\n        });\r\n        this.on('hide', () => {\r\n            const baseobjects = this.getBaseObjects();\r\n            baseobjects.forEach(baseobject => {\r\n                baseobject.hide();\r\n            });\r\n            for (let key in this._baseObjectKeys) {\r\n                const baseobjects = this._baseObjectKeys[key] || [];\r\n                baseobjects.forEach(baseobject => {\r\n                    baseobject.hide();\r\n                });\r\n            }\r\n        });\r\n        this.on('renderercreate', (e) => {\r\n            e.renderer.loadTile = function loadTile(tile) {\r\n                var tileSize = this.layer.getTileSize();\r\n                var tileImage = new Image();\r\n                tileImage.width = tileSize['width'];\r\n                tileImage.height = tileSize['height'];\r\n                tileImage.onload = this.onTileLoad.bind(this, tileImage, tile);\r\n                tileImage.onerror = this.onTileError.bind(this, tileImage, tile);\r\n                this.loadTileImage(tileImage, tile['url'], tile.id);\r\n                return tileImage;\r\n            };\r\n\r\n            e.renderer.deleteTile = function (tile) {\r\n                if (!tile || !tile.image) {\r\n                    return;\r\n                }\r\n                tile.image.onload = null;\r\n                tile.image.onerror = null;\r\n                const tileinfo = tile.info || {};\r\n                outQueue(tileinfo.id);\r\n            };\r\n\r\n            e.renderer.loadTileImage = (img, url, key) => {\r\n                img._key = key;\r\n                pushQueue(key, url, (index, json, image) => {\r\n                    // img.src = generateImage(key, this._opts.debug);\r\n                    this._generateBaseObjects(index, json, image);\r\n                    nextLoop(index, this);\r\n                }, img, this);\r\n            };\r\n        });\r\n    }\r\n\r\n    _getMaterial(layerName: string, data: any, index: string, geojson: any): THREE.Material {\r\n        if (this.getMaterial && maptalks.Util.isFunction(this.getMaterial)) {\r\n            return this.getMaterial(layerName, data, index, geojson);\r\n        }\r\n        return null;\r\n    }\r\n\r\n}\r\n\r\nexport default ThreeVectorTileLayer;\r\n","import * as THREE from 'three';\r\nimport { addAttribute } from './ThreeAdaptUtil';\r\n\r\nexport function getPlaneGeometryAttribute(width: number, height: number, devideW: number, devideH: number) {\r\n    const dx = width / devideW, dy = height / devideH;\r\n    const minX = -width / 2, maxY = height / 2, minY = -height / 2;\r\n    const len = (devideW + 1) * (devideH + 1);\r\n    const position = new Float32Array(len * 3), uv = new Float32Array(len * 2), normal = new Float32Array(len * 3), tempIndex = new Uint32Array(len * 10);\r\n    let index = 0, uIndex = 0, iIndex = 0;\r\n    for (let j = 0; j <= devideH; j++) {\r\n        for (let i = 0; i <= devideW; i++) {\r\n            const x = minX + dx * i;\r\n            const y = maxY - dy * j;\r\n            position[index] = x;\r\n            position[index + 1] = y;\r\n            position[index + 2] = 0;\r\n\r\n            normal[index] = 0;\r\n            normal[index + 1] = 0;\r\n            normal[index + 2] = 1;\r\n            const uvx = (x - minX) / width, uvy = (y - minY) / height;\r\n            uv[uIndex] = uvx;\r\n            uv[uIndex + 1] = uvy;\r\n\r\n            index += 3;\r\n            uIndex += 2;\r\n            if (i < devideW && j < devideH) {\r\n                const a = j * (devideW + 1) + i, b = a + 1, c = (devideW + 1) * (j + 1) + i, d = c + 1;\r\n                tempIndex[iIndex] = a;\r\n                tempIndex[iIndex + 1] = c;\r\n                tempIndex[iIndex + 2] = b;\r\n                tempIndex[iIndex + 3] = c;\r\n                tempIndex[iIndex + 4] = d;\r\n                tempIndex[iIndex + 5] = b;\r\n                iIndex += 6;\r\n            }\r\n        }\r\n    }\r\n    const indexArray = new Uint32Array(iIndex);\r\n    for (let i = 0, len = indexArray.length; i < len; i++) {\r\n        indexArray[i] = tempIndex[i];\r\n    }\r\n    return {\r\n        position,\r\n        uv,\r\n        normal,\r\n        indexs: indexArray\r\n    };\r\n}\r\n\r\nexport function getPlaneGeometry(width: number, height: number, devideW: number, devideH: number) {\r\n    const { position, uv, normal, indexs } = getPlaneGeometryAttribute(width, height, devideW, devideH);\r\n    const geometry = new THREE.BufferGeometry();\r\n    addAttribute(geometry, 'position', new THREE.BufferAttribute(position, 3))\r\n    addAttribute(geometry, 'normal', new THREE.BufferAttribute(normal, 3))\r\n    addAttribute(geometry, 'uv', new THREE.BufferAttribute(uv, 2))\r\n    geometry.setIndex(new THREE.BufferAttribute(indexs, 1));\r\n    return geometry;\r\n}","import * as maptalks from 'maptalks';\r\nimport { ThreeLayer } from './index';\r\nimport * as THREE from 'three';\r\nimport BaseObject from './BaseObject';\r\nimport { ImageType, TerrainOptionType } from './type';\r\nimport { distanceToVector3 } from './util';\r\nimport { getPlaneGeometry } from './util/GeometryUtil';\r\n// import { addAttribute } from './util/ThreeAdaptUtil';\r\nconst textureLoader = new THREE.TextureLoader();\r\nconst canvas = document.createElement('canvas'), tileSize = 256;\r\n\r\nfunction getRGBData(image: HTMLImageElement, width = tileSize, height = tileSize): Uint8ClampedArray {\r\n    canvas.width = width;\r\n    canvas.height = height;\r\n    const ctx = canvas.getContext('2d');\r\n    ctx.drawImage(image, 0, 0, width, height);\r\n    return ctx.getImageData(0, 0, width, height).data;\r\n}\r\n\r\nfunction generateImage(image: ImageType): HTMLImageElement {\r\n    if (!image) {\r\n        return null;\r\n    }\r\n    let img;\r\n    if (typeof image === 'string') {\r\n        img = new Image();\r\n        img.src = image;\r\n    } else if (image instanceof HTMLCanvasElement) {\r\n        img = new Image();\r\n        img.src = image.toDataURL();\r\n    } else if (image instanceof Image) {\r\n        img = new Image();\r\n        img.src = image.src;\r\n        img.crossOrigin = image.crossOrigin;\r\n    }\r\n    if (img && !img.crossOrigin) {\r\n        img.crossOrigin = 'Anonymous';\r\n    }\r\n    return img;\r\n}\r\n\r\nconst OPTIONS = {\r\n    interactive: false,\r\n    altitude: 0,\r\n    image: null,\r\n    imageWidth: 256,\r\n    imageHeight: 256,\r\n    texture: null\r\n};\r\n\r\n/**\r\n *\r\n */\r\nclass Terrain extends BaseObject {\r\n    constructor(extent: maptalks.Extent, options: TerrainOptionType, material: THREE.Material, layer: ThreeLayer) {\r\n        options = maptalks.Util.extend({}, OPTIONS, options, { layer, extent });\r\n        const { texture, image, altitude, imageHeight, imageWidth } = options;\r\n        if (!image) {\r\n            console.error('not find image');\r\n        }\r\n        if (!(extent instanceof maptalks.Extent)) {\r\n            extent = new maptalks.Extent(extent);\r\n        }\r\n        const { xmin, ymin, xmax, ymax } = extent;\r\n        const coords = [\r\n            [xmin, ymin],\r\n            [xmin, ymax],\r\n            [xmax, ymax],\r\n            [xmax, ymin]\r\n        ];\r\n        let vxmin = Infinity, vymin = Infinity, vxmax = -Infinity, vymax = -Infinity;\r\n        coords.forEach(coord => {\r\n            const v = layer.coordinateToVector3(coord);\r\n            const { x, y } = v;\r\n            vxmin = Math.min(x, vxmin);\r\n            vymin = Math.min(y, vymin);\r\n            vxmax = Math.max(x, vxmax);\r\n            vymax = Math.max(y, vymax);\r\n        });\r\n        const w = Math.abs(vxmax - vxmin), h = Math.abs(vymax - vymin);\r\n        const rgbImg = generateImage(image), img = generateImage(texture);\r\n        // const geometry = new THREE.PlaneBufferGeometry(w, h, imageWidth - 1, imageHeight - 1);\r\n        const geometry = getPlaneGeometry(w, h, imageWidth - 1, imageHeight - 1);\r\n        super();\r\n        this._initOptions(options);\r\n        this._createMesh(geometry, material);\r\n        const z = layer.distanceToVector3(altitude, altitude).x;\r\n        const v = layer.coordinateToVector3(extent.getCenter(), z);\r\n        this.getObject3d().position.copy(v);\r\n        material.transparent = true;\r\n        if (rgbImg) {\r\n            material.opacity = 0;\r\n            rgbImg.onload = () => {\r\n                const width = imageWidth, height = imageHeight;\r\n                const imgdata = getRGBData(rgbImg, width, height);\r\n                let idx = 0;\r\n                const cache = {};\r\n                //rgb to height  https://docs.mapbox.com/help/troubleshooting/access-elevation-data/\r\n                for (let i = 0, len = imgdata.length; i < len; i += 4) {\r\n                    const R = imgdata[i], G = imgdata[i + 1], B = imgdata[i + 2];\r\n                    const height = -10000 + ((R * 256 * 256 + G * 256 + B) * 0.1);\r\n                    const z = distanceToVector3(height, layer, cache);\r\n                    (geometry.attributes.position.array as any)[idx * 3 + 2] = z;\r\n                    idx++;\r\n                }\r\n                geometry.attributes.position.needsUpdate = true;\r\n                if (img) {\r\n                    textureLoader.load(img.src, (texture) => {\r\n                        (material as any).map = texture;\r\n                        material.opacity = 1;\r\n                        material.needsUpdate = true;\r\n                    });\r\n                } else {\r\n                    material.opacity = 1;\r\n                }\r\n            };\r\n            rgbImg.onerror = function () {\r\n                console.error(`not load ${rgbImg.src}`);\r\n            };\r\n        }\r\n        this.type = 'Terrain';\r\n    }\r\n}\r\n\r\nexport default Terrain;\r\n","import * as maptalks from 'maptalks';\r\nimport Terrain from './Terrain';\r\nimport BaseVectorTileLayer from './BaseVectorTileLayer';\r\nimport { ThreeLayer } from './index';\r\nimport BaseObject from './BaseObject';\r\nimport { ImageType, Queue } from './type';\r\n\r\nconst OPTIONS = {\r\n    // worker: false\r\n    scale: 1,\r\n    tileDivisor: 4\r\n};\r\n/**\r\n *\r\n */\r\nclass TerrainVectorTileLayer extends BaseVectorTileLayer {\r\n    _imgQueue: { [key: string]: HTMLImageElement };\r\n    constructor(url: string, options: any = {}, material: THREE.Material, layer: ThreeLayer) {\r\n        super(maptalks.Util.GUID(), maptalks.Util.extend({ urlTemplate: url }, OPTIONS, options));\r\n        this._opts = options;\r\n        this._layer = layer;\r\n        this.material = material;\r\n        this._baseObjectKeys = {};\r\n        this._loadTiles = {};\r\n        this._add = null;\r\n        this._imgQueue = {};\r\n        this._layerLaodTime = new Date().getTime();\r\n        this._init();\r\n    }\r\n\r\n    isAsynchronous(): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * this is can override\r\n     * @param {*} index\r\n     * @param {*} json\r\n     */\r\n    formatBaseObjects(index: string, image: ImageType): BaseObject[] {\r\n        const opts = this.options, baseobjects: BaseObject[] = [];\r\n        const { scale, tileDivisor } = opts;\r\n        const { x, y, z } = this._getXYZOfIndex(index);\r\n        const zoom = this.getMap().getZoom();\r\n        const texture = this.getTileUrl(x, y, z);\r\n        const [imageWidth, imageHeight] = this.options.tileSize;\r\n\r\n        const extent = this._getTileLngLatExtent(x, y, z);\r\n        const material = this.material.clone();\r\n        if ((z + 1) >= Math.round(zoom)) {\r\n            const terrain = new Terrain(extent, {\r\n                image,\r\n                imageWidth: imageWidth / tileDivisor,\r\n                imageHeight: imageHeight / tileDivisor,\r\n                texture\r\n            }, material, this._layer);\r\n            terrain.getObject3d().scale.set(scale, scale, 1);\r\n            baseobjects.push(terrain);\r\n        }\r\n        return baseobjects;\r\n    }\r\n\r\n    //queue loop\r\n    loopMessage(q: Queue): void {\r\n        this.getTileData(q);\r\n    }\r\n\r\n\r\n    _init() {\r\n        this.on('layerload', this._layerOnLoad);\r\n        this.on('add', () => {\r\n            if (this._add === false) {\r\n                const baseobjects = this.getBaseObjects();\r\n                this._layer.addMesh(baseobjects);\r\n            }\r\n            this._add = true;\r\n            /**\r\n             * layerload have a bug ,Sometimes it doesn't trigger,I don't know why\r\n             * Add heartbeat detection mechanism\r\n             */\r\n            this.intervalId = setInterval(() => {\r\n                if (this._isLoad() && (!this._layer.getMap().isInteracting())) {\r\n                    this.fire('layerload');\r\n                }\r\n            }, 1000);\r\n        });\r\n        this.on('remove', () => {\r\n            this._add = false;\r\n            const baseobjects = this.getBaseObjects();\r\n            this._layer.removeMesh(baseobjects);\r\n            clearInterval(this.intervalId);\r\n        });\r\n        this.on('show', () => {\r\n            const baseobjects = this.getBaseObjects();\r\n            baseobjects.forEach(baseobject => {\r\n                baseobject.show();\r\n            });\r\n            for (let key in this._baseObjectKeys) {\r\n                const baseobjects = this._baseObjectKeys[key] || [];\r\n                baseobjects.forEach(baseobject => {\r\n                    baseobject.show();\r\n                });\r\n            }\r\n        });\r\n        this.on('hide', () => {\r\n            const baseobjects = this.getBaseObjects();\r\n            baseobjects.forEach(baseobject => {\r\n                baseobject.hide();\r\n            });\r\n            for (let key in this._baseObjectKeys) {\r\n                const baseobjects = this._baseObjectKeys[key] || [];\r\n                baseobjects.forEach(baseobject => {\r\n                    baseobject.hide();\r\n                });\r\n            }\r\n        });\r\n        this.on('renderercreate', (e) => {\r\n            e.renderer.loadTile = function loadTile(tile) {\r\n                var tileSize = this.layer.getTileSize();\r\n                var tileImage = new Image();\r\n                tileImage.width = tileSize['width'];\r\n                tileImage.height = tileSize['height'];\r\n                tileImage.onload = this.onTileLoad.bind(this, tileImage, tile);\r\n                tileImage.onerror = this.onTileError.bind(this, tileImage, tile);\r\n                this.loadTileImage(tileImage, tile['url'], tile.id);\r\n                return tileImage;\r\n            };\r\n\r\n            e.renderer.deleteTile = (tile) => {\r\n                if (!tile || !tile.image) {\r\n                    return;\r\n                }\r\n                tile.image.onload = null;\r\n                tile.image.onerror = null;\r\n                const tileinfo = tile.info || {};\r\n                const rgbImage = this._imgQueue[tileinfo.id];\r\n                if (rgbImage) {\r\n                    rgbImage.src = '';\r\n                    rgbImage.onload = null;\r\n                    rgbImage.onerror = null;\r\n                    delete this._imgQueue[tileinfo.id];\r\n                }\r\n            };\r\n            e.renderer.loadTileImage = (img, url, key) => {\r\n                img._key = key;\r\n                const rgbImage = new Image();\r\n                this._imgQueue[key] = rgbImage;\r\n                const q = {\r\n                    key,\r\n                    url,\r\n                    rgbImage,\r\n                    callback: (index, rgbImage, image) => {\r\n                        this._generateBaseObjects(index, rgbImage, image);\r\n                    },\r\n                    img,\r\n                    vt: this\r\n                };\r\n                this.loopMessage(q);\r\n            };\r\n        });\r\n    }\r\n}\r\n\r\nexport default TerrainVectorTileLayer;\r\n","/*!\r\n * Code from baidu mapv\r\n * License: BSD-3\r\n * https://github.com/huiyan-fe/mapv\r\n *\r\n */\r\n\r\n\r\n/* eslint-disable no-trailing-spaces */\r\n\r\n/**\r\n * https://github.com/huiyan-fe/mapv/blob/master/src/utils/data-range/Intensity.js\r\n * @author kyle / http://nikai.us/\r\n */\r\nimport { createCanvas } from './../CanvasUtil';\r\n\r\n/**\r\n * Category\r\n * @param {Object} [options]   Available options:\r\n *                             {Object} gradient: { 0.25: \"rgb(0,0,255)\", 0.55: \"rgb(0,255,0)\", 0.85: \"yellow\", 1.0: \"rgb(255,0,0)\"}\r\n */\r\nfunction Intensity(options) {\r\n\r\n    options = options || {};\r\n    this.gradient = options.gradient || {\r\n        0.25: 'rgba(0, 0, 255, 1)',\r\n        0.55: 'rgba(0, 255, 0, 1)',\r\n        0.85: 'rgba(255, 255, 0, 1)',\r\n        1.0: 'rgba(255, 0, 0, 1)'\r\n    };\r\n    this.maxSize = options.maxSize || 35;\r\n    this.minSize = options.minSize || 0;\r\n    this.max = options.max || 100;\r\n    this.min = options.min || 0;\r\n    this.initPalette();\r\n}\r\n\r\nIntensity.prototype.setMax = function (value) {\r\n    this.max = value || 100;\r\n};\r\n\r\nIntensity.prototype.setMin = function (value) {\r\n    this.min = value || 0;\r\n};\r\n\r\nIntensity.prototype.setMaxSize = function (maxSize) {\r\n    this.maxSize = maxSize || 35;\r\n};\r\n\r\nIntensity.prototype.setMinSize = function (minSize) {\r\n    this.minSize = minSize || 0;\r\n};\r\n\r\nIntensity.prototype.initPalette = function () {\r\n\r\n    var gradient = this.gradient;\r\n\r\n    var canvas = createCanvas(256, 1);\r\n\r\n    var paletteCtx = this.paletteCtx = canvas.getContext('2d');\r\n\r\n    var lineGradient = paletteCtx.createLinearGradient(0, 0, 256, 1);\r\n\r\n    for (var key in gradient) {\r\n        lineGradient.addColorStop(parseFloat(key), gradient[key]);\r\n    }\r\n\r\n    paletteCtx.fillStyle = lineGradient;\r\n    paletteCtx.fillRect(0, 0, 256, 1);\r\n\r\n};\r\n\r\nIntensity.prototype.getColor = function (value) {\r\n\r\n    var imageData = this.getImageData(value);\r\n\r\n    return 'rgba(' + imageData[0] + ', ' + imageData[1] + ', ' + imageData[2] + ', ' + imageData[3] / 256 + ')';\r\n\r\n};\r\n\r\nIntensity.prototype.getImageData = function (value) {\r\n\r\n    var imageData = this.paletteCtx.getImageData(0, 0, 256, 1).data;\r\n\r\n    if (value === undefined) {\r\n        return imageData;\r\n    }\r\n\r\n    var max = this.max;\r\n    var min = this.min;\r\n\r\n    if (value > max) {\r\n        value = max;\r\n    }\r\n\r\n    if (value < min) {\r\n        value = min;\r\n    }\r\n\r\n    var index = Math.floor((value - min) / (max - min) * (256 - 1)) * 4;\r\n\r\n    return [imageData[index], imageData[index + 1], imageData[index + 2], imageData[index + 3]];\r\n};\r\n\r\n/**\r\n * @param Number value \r\n * @param Number max of value\r\n * @param Number max of size\r\n * @param Object other options\r\n */\r\nIntensity.prototype.getSize = function (value) {\r\n\r\n    var size = 0;\r\n    var max = this.max;\r\n    var min = this.min;\r\n    var maxSize = this.maxSize;\r\n    var minSize = this.minSize;\r\n\r\n    if (value > max) {\r\n        value = max;\r\n    }\r\n\r\n    if (value < min) {\r\n        value = min;\r\n    }\r\n\r\n    if (max > min) {\r\n        size = minSize + (value - min) / (max - min) * (maxSize - minSize);\r\n    } else {\r\n        return maxSize;\r\n    }\r\n\r\n    return size;\r\n\r\n};\r\n\r\nIntensity.prototype.getLegend = function (options) {\r\n    var gradient = this.gradient;\r\n\r\n\r\n    var width = options.width || 20;\r\n    var height = options.height || 180;\r\n\r\n    var canvas = createCanvas(width, height);\r\n\r\n    var paletteCtx = canvas.getContext('2d');\r\n\r\n    var lineGradient = paletteCtx.createLinearGradient(0, height, 0, 0);\r\n\r\n    for (var key in gradient) {\r\n        lineGradient.addColorStop(parseFloat(key), gradient[key]);\r\n    }\r\n\r\n    paletteCtx.fillStyle = lineGradient;\r\n    paletteCtx.fillRect(0, 0, width, height);\r\n\r\n    return canvas;\r\n};\r\n\r\n\r\nexport default Intensity;\r\n","/*!\r\n * Code from baidu mapv\r\n * License: BSD-3\r\n * https://github.com/huiyan-fe/mapv\r\n *\r\n */\r\n\r\n/**\r\n * https://github.com/huiyan-fe/mapv/blob/master/src/canvas/draw/heatmap.js\r\n */\r\nimport { createCanvas } from './../CanvasUtil';\r\nimport Intensity from './Intensity';\r\n\r\nfunction createCircle(size) {\r\n    var shadowBlur = size / 2;\r\n    var r2 = size + shadowBlur;\r\n    var offsetDistance = 10000;\r\n\r\n    var circle = createCanvas(r2 * 2, r2 * 2);\r\n    var context = circle.getContext('2d');\r\n\r\n    context.shadowBlur = shadowBlur;\r\n    context.shadowColor = 'black';\r\n    context.shadowOffsetX = context.shadowOffsetY = offsetDistance;\r\n\r\n    context.beginPath();\r\n    context.arc(r2 - offsetDistance, r2 - offsetDistance, size, 0, Math.PI * 2, true);\r\n    context.closePath();\r\n    context.fill();\r\n    return circle;\r\n}\r\n\r\nfunction colorize(pixels, gradient, options) {\r\n    var max = getMax(options);\r\n    var min = getMin(options);\r\n    var diff = max - min;\r\n    var range = options.range || null;\r\n\r\n    var jMin = 0;\r\n    var jMax = 1024;\r\n    if (range && range.length === 2) {\r\n        jMin = (range[0] - min) / diff * 1024;\r\n    }\r\n\r\n    if (range && range.length === 2) {\r\n        jMax = (range[1] - min) / diff * 1024;\r\n    }\r\n\r\n    var maxOpacity = options.maxOpacity || 0.8;\r\n    var minOpacity = options.minOpacity || 0;\r\n    // var range = options.range;\r\n\r\n    for (var i = 3, len = pixels.length, j; i < len; i += 4) {\r\n        j = pixels[i] * 4; // get gradient color from opacity value\r\n\r\n        if (pixels[i] / 256 > maxOpacity) {\r\n            pixels[i] = 256 * maxOpacity;\r\n        }\r\n        if (pixels[i] / 256 < minOpacity) {\r\n            pixels[i] = 256 * minOpacity;\r\n        }\r\n\r\n        if (j && j >= jMin && j <= jMax) {\r\n            pixels[i - 3] = gradient[j];\r\n            pixels[i - 2] = gradient[j + 1];\r\n            pixels[i - 1] = gradient[j + 2];\r\n        } else {\r\n            pixels[i] = 0;\r\n        }\r\n    }\r\n}\r\n\r\nfunction getMax(options) {\r\n    var max = options.max || 100;\r\n    return max;\r\n}\r\n\r\nfunction getMin(options) {\r\n    var min = options.min || 0;\r\n    return min;\r\n}\r\n\r\nfunction drawGray(context, dataSet, options) {\r\n\r\n    var max = getMax(options);\r\n    // var min = getMin(options);\r\n    // console.log(max)\r\n    var size = options._size || options.size || 13;\r\n\r\n    var circle = createCircle(size);\r\n    var circleHalfWidth = circle.width / 2;\r\n    var circleHalfHeight = circle.height / 2;\r\n\r\n    var data = dataSet;\r\n\r\n    var dataOrderByAlpha = {};\r\n\r\n    data.forEach(function (item) {\r\n        var count = item.count === undefined ? 1 : item.count;\r\n        var alpha = Math.min(1, count / max).toFixed(2);\r\n        dataOrderByAlpha[alpha] = dataOrderByAlpha[alpha] || [];\r\n        dataOrderByAlpha[alpha].push(item);\r\n    });\r\n\r\n    for (var i in dataOrderByAlpha) {\r\n        if (isNaN(i as any)) continue;\r\n        var _data = dataOrderByAlpha[i];\r\n        context.beginPath();\r\n        if (!options.withoutAlpha) {\r\n            context.globalAlpha = i;\r\n        }\r\n        // context.strokeStyle = intensity.getColor(i * max);\r\n        _data.forEach(function (item) {\r\n            var coordinates = item.coordinate;\r\n            var count = item.count === undefined ? 1 : item.count;\r\n            context.globalAlpha = count / max;\r\n            context.drawImage(circle, coordinates[0] - circleHalfWidth, coordinates[1] - circleHalfHeight);\r\n        });\r\n\r\n    }\r\n}\r\n\r\nfunction draw(context, data, options) {\r\n    if (context.canvas.width <= 0 || context.canvas.height <= 0) {\r\n        return;\r\n    }\r\n\r\n    var strength = options.strength || 0.3;\r\n    context.strokeStyle = 'rgba(0,0,0,' + strength + ')';\r\n\r\n    // var shadowCanvas = new Canvas(context.canvas.width, context.canvas.height);\r\n    var shadowCanvas = createCanvas(context.canvas.width, context.canvas.height);\r\n    var shadowContext = shadowCanvas.getContext('2d');\r\n    shadowContext.scale(devicePixelRatio, devicePixelRatio);\r\n\r\n    options = options || {};\r\n\r\n    // var data = dataSet instanceof DataSet ? dataSet.get() : dataSet;\r\n\r\n    context.save();\r\n\r\n    var intensity = new Intensity({\r\n        gradient: options.gradient\r\n    });\r\n\r\n    drawGray(shadowContext, data, options);\r\n    // return false;\r\n    if (!options.absolute) {\r\n        var colored = shadowContext.getImageData(0, 0, context.canvas.width, context.canvas.height);\r\n        colorize(colored.data, intensity.getImageData(), options);\r\n        context.putImageData(colored, 0, 0);\r\n\r\n        context.restore();\r\n    }\r\n\r\n    intensity = null;\r\n    shadowCanvas = null;\r\n}\r\n\r\nexport default {\r\n    draw,\r\n    drawGray,\r\n    colorize\r\n};\r\n","import * as maptalks from 'maptalks';\r\nimport * as THREE from 'three';\r\nimport BaseObject from './BaseObject';\r\nimport HeatMapUitl from './util/heatmap/HeatMapUtil';\r\nimport { createCanvas } from './util/CanvasUtil';\r\nimport Intensity from './util/heatmap/Intensity';\r\nimport { addAttribute, getVertexColors } from './util/ThreeAdaptUtil';\r\nimport { HeatMapDataType, HeatMapOptionType } from './type';\r\nimport { ThreeLayer } from './index';\r\nimport { getPlaneGeometry } from './util/GeometryUtil';\r\n\r\nconst OPTIONS = {\r\n    altitude: 0,\r\n    interactive: false,\r\n    min: 0,\r\n    max: 100,\r\n    size: 13,\r\n    gradient: { 0.25: 'rgb(0,0,255)', 0.55: 'rgb(0,255,0)', 0.85: 'yellow', 1.0: 'rgb(255,0,0)' },\r\n    gridScale: 0.5\r\n};\r\n\r\nconst CANVAS_MAX_SIZE = 2048;\r\n\r\n/**\r\n *\r\n */\r\nclass HeatMap extends BaseObject {\r\n    constructor(data: Array<HeatMapDataType>, options: HeatMapOptionType, material: THREE.Material, layer: ThreeLayer) {\r\n        if (!Array.isArray(data)) {\r\n            data = [data];\r\n        }\r\n        let minX = Infinity, minY = Infinity, maxX = -Infinity, maxY = -Infinity;\r\n        const vs = [];\r\n        //Calculate bbox\r\n        for (let i = 0, len = data.length; i < len; i++) {\r\n            const { coordinate, lnglat, xy } = data[i];\r\n            const coord = coordinate || lnglat || xy;\r\n            if (!coord) {\r\n                console.warn('not find coordinate');\r\n                continue;\r\n            }\r\n            const v = layer.coordinateToVector3(coord);\r\n            vs.push(v);\r\n            const { x, y } = v;\r\n            minX = Math.min(minX, x);\r\n            minY = Math.min(minY, y);\r\n            maxX = Math.max(maxX, x);\r\n            maxY = Math.max(maxY, y);\r\n        }\r\n        options = maptalks.Util.extend({}, OPTIONS, options, { layer, points: data });\r\n\r\n        // Calculate canvas width and height\r\n        let { gridScale, altitude } = options;\r\n        const offsetX = Math.abs(maxX - minX), offsetY = Math.abs(maxY - minY);\r\n        const maxOffset = Math.max((offsetX * gridScale), (offsetY * gridScale));\r\n        if (maxOffset > CANVAS_MAX_SIZE) {\r\n            console.warn(`gridScale: ${gridScale} it's too big. I hope it's a smaller value,canvas max size is ${CANVAS_MAX_SIZE}* ${CANVAS_MAX_SIZE}`);\r\n            const offset = maxOffset / gridScale;\r\n            gridScale = CANVAS_MAX_SIZE / offset;\r\n        }\r\n        const canvasWidth = Math.ceil(offsetX * gridScale), canvasHeight = Math.ceil(offsetY * gridScale);\r\n        const scaleX = canvasWidth / offsetX, scaleY = canvasHeight / offsetY;\r\n        const pixels = [];\r\n        for (let i = 0, len = vs.length; i < len; i++) {\r\n            const v = vs[i];\r\n            v.x -= minX;\r\n            v.y -= minY;\r\n            v.x *= scaleX;\r\n            v.y *= scaleY;\r\n            v.y = canvasHeight - v.y;\r\n            //for heat draw data\r\n            pixels.push({\r\n                coordinate: [v.x, v.y],\r\n                count: data[i].count\r\n            });\r\n        }\r\n        let shadowCanvas = createCanvas(canvasWidth, canvasHeight);\r\n        let shadowContext = shadowCanvas.getContext('2d');\r\n        // shadowContext.scale(devicePixelRatio, devicePixelRatio);\r\n        HeatMapUitl.drawGray(shadowContext, pixels, options);\r\n        const colored = shadowContext.getImageData(0, 0, shadowContext.canvas.width, shadowContext.canvas.height);\r\n\r\n        let maxAlpha = -Infinity;\r\n        const blackps = new Float32Array(colored.data.length / 4), alphas = new Float32Array(colored.data.length / 4);\r\n        for (let i = 3, len = colored.data.length, j = 0; i < len; i += 4) {\r\n            const alpha = colored.data[i];\r\n            maxAlpha = Math.max(maxAlpha, alpha);\r\n            alphas[j] = alpha;\r\n            //Points that do not need to be drawn\r\n            if (alpha <= 0) {\r\n                blackps[j] = 1;\r\n            }\r\n            j++;\r\n        }\r\n        const intensity = new Intensity({\r\n            gradient: options.gradient\r\n        });\r\n        HeatMapUitl.colorize(colored.data, intensity.getImageData(), options);\r\n        shadowCanvas = null;\r\n        shadowContext = null;\r\n\r\n        // const geometry = new THREE.PlaneBufferGeometry(offsetX, offsetY, canvasWidth - 1, canvasHeight - 1);\r\n        const geometry = getPlaneGeometry(offsetX, offsetY, canvasWidth - 1, canvasHeight - 1);\r\n        const index = geometry.getIndex().array;\r\n        const position = geometry.attributes.position.array as any;\r\n        // Index of the points that really need to be drawn\r\n        const colors = new Float32Array(position.length);\r\n        const tempIndex = new Uint32Array(position.length * 6);\r\n        const color = new THREE.Color();\r\n        let iIndex = 0;\r\n        for (let i = 0, len = position.length, j = 0, len1 = index.length, m = 0, len2 = colored.data.length, n = 0; i < Math.max(len, len1, len2); i += 3) {\r\n            if (i < len) {\r\n                const alpha = alphas[n];\r\n                if (alpha > 0) {\r\n                    position[i + 2] = alpha / maxAlpha;\r\n                }\r\n            }\r\n            if (j < len1) {\r\n                const a = index[j], b = index[j + 1], c = index[j + 2];\r\n                if ((!blackps[a]) || (!blackps[b]) || (!blackps[c])) {\r\n                    tempIndex[iIndex] = a;\r\n                    tempIndex[iIndex + 1] = b;\r\n                    tempIndex[iIndex + 2] = c;\r\n                    iIndex += 3;\r\n                }\r\n            }\r\n            if (m < len2) {\r\n                const r = colored.data[m], g = colored.data[m + 1], b = colored.data[m + 2];// a = colored.data[i + 3];\r\n                const rgb = `rgb(${r},${g},${b})`;\r\n                color.setStyle(rgb);\r\n                colors[j] = color.r;\r\n                colors[j + 1] = color.g;\r\n                colors[j + 2] = color.b;\r\n            }\r\n            j += 3;\r\n            m += 4;\r\n            n++;\r\n        }\r\n        const filterIndex = new Uint32Array(iIndex);\r\n        for (let i = 0; i < iIndex; i++) {\r\n            filterIndex[i] = tempIndex[i];\r\n        }\r\n        geometry.setIndex(new THREE.BufferAttribute(filterIndex, 1));\r\n        addAttribute(geometry, 'color', new THREE.BufferAttribute(colors, 3, true));\r\n        (material as any).vertexColors = getVertexColors();\r\n        super();\r\n        this._initOptions(options);\r\n        this._createMesh(geometry, material);\r\n        const z = layer.distanceToVector3(altitude, altitude).x;\r\n        this.getObject3d().position.copy(new THREE.Vector3((minX + maxX) / 2, (minY + maxY) / 2, z));\r\n        this.type = 'HeatMap';\r\n\r\n    }\r\n}\r\n\r\nexport default HeatMap;\r\n","\r\nimport * as THREE from 'three';\r\nimport * as maptalks from 'maptalks';\r\n\r\nconst color: THREE.Color = new THREE.Color();\r\nlet colorIndex = 1;\r\n/**\r\n *https://github.com/mrdoob/three.js/blob/master/examples/webgl_interactive_cubes_gpu.html\r\n */\r\nclass GPUPick {\r\n    object3ds: THREE.Object3D[];\r\n    layer: any;\r\n    camera: THREE.Camera;\r\n    renderer: THREE.WebGLRenderer;\r\n    pickingTexture: THREE.WebGLRenderTarget;\r\n    pickingScene: THREE.Scene;\r\n\r\n    constructor(layer: any) {\r\n        this.object3ds = [];\r\n        this.layer = layer;\r\n        this.camera = layer.getCamera();\r\n        this.renderer = layer.getThreeRenderer();\r\n        this.pickingTexture = new THREE.WebGLRenderTarget(1, 1);\r\n        this.pickingScene = new THREE.Scene();\r\n    }\r\n\r\n    getColor(): THREE.Color {\r\n        color.setHex(colorIndex);\r\n        colorIndex++;\r\n        return color;\r\n    }\r\n\r\n    add(object3d: THREE.Object3D) {\r\n        if (object3d) {\r\n            const colorIndex = object3d['_colorIndex'];\r\n            if (colorIndex) {\r\n                this.object3ds[colorIndex] = object3d;\r\n                this.pickingScene.add(object3d);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    remove(object3d: THREE.Object3D) {\r\n        if (object3d) {\r\n            const colorIndex = object3d['_colorIndex'];\r\n            if (colorIndex) {\r\n                this.object3ds[colorIndex] = null;\r\n                this.pickingScene.remove(object3d);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    isEmpty(): boolean {\r\n        if (this.pickingScene.children.length === 0) {\r\n            return true;\r\n        }\r\n        for (let i = 0, len = this.pickingScene.children.length; i < len; i++) {\r\n            const mesh = this.pickingScene.children[i];\r\n            if (mesh) {\r\n                const object3d = mesh['__parent'];\r\n                if (object3d && object3d.getOptions().interactive === true) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    pick(pixel: maptalks.Point) {\r\n        if (!pixel) {\r\n            return;\r\n        }\r\n        if (this.isEmpty()) {\r\n            return;\r\n        }\r\n        const { camera, renderer, pickingTexture, pickingScene, object3ds, layer } = this;\r\n        const len = this.pickingScene.children.length;\r\n        // reset all object3d picked\r\n        for (let i = 0; i < len; i++) {\r\n            const object3d = this.pickingScene.children[i];\r\n            if (object3d && object3d['__parent']) {\r\n                object3d['__parent'].picked = false;\r\n            }\r\n        }\r\n        //resize size\r\n        const { width, height } = layer._getRenderer().canvas;\r\n        const pw = pickingTexture.width, ph = pickingTexture.height;\r\n        if (width !== pw || height !== ph) {\r\n            pickingTexture.setSize(width, height);\r\n        }\r\n\r\n        //render the picking scene off-screen\r\n\r\n        // set the view offset to represent just a single pixel under the mouse\r\n\r\n        // camera.setViewOffset(width, height, mouse.x, mouse.y, 1, 1);\r\n\r\n        // render the scene\r\n        renderer.setRenderTarget(pickingTexture);\r\n        renderer.clear();\r\n        renderer.render(pickingScene, camera);\r\n\r\n        // clear the view offset so rendering returns to normal\r\n\r\n        // camera.clearViewOffset();\r\n\r\n        //create buffer for reading single pixel\r\n\r\n        const pixelBuffer = new Uint8Array(4);\r\n\r\n        //read the pixel\r\n        const { x, y } = pixel;\r\n        const devicePixelRatio = window.devicePixelRatio;\r\n        const offsetX = (x * devicePixelRatio), offsetY = (pickingTexture.height - y * devicePixelRatio);\r\n        renderer.readRenderTargetPixels(pickingTexture, Math.round(offsetX), Math.round(offsetY), 1, 1, pixelBuffer);\r\n\r\n        //interpret the pixel as an ID\r\n\r\n\r\n        const id = (pixelBuffer[0] << 16) | (pixelBuffer[1] << 8) | (pixelBuffer[2]);\r\n        const object3d = object3ds[id];\r\n        if (object3d) {\r\n            if (object3d['__parent']) {\r\n                object3ds[id]['__parent'].picked = true;\r\n            }\r\n        } else {\r\n            //for merged mesh\r\n            for (let i = 0; i < len; i++) {\r\n                const object3d = this.pickingScene.children[i];\r\n                if (object3d && object3d['__parent']) {\r\n                    const parent = object3d['__parent'];\r\n                    if (parent._colorMap && parent._colorMap[id] != null) {\r\n                        parent.picked = true;\r\n                        parent.index = parent._colorMap[id];\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        renderer.setRenderTarget(null);\r\n    }\r\n}\r\nexport default GPUPick;\r\n","import * as maptalks from 'maptalks';\r\nimport * as THREE from 'three';\r\nimport BaseObject from './BaseObject';\r\nimport { getLinePosition, LineStringSplit, setLineSegmentPosition } from './util/LineUtil';\r\nimport LineGeometry from './util/fatline/LineGeometry';\r\nimport Line2 from './util/fatline/Line2';\r\nimport LineMaterial from './util/fatline/LineMaterial';\r\nimport { FatLineMaterialType, LineOptionType, LineStringType } from './type';\r\nimport { ThreeLayer } from './index';\r\nimport { getVertexColors } from './util/ThreeAdaptUtil';\r\nimport { setBottomHeight } from './util';\r\n\r\nconst OPTIONS = {\r\n    bottomHeight: 0,\r\n    altitude: 0\r\n};\r\n\r\nclass FatLine extends BaseObject {\r\n    constructor(lineString: LineStringType, options: LineOptionType, material: FatLineMaterialType, layer: ThreeLayer) {\r\n        options = maptalks.Util.extend({}, OPTIONS, options, { layer, lineString });\r\n        super();\r\n        this._initOptions(options);\r\n        const { lineStrings, center } = LineStringSplit(lineString);\r\n        const ps = [], cache = {};\r\n        for (let m = 0, le = lineStrings.length; m < le; m++) {\r\n            const positionsV = getLinePosition(lineStrings[m], layer, center).positionsV;\r\n            setBottomHeight(positionsV, options.bottomHeight, layer, cache);\r\n            setLineSegmentPosition(ps, positionsV);\r\n        }\r\n        const geometry = new LineGeometry();\r\n        geometry.setPositions(ps);\r\n        this._setMaterialRes(layer, material);\r\n        this._createLine2(geometry, material);\r\n        const { altitude } = options;\r\n        const z = layer.distanceToVector3(altitude, altitude).x;\r\n        const v = layer.coordinateToVector3(center, z);\r\n        this.getObject3d().position.copy(v);\r\n        this._setPickObject3d(ps, material.linewidth);\r\n        this._init();\r\n        this.type = 'FatLine';\r\n    }\r\n\r\n    _init() {\r\n        const pick = this.getLayer().getPick();\r\n        this.on('add', () => {\r\n            pick.add(this.pickObject3d);\r\n        });\r\n        this.on('remove', () => {\r\n            pick.remove(this.pickObject3d);\r\n        });\r\n    }\r\n\r\n    _setMaterialRes(layer, material) {\r\n        const map = layer.getMap();\r\n        const size = map.getSize();\r\n        const width = size.width,\r\n            height = size.height;\r\n        material.resolution.set(width, height);\r\n    }\r\n\r\n    _setPickObject3d(ps, linewidth) {\r\n        const geometry = new LineGeometry();\r\n        geometry.setPositions(ps);\r\n        const pick = this.getLayer().getPick();\r\n        const color = pick.getColor();\r\n        const colors = [];\r\n        for (let i = 0, len = ps.length / 3; i < len; i++) {\r\n            colors.push(color.r, color.g, color.b);\r\n        }\r\n        geometry.setColors(colors);\r\n        const material = new LineMaterial({\r\n            color: '#fff',\r\n            // side: THREE.BackSide,\r\n            linewidth,\r\n            vertexColors: getVertexColors()\r\n        });\r\n        this._setMaterialRes(this.getLayer(), material);\r\n        const colorIndex = color.getHex();\r\n        const mesh = new Line2(geometry, material);\r\n        mesh.position.copy(this.getObject3d().position);\r\n        mesh._colorIndex = colorIndex;\r\n        this.setPickObject3d(mesh);\r\n    }\r\n\r\n    // eslint-disable-next-line no-unused-vars\r\n    identify(coordinate) {\r\n        return this.picked;\r\n    }\r\n\r\n    setSymbol(material) {\r\n        if (material && material instanceof THREE.Material) {\r\n            material.needsUpdate = true;\r\n            const size = this.getMap().getSize();\r\n            const width = size.width,\r\n                height = size.height;\r\n            (material as any).resolution.set(width, height);\r\n            (this.getObject3d() as any).material = material;\r\n        }\r\n        return this;\r\n    }\r\n\r\n}\r\nexport default FatLine;\r\n","import * as maptalks from 'maptalks';\r\nimport * as THREE from 'three';\r\nimport BaseObject from './BaseObject';\r\nimport { getLinePosition, LineStringSplit, setLineSegmentPosition } from './util/LineUtil';\r\nimport MergedMixin from './MergedMixin';\r\nimport FatLine from './FatLine';\r\nimport { isGeoJSONLine } from './util/GeoJSONUtil';\r\nimport LineGeometry from './util/fatline/LineGeometry';\r\nimport Line2 from './util/fatline/Line2';\r\nimport LineMaterial from './util/fatline/LineMaterial';\r\nimport { getCenterOfPoints, getGeometriesColorArray, setBottomHeight } from './util';\r\nimport { FatLineMaterialType, LineOptionType, LineStringType } from './type';\r\nimport { ThreeLayer } from './index';\r\nimport { getVertexColors } from './util/ThreeAdaptUtil';\r\n\r\nconst OPTIONS = {\r\n    altitude: 0,\r\n    colors: null\r\n};\r\n\r\n/**\r\n *\r\n */\r\nclass FatLines extends MergedMixin(BaseObject) {\r\n    constructor(lineStrings: Array<LineStringType>, options: LineOptionType, material: FatLineMaterialType, layer: ThreeLayer) {\r\n        if (!Array.isArray(lineStrings)) {\r\n            lineStrings = [lineStrings];\r\n        }\r\n\r\n        const centers = [], lineStringList = [];\r\n        const len = lineStrings.length;\r\n        for (let i = 0; i < len; i++) {\r\n            const lineString = lineStrings[i];\r\n            const result = LineStringSplit(lineString);\r\n            centers.push(result.center);\r\n            lineStringList.push(result.lineStrings);\r\n        }\r\n        // Get the center point of the point set\r\n        const center = getCenterOfPoints(centers);\r\n        options = maptalks.Util.extend({}, OPTIONS, options, { layer, lineStrings, coordinate: center });\r\n\r\n        const lines = [], cache = {};\r\n        let faceIndex = 0, faceMap = [], geometriesAttributes = [],\r\n            psIndex = 0, ps = [];\r\n        //LineSegmentsGeometry\r\n        for (let i = 0; i < len; i++) {\r\n            const lls = lineStringList[i];\r\n            let psCount = 0;\r\n            for (let m = 0, le = lls.length; m < le; m++) {\r\n                const properties = (isGeoJSONLine(lls[m] as any) ? lls[m]['properties'] : (lls[m] as any).getProperties() || {});\r\n                const { positionsV } = getLinePosition(lls[m], layer, center);\r\n                setBottomHeight(positionsV, properties.bottomHeight, layer, cache);\r\n                psCount += (positionsV.length * 2 - 2);\r\n                setLineSegmentPosition(ps, positionsV);\r\n            }\r\n            // const psCount = positionsV.length + positionsV.length - 2;\r\n            const faceLen = psCount;\r\n            faceMap[i] = [faceIndex, faceIndex + faceLen];\r\n            faceIndex += faceLen;\r\n\r\n            geometriesAttributes[i] = {\r\n                position: {\r\n                    count: psCount,\r\n                    start: psIndex,\r\n                    end: psIndex + psCount * 3,\r\n                },\r\n                instanceStart: {\r\n                    count: psCount,\r\n                    start: psIndex,\r\n                    end: psIndex + psCount * 3,\r\n                },\r\n                instanceEnd: {\r\n                    count: psCount,\r\n                    start: psIndex,\r\n                    end: psIndex + psCount * 3,\r\n                },\r\n                hide: false\r\n            };\r\n            psIndex += psCount * 3;\r\n        }\r\n\r\n        super();\r\n        this._initOptions(options);\r\n\r\n        const geometry = new LineGeometry();\r\n        geometry.setPositions(ps);\r\n        this._setMaterialRes(layer, material);\r\n        this._createLine2(geometry, material);\r\n        const { altitude } = options;\r\n        const z = layer.distanceToVector3(altitude, altitude).x;\r\n        const v = layer.coordinateToVector3(center, z);\r\n        this.getObject3d().position.copy(v);\r\n\r\n        this._faceMap = faceMap;\r\n        this._baseObjects = lines;\r\n        this._datas = lineStrings;\r\n        this._geometriesAttributes = geometriesAttributes;\r\n        this.faceIndex = null;\r\n        this.index = null;\r\n        this._geometryCache = new LineGeometry();\r\n        (this._geometryCache as any).setPositions(ps);\r\n        this._colorMap = {};\r\n        this.isHide = false;\r\n        this._initBaseObjectsEvent(lines);\r\n        this._setPickObject3d(ps, material.linewidth);\r\n        this._init();\r\n        this.type = 'FatLines';\r\n    }\r\n\r\n    _setMaterialRes(layer, material) {\r\n        const map = layer.getMap();\r\n        const size = map.getSize();\r\n        const width = size.width,\r\n            height = size.height;\r\n        material.resolution.set(width, height);\r\n    }\r\n\r\n    _setPickObject3d(ps?, linewidth?) {\r\n        const geometry = this._geometryCache || new LineGeometry();\r\n        (geometry as LineGeometry).setPositions(ps);\r\n        const pick = this.getLayer().getPick();\r\n        const { _geometriesAttributes } = this;\r\n        const colors = getGeometriesColorArray(_geometriesAttributes);\r\n        let cIndex = 0;\r\n        for (let i = 0, len = _geometriesAttributes.length; i < len; i++) {\r\n            const color = pick.getColor();\r\n            const colorIndex = color.getHex();\r\n            this._colorMap[colorIndex] = i;\r\n            const { count } = _geometriesAttributes[i].position;\r\n            this._datas[i].colorIndex = colorIndex;\r\n            for (let j = 0; j < count; j++) {\r\n                colors[cIndex] = color.r;\r\n                colors[cIndex + 1] = color.g;\r\n                colors[cIndex + 2] = color.b;\r\n                cIndex += 3;\r\n            }\r\n        }\r\n        (geometry as LineGeometry).setColors(colors);\r\n        const material = new LineMaterial({\r\n            // color: color.getStyle(),\r\n            // side: THREE.BackSide,\r\n            color: '#fff',\r\n            linewidth,\r\n            vertexColors: getVertexColors()\r\n            // dashed: false\r\n        });\r\n        this._setMaterialRes(this.getLayer(), material);\r\n        const color = pick.getColor();\r\n        const colorIndex = color.getHex();\r\n        const mesh = new Line2(geometry, material);\r\n        mesh.position.copy(this.getObject3d().position);\r\n        mesh._colorIndex = colorIndex;\r\n        this.setPickObject3d(mesh);\r\n    }\r\n\r\n    // eslint-disable-next-line no-unused-vars\r\n    identify(coordinate) {\r\n        return this.picked;\r\n    }\r\n\r\n    setSymbol(material) {\r\n        if (material && material instanceof THREE.Material) {\r\n            material.needsUpdate = true;\r\n            const size = this.getMap().getSize();\r\n            const width = size.width,\r\n                height = size.height;\r\n            (material as any).resolution.set(width, height);\r\n            (this.getObject3d() as any).material = material;\r\n        }\r\n        return this;\r\n    }\r\n\r\n\r\n    // eslint-disable-next-line consistent-return\r\n    getSelectMesh() {\r\n        const index = this._getIndex();\r\n        if (index != null) {\r\n            if (!this._baseObjects[index]) {\r\n                const lineString = this._datas[index];\r\n                const opts = maptalks.Util.extend({}, this.getOptions(), { index },\r\n                    isGeoJSONLine(lineString) ? lineString.properties : lineString.getProperties());\r\n                this._baseObjects[index] = new FatLine(lineString, opts, (this.getObject3d() as any).material, this.getLayer());\r\n                this._proxyEvent(this._baseObjects[index]);\r\n            }\r\n            return {\r\n                data: this._datas[index],\r\n                baseObject: this._baseObjects[index]\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n       * update geometry attributes\r\n       * @param {*} bufferAttribute\r\n       * @param {*} attribute\r\n       */\r\n    _updateAttribute(bufferAttribute, attribute) {\r\n        const { indexs } = this._getHideGeometryIndex(attribute);\r\n        const array = this._geometryCache.attributes[attribute].array;\r\n        const len = array.length;\r\n        for (let i = 0; i < len; i++) {\r\n            bufferAttribute.array[i] = array[i];\r\n        }\r\n        let value = -100000;\r\n        for (let j = 0; j < indexs.length; j++) {\r\n            const index = indexs[j];\r\n            const { start, end } = this._geometriesAttributes[index][attribute];\r\n            for (let i = start; i < end; i++) {\r\n                bufferAttribute.array[i] = value;\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    _showGeometry(baseObject, isHide) {\r\n        let index;\r\n        if (baseObject) {\r\n            index = baseObject.getOptions().index;\r\n        }\r\n        if (index != null) {\r\n            const geometryAttributes = this._geometriesAttributes[index];\r\n            const { hide } = geometryAttributes;\r\n            if (hide === isHide) {\r\n                return this;\r\n            }\r\n            geometryAttributes.hide = isHide;\r\n            const buffGeom = (this.getObject3d() as any).geometry;\r\n            this._updateAttribute(buffGeom.attributes.instanceStart, 'instanceStart');\r\n            this._updateAttribute(buffGeom.attributes.instanceEnd, 'instanceEnd');\r\n            // this._updateAttribute(buffGeom.attributes.instanceDistanceStart, 'instanceDistanceStart');\r\n            // this._updateAttribute(buffGeom.attributes.instanceDistanceEnd, 'instanceDistanceEnd');\r\n            buffGeom.attributes.instanceStart.data.needsUpdate = true;\r\n            buffGeom.attributes.instanceEnd.data.needsUpdate = true;\r\n            // buffGeom.attributes.instanceDistanceStart.data.needsUpdate = true;\r\n            // buffGeom.attributes.instanceDistanceEnd.data.needsUpdate = true;\r\n            this.isHide = isHide;\r\n        }\r\n        return this;\r\n    }\r\n}\r\n\r\nexport default FatLines;\r\n","\r\nimport * as maptalks from 'maptalks';\r\nimport * as THREE from 'three';\r\nimport BaseObject from './BaseObject';\r\nimport { ThreeLayer } from './index';\r\nimport { BarOptionType } from './type/index';\r\nimport { getDefaultBoxGeometry, initVertexColors } from './util/BarUtil';\r\nimport { getVertexColors } from './util/ThreeAdaptUtil';\r\n\r\nconst OPTIONS = {\r\n    radius: 10,\r\n    height: 100,\r\n    altitude: 0,\r\n    topColor: '',\r\n    bottomColor: '#2d2f61',\r\n};\r\n\r\nclass Box extends BaseObject {\r\n    constructor(coordinate: maptalks.Coordinate, options: BarOptionType, material: THREE.Material, layer: ThreeLayer) {\r\n        options = maptalks.Util.extend({}, OPTIONS, options, { layer, coordinate });\r\n        super();\r\n        this._initOptions(options);\r\n        const { height, radius, topColor, bottomColor, altitude } = options;\r\n        const h = layer.distanceToVector3(height, height).x;\r\n        const r = layer.distanceToVector3(radius, radius).x;\r\n        const geometry = getDefaultBoxGeometry().clone();\r\n        geometry.scale(r * 2, r * 2, h);\r\n        if (topColor) {\r\n            initVertexColors(geometry, bottomColor, topColor, 'z', h / 2);\r\n            (material as any).vertexColors = getVertexColors();\r\n        }\r\n        this._createMesh(geometry, material);\r\n        const z = layer.distanceToVector3(altitude, altitude).x;\r\n        const position = layer.coordinateToVector3(coordinate, z);\r\n        this.getObject3d().position.copy(position);\r\n        this.type = 'Box';\r\n    }\r\n}\r\nexport default Box;\r\n","\r\nimport * as maptalks from 'maptalks';\r\nimport * as THREE from 'three';\r\nimport BaseObject from './BaseObject';\r\nimport Box from './Box';\r\nimport MergedMixin from './MergedMixin';\r\nimport { distanceToVector3, getCenterOfPoints } from './util/index';\r\nimport { getDefaultBoxGeometry, initVertexColors, mergeBarGeometry } from './util/BarUtil';\r\nimport { BarOptionType } from './type/index';\r\nimport { ThreeLayer } from './index';\r\nimport { getVertexColors } from './util/ThreeAdaptUtil';\r\n\r\nconst OPTIONS = {\r\n    radius: 10,\r\n    height: 100,\r\n    altitude: 0,\r\n    topColor: null,\r\n    bottomColor: '#2d2f61',\r\n};\r\n\r\nclass Boxs extends MergedMixin(BaseObject) {\r\n    constructor(points: Array<BarOptionType>, options: BarOptionType, material: THREE.Material, layer: ThreeLayer) {\r\n        if (!Array.isArray(points)) {\r\n            points = [points];\r\n        }\r\n        const len = points.length;\r\n        const center = getCenterOfPoints(points);\r\n        const centerPt = layer.coordinateToVector3(center);\r\n        const geometries = [], bars = [], geometriesAttributes = [], faceMap = [];\r\n        let faceIndex = 0, psIndex = 0, normalIndex = 0, uvIndex = 0;\r\n        const cache = {};\r\n        for (let i = 0; i < len; i++) {\r\n            const opts = maptalks.Util.extend({ index: i }, OPTIONS, points[i]);\r\n            const { radius, altitude, topColor, bottomColor, height, coordinate } = opts;\r\n            const r = distanceToVector3(radius, layer, cache);\r\n            const h = distanceToVector3(height, layer, cache);\r\n            const alt = distanceToVector3(altitude, layer, cache);\r\n            const buffGeom = getDefaultBoxGeometry().clone();\r\n            buffGeom.scale(r * 2, r * 2, h);\r\n            if (topColor) {\r\n                initVertexColors(buffGeom, bottomColor, topColor, 'z', h / 2);\r\n                (material as any).vertexColors = getVertexColors();\r\n            }\r\n            const v = layer.coordinateToVector3(coordinate).sub(centerPt);\r\n            const parray = buffGeom.attributes.position.array as any;\r\n            for (let j = 0, len1 = parray.length; j < len1; j += 3) {\r\n                parray[j + 2] += alt;\r\n                parray[j] += v.x;\r\n                parray[j + 1] += v.y;\r\n                parray[j + 2] += v.z;\r\n            }\r\n            geometries.push(buffGeom);\r\n            const bar = new Box(coordinate, opts, material, layer);\r\n            bars.push(bar);\r\n\r\n            const faceLen = buffGeom.index.count / 3;\r\n            faceMap[i] = [faceIndex + 1, faceIndex + faceLen];\r\n            faceIndex += faceLen;\r\n\r\n            const psCount = buffGeom.attributes.position.count,\r\n                //  colorCount = buffGeom.attributes.color.count,\r\n                normalCount = buffGeom.attributes.normal.count, uvCount = buffGeom.attributes.uv.count;\r\n            geometriesAttributes[i] = {\r\n                position: {\r\n                    count: psCount,\r\n                    start: psIndex,\r\n                    end: psIndex + psCount * 3,\r\n                },\r\n                normal: {\r\n                    count: normalCount,\r\n                    start: normalIndex,\r\n                    end: normalIndex + normalCount * 3,\r\n                },\r\n                // color: {\r\n                //     count: colorCount,\r\n                //     start: colorIndex,\r\n                //     end: colorIndex + colorCount * 3,\r\n                // },\r\n                uv: {\r\n                    count: uvCount,\r\n                    start: uvIndex,\r\n                    end: uvIndex + uvCount * 2,\r\n                },\r\n                hide: false\r\n            };\r\n            psIndex += psCount * 3;\r\n            normalIndex += normalCount * 3;\r\n            // colorIndex += colorCount * 3;\r\n            uvIndex += uvCount * 2;\r\n        }\r\n        super();\r\n        options = maptalks.Util.extend({}, { altitude: 0, layer, points }, options);\r\n        this._initOptions(options);\r\n        const geometry = mergeBarGeometry(geometries);\r\n        this._createMesh(geometry, material);\r\n        const altitude = options.altitude;\r\n        const z = layer.distanceToVector3(altitude, altitude).x;\r\n        const v = centerPt.clone();\r\n        v.z = z;\r\n        this.getObject3d().position.copy(v);\r\n\r\n        this._faceMap = faceMap;\r\n        this._baseObjects = bars;\r\n        this._datas = points;\r\n        this._geometriesAttributes = geometriesAttributes;\r\n        this.faceIndex = null;\r\n        this._geometryCache = geometry.clone();\r\n        this.isHide = false;\r\n        this._colorMap = {};\r\n        this._initBaseObjectsEvent(bars);\r\n        this._setPickObject3d();\r\n        this._init();\r\n        this.type = 'Boxs';\r\n    }\r\n\r\n    // eslint-disable-next-line no-unused-vars\r\n    identify(coordinate) {\r\n        return this.picked;\r\n    }\r\n}\r\nexport default Boxs;\r\n","// eslint-disable-next-line quotes\r\nconst workerCode = `function(e){\"use strict\";var d=n,t=n;function n(e,t,n){n=n||2;var r,i,o,a,v,h=t&&t.length,l=h?t[0]*n:e.length,u=p(e,0,l,n,!0),x=[];if(!u||u.next===u.prev)return x;if(h&&(u=function(e,t,n,r){var i,o,a,v,h=[];for(i=0,o=t.length;i<o;i++)a=t[i]*r,v=i<o-1?t[i+1]*r:e.length,(v=p(e,a,v,r,!1))===v.next&&(v.steiner=!0),h.push(function(e){var t=e,n=e;for(;(t.x<n.x||t.x===n.x&&t.y<n.y)&&(n=t),t=t.next,t!==e;);return n}(v));for(h.sort(m),i=0;i<h.length;i++)!function(e,t){(t=function(e,t){var n,r=t,i=e.x,o=e.y,a=-1/0;do{if(o<=r.y&&o>=r.next.y&&r.next.y!==r.y){var v=r.x+(o-r.y)*(r.next.x-r.x)/(r.next.y-r.y);if(v<=i&&a<v){if((a=v)===i){if(o===r.y)return r;if(o===r.next.y)return r.next}n=r.x<r.next.x?r:r.next}}}while(r=r.next,r!==t);if(!n)return null;if(i===a)return n;var h,l=n,u=n.x,x=n.y,f=1/0;r=n;for(;i>=r.x&&r.x>=u&&i!==r.x&&M(o<x?i:a,o,u,x,o<x?a:i,o,r.x,r.y)&&(h=Math.abs(o-r.y)/(i-r.x),Z(r,e)&&(h<f||h===f&&(r.x>n.x||r.x===n.x&&function(e,t){return w(e.prev,e,t.prev)<0&&w(t.next,e,e.next)<0}(n,r)))&&(n=r,f=h)),r=r.next,r!==l;);return n}(e,t))&&(e=S(t,e),g(t,t.next),g(e,e.next))}(h[i],n),n=g(n,n.next);return n}(e,t,u,n)),e.length>80*n){for(var f=r=e[0],s=i=e[1],c=n;c<l;c+=n)(o=e[c])<f&&(f=o),(a=e[c+1])<s&&(s=a),r<o&&(r=o),i<a&&(i=a);v=0!==(v=Math.max(r-f,i-s))?1/v:0}return y(u,x,n,f,s,v),x}function p(e,t,n,r,i){var o,a;if(i===0<z(e,t,n,r))for(o=t;o<n;o+=r)a=v(o,e[o],e[o+1],a);else for(o=n-r;t<=o;o-=r)a=v(o,e[o],e[o+1],a);return a&&u(a,a.next)&&(f(a),a=a.next),a}function g(e,t){if(!e)return e;t=t||e;var n,r=e;do{if(n=!1,r.steiner||!u(r,r.next)&&0!==w(r.prev,r,r.next))r=r.next;else{if(f(r),(r=t=r.prev)===r.next)break;n=!0}}while(n||r!==t);return t}function y(e,t,n,r,i,o,a){if(e){!a&&o&&function(e,t,n,r){for(var i=e;null===i.z&&(i.z=b(i.x,i.y,t,n,r)),i.prevZ=i.prev,i.nextZ=i.next,i=i.next,i!==e;);i.prevZ.nextZ=null,i.prevZ=null,function(e){var t,n,r,i,o,a,v,h,l=1;do{for(n=e,o=e=null,a=0;n;){for(a++,r=n,t=v=0;t<l&&(v++,r=r.nextZ);t++);for(h=l;0<v||0<h&&r;)0!==v&&(0===h||!r||n.z<=r.z)?(n=(i=n).nextZ,v--):(r=(i=r).nextZ,h--),o?o.nextZ=i:e=i,i.prevZ=o,o=i;n=r}}while(o.nextZ=null,l*=2,1<a)}(i)}(e,r,i,o);for(var v,h,l=e;e.prev!==e.next;)if(v=e.prev,h=e.next,o?function(e,t,n,r){var i=e.prev,o=e,a=e.next;if(0<=w(i,o,a))return!1;var v=(i.x<o.x?i.x<a.x?i:a:o.x<a.x?o:a).x,h=(i.y<o.y?i.y<a.y?i:a:o.y<a.y?o:a).y,l=(i.x>o.x?i.x>a.x?i:a:o.x>a.x?o:a).x,u=(i.y>o.y?i.y>a.y?i:a:o.y>a.y?o:a).y,x=b(v,h,t,n,r),f=b(l,u,t,n,r),s=e.prevZ,c=e.nextZ;for(;s&&s.z>=x&&c&&c.z<=f;){if(s!==e.prev&&s!==e.next&&M(i.x,i.y,o.x,o.y,a.x,a.y,s.x,s.y)&&0<=w(s.prev,s,s.next))return!1;if(s=s.prevZ,c!==e.prev&&c!==e.next&&M(i.x,i.y,o.x,o.y,a.x,a.y,c.x,c.y)&&0<=w(c.prev,c,c.next))return!1;c=c.nextZ}for(;s&&s.z>=x;){if(s!==e.prev&&s!==e.next&&M(i.x,i.y,o.x,o.y,a.x,a.y,s.x,s.y)&&0<=w(s.prev,s,s.next))return!1;s=s.prevZ}for(;c&&c.z<=f;){if(c!==e.prev&&c!==e.next&&M(i.x,i.y,o.x,o.y,a.x,a.y,c.x,c.y)&&0<=w(c.prev,c,c.next))return!1;c=c.nextZ}return!0}(e,r,i,o):function(e){var t=e.prev,n=e,r=e.next;if(0<=w(t,n,r))return!1;var i=e.next.next;for(;i!==e.prev;){if(M(t.x,t.y,n.x,n.y,r.x,r.y,i.x,i.y)&&0<=w(i.prev,i,i.next))return!1;i=i.next}return!0}(e))t.push(v.i/n),t.push(e.i/n),t.push(h.i/n),f(e),e=h.next,l=h.next;else if((e=h)===l){a?1===a?y(e=function(e,t,n){var r=e;do{var i=r.prev,o=r.next.next}while(!u(i,o)&&x(i,r,r.next,o)&&Z(i,o)&&Z(o,i)&&(t.push(i.i/n),t.push(r.i/n),t.push(o.i/n),f(r),f(r.next),r=e=o),r=r.next,r!==e);return g(r)}(g(e),t,n),t,n,r,i,o,2):2===a&&function(e,t,n,r,i,o){var a=e;do{for(var v=a.next.next;v!==a.prev;){if(a.i!==v.i&&function(e,t){return e.next.i!==t.i&&e.prev.i!==t.i&&!function(e,t){var n=e;do{if(n.i!==e.i&&n.next.i!==e.i&&n.i!==t.i&&n.next.i!==t.i&&x(n,n.next,e,t))return!0}while(n=n.next,n!==e);return!1}(e,t)&&(Z(e,t)&&Z(t,e)&&function(e,t){var n=e,r=!1,i=(e.x+t.x)/2,o=(e.y+t.y)/2;for(;n.y>o!=n.next.y>o&&n.next.y!==n.y&&i<(n.next.x-n.x)*(o-n.y)/(n.next.y-n.y)+n.x&&(r=!r),n=n.next,n!==e;);return r}(e,t)&&(w(e.prev,e,t.prev)||w(e,t.prev,t))||u(e,t)&&0<w(e.prev,e,e.next)&&0<w(t.prev,t,t.next))}(a,v)){var h=S(a,v);return a=g(a,a.next),h=g(h,h.next),y(a,t,n,r,i,o),y(h,t,n,r,i,o)}v=v.next}}while((a=a.next)!==e)}(e,t,n,r,i,o):y(g(e),t,n,r,i,o,1);break}}}function m(e,t){return e.x-t.x}function b(e,t,n,r,i){return(e=1431655765&((e=858993459&((e=252645135&((e=16711935&((e=32767*(e-n)*i)|e<<8))|e<<4))|e<<2))|e<<1))|(t=1431655765&((t=858993459&((t=252645135&((t=16711935&((t=32767*(t-r)*i)|t<<8))|t<<4))|t<<2))|t<<1))<<1}function M(e,t,n,r,i,o,a,v){return 0<=(i-a)*(t-v)-(e-a)*(o-v)&&0<=(e-a)*(r-v)-(n-a)*(t-v)&&0<=(n-a)*(o-v)-(i-a)*(r-v)}function w(e,t,n){return(t.y-e.y)*(n.x-t.x)-(t.x-e.x)*(n.y-t.y)}function u(e,t){return e.x===t.x&&e.y===t.y}function x(e,t,n,r){var i=l(w(e,t,n)),o=l(w(e,t,r)),a=l(w(n,r,e)),v=l(w(n,r,t));return i!==o&&a!==v||(0===i&&h(e,n,t)||(0===o&&h(e,r,t)||(0===a&&h(n,e,r)||!(0!==v||!h(n,t,r)))))}function h(e,t,n){return t.x<=Math.max(e.x,n.x)&&t.x>=Math.min(e.x,n.x)&&t.y<=Math.max(e.y,n.y)&&t.y>=Math.min(e.y,n.y)}function l(e){return 0<e?1:e<0?-1:0}function Z(e,t){return w(e.prev,e,e.next)<0?0<=w(e,t,e.next)&&0<=w(e,e.prev,t):w(e,t,e.prev)<0||w(e,e.next,t)<0}function S(e,t){var n=new a(e.i,e.x,e.y),r=new a(t.i,t.x,t.y),i=e.next,o=t.prev;return(e.next=t).prev=e,(n.next=i).prev=n,(r.next=n).prev=r,(o.next=r).prev=o,r}function v(e,t,n,r){n=new a(e,t,n);return r?(n.next=r.next,(n.prev=r).next.prev=n,r.next=n):(n.prev=n).next=n,n}function f(e){e.next.prev=e.prev,e.prev.next=e.next,e.prevZ&&(e.prevZ.nextZ=e.nextZ),e.nextZ&&(e.nextZ.prevZ=e.prevZ)}function a(e,t,n){this.i=e,this.x=t,this.y=n,this.prev=null,this.next=null,this.z=null,this.prevZ=null,this.nextZ=null,this.steiner=!1}function z(e,t,n,r){for(var i=0,o=t,a=n-r;o<n;o+=r)i+=(e[a]-e[o])*(e[o+1]+e[a+1]),a=o;return i}function r(e,t){var n=e.length-1,r=[e[0]];return function e(t,n,r,i,o){for(var a,v,h,l,u,x,f,s=i,c=n+1;c<r;c++){var p=(v=t[c],h=t[n],l=t[r],p=f=x=u=void 0,u=h[0],x=h[1],f=l[0]-u,p=l[1]-x,0===f&&0===p||(1<(h=((v[0]-u)*f+(v[1]-x)*p)/(f*f+p*p))?(u=l[0],x=l[1]):0<h&&(u+=f*h,x+=p*h)),(f=v[0]-u)*f+(p=v[1]-x)*p);s<p&&(a=c,s=p)}i<s&&(1<a-n&&e(t,n,a,i,o),o.push(t[a]),1<r-a&&e(t,a,r,i,o))}(e,0,n,t,r),r.push(e[n]),r}function A(e,t,n){if(e.length<=2)return e;t=void 0!==t?t*t:1;return e=r(e=n?e:function(e,t){for(var n,r,i,o,a=e[0],v=[a],h=1,l=e.length;h<l;h++)n=e[h],i=a,o=void 0,o=(r=n)[0]-i[0],i=r[1]-i[1],t<o*o+i*i&&(v.push(n),a=n);return a!==n&&v.push(n),v}(e,t),t)}function R(e,t){var n=t[0],r=t[1],t=Math.sqrt(n*n+r*r);return e[0]=n/t,e[1]=r/t,e}function s(e,t,n,r){return e[0]=t[0]+n[0]*r,e[1]=t[1]+n[1]*r,e[2]=t[2]+n[2]*r,e}function F(e,t,n){return e[0]=t[0]-n[0],e[1]=t[1]-n[1],e[2]=t[2]-n[2],e}n.deviation=function(e,t,n,r){var i=t&&t.length,o=i?t[0]*n:e.length,a=Math.abs(z(e,0,o,n));if(i)for(var v=0,h=t.length;v<h;v++){var l=t[v]*n,u=v<h-1?t[v+1]*n:e.length;a-=Math.abs(z(e,l,u,n))}for(var x=0,v=0;v<r.length;v+=3){var f=r[v]*n,s=r[v+1]*n,c=r[v+2]*n;x+=Math.abs((e[f]-e[c])*(e[1+s]-e[1+f])-(e[f]-e[s])*(e[1+c]-e[1+f]))}return 0===a&&0===x?0:Math.abs((x-a)/a)},n.flatten=function(e){for(var t=e[0][0].length,n={vertices:[],holes:[],dimensions:t},r=0,i=0;i<e.length;i++){for(var o=0;o<e[i].length;o++)for(var a=0;a<t;a++)n.vertices.push(e[i][o][a]);0<i&&(r+=e[i-1].length,n.holes.push(r))}return n},d.default=t;var c=[];function ee(e,t,n,r){var i,o,a=(o=n,(i=t)[0]*o[0]+i[1]*o[1]+i[2]*o[2]),v=Math.acos(a)*r;return s(c,n,t,-a),r=(o=i=c)[0],n=o[1],a=o[2],o=Math.sqrt(r*r+n*n+a*a),i[0]=r/o,i[1]=n/o,i[2]=a/o,a=e,o=t,t=Math.cos(v),a[0]=o[0]*t,a[1]=o[1]*t,a[2]=o[2]*t,s(e,e,c,Math.sin(v)),e}function q(e,t,n){if(n-t<3)return 0;for(var r=0,i=2*(n-1),o=2*t;o<2*n;){var a=e[i],v=e[i+1],h=e[o],l=e[o+1],i=o;o+=2,r+=a*l-h*v}return r}var B=[],U=[],L=[];function O(e,t,n,r,i,o,a,v){var h=null!=a,l=i,u=null;h&&(u=new Uint32Array(r-n));for(var x=n;x<r;x++){var f=x===r-1?n:x+1,s=x===n?r-1:x-1,c=e[2*s],p=e[2*s+1],g=e[2*x],d=e[2*x+1],s=e[2*f],f=e[2*f+1];B[0]=g-c,B[1]=d-p,U[0]=s-g,U[1]=f-d,R(B,B),R(U,U),h&&(u[x]=l),v||x!==n?v||x!==r-1?(c=U,p=B,(s=L)[0]=c[0]+p[0],s[1]=c[1]+p[1],f=L[1],L[1]=-L[0],L[0]=f,R(L,L),s=U,p=(c=L)[0]*s[0]+c[1]*s[1],f=Math.sqrt(1-p*p),c=o*Math.min(10,1/f),h&&a<1/f&&o*p<0?(s=g+L[0]*o,p=d+L[1]*o,f=Math.acos(f)/2,f=Math.tan(f)*Math.abs(o),t[2*l]=s+L[1]*f,t[2*l+1]=p-L[0]*f,t[2*++l]=s-L[1]*f,t[2*l+1]=p+L[0]*f):(t[2*l]=g+L[0]*c,t[2*l+1]=d+L[1]*c)):(L[0]=B[1],L[1]=-B[0],R(L,L),t[2*l]=g+L[0]*o,t[2*l+1]=d+L[1]*o):(L[0]=U[1],L[1]=-U[0],R(L,L),t[2*l]=g+L[0]*o,t[2*l+1]=d+L[1]*o),l++}return u}function P(e,t,n,r,i){var o=null!=r?[]:new Float32Array(e.length);if(O(e,o,0,t&&t.length?t[0]:e.length/2,0,n,r,i),t)for(var a=0;a<t.length;a++){var v=t[a];O(e,o,v,t[a+1]||e.length/2,null!=r?o.length/2:v,n,r,i)}return o}function V(e,t,n,r){for(var i=0;i<Math.floor((r-n)/2);i++)for(var o=0;o<t;o++){var a=(i+n)*t+o,v=(r-i-1)*t+o,h=e[a];e[a]=e[v],e[v]=h}return e}function W(e){e.depth=e.depth||1,e.bevelSize=e.bevelSize||0,e.bevelSegments=null==e.bevelSegments?2:e.bevelSegments,e.smoothSide=e.smoothSide||!1,e.smoothBevel=e.smoothBevel||!1,e.simplify=e.simplify||0,\"number\"==typeof e.depth&&(e.bevelSize=Math.min(0<e.bevelSegments?e.bevelSize:0,e.depth/2)),0<e.bevelSize||(e.bevelSegments=0),e.bevelSegments=Math.round(e.bevelSegments);var t,n,r,i,o=e.boundingRect;e.translate=e.translate||[0,0],e.scale=e.scale||[1,1],e.fitRect&&(t=null==e.fitRect.x?o.x||0:e.fitRect.x,n=null==e.fitRect.y?o.y||0:e.fitRect.y,r=e.fitRect.width,i=e.fitRect.height,null==r?null!=i?r=i/o.height*o.width:(r=o.width,i=o.height):null==i&&(i=r/o.width*o.height),e.scale=[r/o.width,i/o.height],e.translate=[(t-o.x)*e.scale[0],(n-o.y)*e.scale[1]])}function j(e,t){function n(e,t,n,r){e[0]=t,e[1]=n,e[2]=r}for(var r,i,o,a,v,h,l,u=[],x=[],f=[],s=[],c=[],p=[],g=e.length,d=new Float32Array(t.length),y=0;y<g;){var m=3*e[y++],b=3*e[y++],M=3*e[y++];n(u,t[m],t[1+m],t[2+m]),n(x,t[b],t[1+b],t[2+b]),n(f,t[M],t[1+M],t[2+M]),F(s,u,x),F(c,x,f),r=p,o=c,l=h=v=a=void 0,a=(i=s)[0],v=i[1],h=i[2],l=o[0],i=o[1],o=o[2],r[0]=v*o-h*i,r[1]=h*l-a*o,r[2]=a*i-v*l;for(var w=0;w<3;w++)d[m+w]=d[m+w]+p[w],d[b+w]=d[b+w]+p[w],d[M+w]=d[M+w]+p[w]}for(var Z,S,z,A,R,q=0;q<d.length;)n(p,d[q],d[q+1],d[q+2]),R=A=z=void 0,z=(S=Z=p)[0],A=S[1],R=S[2],S=Math.sqrt(z*z+A*A+R*R),Z[0]=z/S,Z[1]=A/S,Z[2]=R/S,d[q++]=p[0],d[q++]=p[1],d[q++]=p[2];return d}var te=[[0,0],[1,0],[1,1],[0,0],[1,1],[0,1]];function H(e,t,n,r,i,o){var a=t.vertices,v=t.topVertices,h=t.depth,t=t.rect,l=r-n,u=o.smoothSide?1:2,x=l*u,f=o.smoothBevel?1:2,s=Math.min(h/2,o.bevelSize),c=o.bevelSegments,p=i.vertex,g=Math.max(t.width,t.height,h);if(0<s)for(var d=[0,0,1],y=[],m=[0,0,-1],b=[],M=0,w=new Float32Array(l),Z=0;Z<2;Z++)for(var S=0===Z?h-s:s,z=0;z<=c*f;z++){for(var A=0,R=void 0,q=void 0,F=0;F<l;F++){for(var B=0;B<u;B++){var U=2*((F+B)%l+n);y[0]=a[U]-v[U],y[1]=a[1+U]-v[1+U],y[2]=0;var L=Math.sqrt(y[0]*y[0]+y[1]*y[1]);y[0]/=L,y[1]/=L;var O=(Math.floor(z/f)+z%f)/c;0===Z?ee(b,d,y,O):ee(b,y,m,O);var P=0===Z?O:1-O,V=s*Math.sin(P*Math.PI/2),W=L*Math.cos(P*Math.PI/2),O=s*L/Math.sqrt(V*V+W*W),P=b[0]*O+v[U],L=b[1]*O+v[1+U],V=b[2]*O+S;e.position[3*i.vertex]=P,e.position[3*i.vertex+1]=L,e.position[3*i.vertex+2]=V,(0<F||0<B)&&(A+=Math.sqrt((R-P)*(R-P)+(q-L)*(q-L))),(0<z||0<Z)&&(W=3*(i.vertex-x),U=e.position[W],O=e.position[1+W],W=e.position[2+W],w[F]+=Math.sqrt((U-P)*(U-P)+(O-L)*(O-L)+(W-V)*(W-V))),e.uv[2*i.vertex]=A/g,e.uv[2*i.vertex+1]=w[F]/g,R=P,q=L,i.vertex++}if(1<f&&z%f||1==f&&1<=z)for(var j=0;j<6;j++){var H=(te[j][0]+F*u)%x,k=te[j][1]+M;e.indices[i.index++]=(k-1)*x+H+p}}M++}else for(var I=0;I<2;I++)for(var _=0===I?h-s:s,D=0,E=void 0,C=void 0,G=0;G<l;G++)for(var J=0;J<u;J++){var K=2*((G+J)%l+n),N=a[K],K=a[1+K];e.position[3*i.vertex]=N,e.position[3*i.vertex+1]=K,e.position[3*i.vertex+2]=_,(0<G||0<J)&&(D+=Math.sqrt((E-N)*(E-N)+(C-K)*(C-K))),e.uv[2*i.vertex]=D/g,e.uv[2*i.vertex+1]=_/g,E=N,C=K,i.vertex++}for(var Q=0<s?c*f+1:1,T=0;T<l;T++)for(var X=0;X<6;X++){var Y=(te[X][0]+T*u)%x,$=te[X][1]+Q;e.indices[i.index++]=($-1)*x+Y+p}}function k(e,t){for(var n=0,r=0,i=0;i<e.length;i++){var o=e[i],a=o.indices,v=o.vertices,h=o.holes,o=o.depth,l=v.length/2,u=0<Math.min(o/2,t.bevelSize)?t.bevelSegments:0;n+=a.length*(t.excludeBottom?1:2),r+=l*(t.excludeBottom?1:2);for(var x=2+2*u,f=0,s=0,c=0;c<(h?h.length:0)+1;c++){n+=6*((s=0===c?h&&h.length?h[0]:l:(f=h[c-1],h[c]||l))-f)*(x-1);var p=(s-f)*(t.smoothSide?1:2);r+=p*x+(t.smoothBevel?0:u*p*2)}}for(var g={position:new Float32Array(3*r),indices:new(65535<r?Uint32Array:Uint16Array)(n),uv:new Float32Array(2*r)},d={vertex:0,index:0},y=0;y<e.length;y++)!function(e,t,n,r){var i=e.indices,o=e.vertices,a=e.topVertices,v=e.rect,h=e.depth;if(!(o.length<=4)){for(var l=n.vertex,u=i.length,x=0;x<u;x++)t.indices[n.index++]=l+i[x];for(var f=Math.max(v.width,v.height),s=0;s<(r.excludeBottom?1:2);s++)for(var c=0;c<a.length;c+=2){var p=a[c],g=a[c+1];t.position[3*n.vertex]=p,t.position[3*n.vertex+1]=g,t.position[3*n.vertex+2]=(1-s)*h,t.uv[2*n.vertex]=(p-v.x)/f,t.uv[2*n.vertex+1]=(g-v.y)/f,n.vertex++}if(!r.excludeBottom)for(var d=o.length/2,y=0;y<u;y+=3)for(var m=0;m<3;m++)t.indices[n.index++]=l+d+i[y+2-m]}}(e[y],g,d,t);for(var m=0;m<e.length;m++){var b,M=e[m],w=M.holes,Z=M.vertices.length/2,S=w&&w.length?w[0]:Z;if(H(g,e[m],0,S,d,t),w)for(var z=0;z<w.length;z++)b=w[z],S=w[z+1]||Z,H(g,e[m],b,S,d,t)}for(var A=0;A<g.uv.length;A++){var R=g.uv[A];0<R&&Math.round(R)===R?g.uv[A]=1:g.uv[A]=R%1}return g.normal=j(g.indices,g.position),g.boundingRect=e[0]&&e[0].rect,g}function I(e,t){t=Object.assign({},t);for(var n=[1/0,1/0],r=[-1/0,-1/0],i=0;i<e.length;i++)D(e[i][0],n,r);t.boundingRect=t.boundingRect||{x:n[0],y:n[1],width:r[0]-n[0],height:r[1]-n[1]},W(t);for(var o=[],a=t.translate||[0,0],v=t.scale||[1,1],h=t.boundingRect,l={x:h.x*v[0]+a[0],y:h.y*v[1]+a[1],width:h.width*v[0],height:h.height*v[1]},u=Math.min(h.width,h.height)/1e5,x=0;x<e.length;x++){var f=function(e,t){for(var n=[],r=0;r<e.length;r++){for(var i=e[r],o=[],a=i.length,v=i[a-1][0],h=i[a-1][1],l=0,u=0;u<a;u++){var x=i[u][0],f=i[u][1],s=x-v,c=f-h;t<(l+=Math.sqrt(s*s+c*c))&&(o.push(i[u]),l=0),v=x,h=f}3<=o.length&&n.push(o)}return 0<n.length?n:null}(e[x],u);if(f){var s=t.simplify/Math.max(v[0],v[1]);if(f=0<s?function(e,t){for(var n=[],r=0;r<e.length;r++){var i=e[r];3<=(i=A(i,t,!0)).length&&n.push(i)}return 0<n.length?n:null}(f,s):f){for(var c=d.flatten(f),p=c.vertices,s=c.holes,f=c.dimensions,g=0;g<p.length;)p[g]=p[g++]*v[0]+a[0],p[g]=p[g++]*v[1]+a[1];if(!function(e,t){var n=e.length/2,r=0,i=t&&t.length?t[0]:n;0<q(e,r,i)&&V(e,2,r,i);for(var o=1;o<(t?t.length:0)+1;o++)q(e,r=t[o-1],i=t[o]||n)<0&&V(e,2,r,i)}(p,s),2!==f)throw new Error(\"Only 2D polygon points are supported\");c=0<t.bevelSize?P(p,s,t.bevelSize,null,!0):p,f=d(c,s,f=void 0===(f=f)?2:f);o.push({indices:f,vertices:p,topVertices:c,holes:s,rect:l,depth:\"function\"==typeof t.depth?t.depth(x):t.depth})}}}return k(o,t)}function _(e,t){t=Object.assign({},t);for(var n=[1/0,1/0],r=[-1/0,-1/0],i=0;i<e.length;i++)D(e[i],n,r);t.boundingRect=t.boundingRect||{x:n[0],y:n[1],width:r[0]-n[0],height:r[1]-n[1]},W(t);var o=t.scale||[1,1];null==t.lineWidth&&(t.lineWidth=1),null==t.miterLimit&&(t.miterLimit=2);for(var a=[],v=0;v<e.length;v++){var h=e[v],l=t.simplify/Math.max(o[0],o[1]);0<l&&(h=A(h,l,!0)),a.push(function(e,t,n){for(var r=n.lineWidth,i=e.length,o=new Float32Array(2*i),a=n.translate||[0,0],v=n.scale||[1,1],h=0,l=0;h<i;h++)o[l++]=e[h][0]*v[0]+a[0],o[l++]=e[h][1]*v[1]+a[1];q(o,0,i)<0&&V(o,2,0,i);var u=[],x=[],f=n.miterLimit,s=O(o,x,0,i,0,-r/2,f,!1);V(o,2,0,i);for(var c=O(o,u,0,i,0,-r/2,f,!1),r=(u.length+x.length)/2,p=new Float32Array(2*r),g=0,d=x.length/2,y=0;y<x.length;y++)p[g++]=x[y];for(var m=0;m<u.length;m++)p[g++]=u[m];for(var b=new(65535<r?Uint32Array:Uint16Array)(3*(2*(i-1)+(r-2*i))),M=0,w=0;w<i-1;w++){var Z=w+1;b[M++]=d-1-s[w],b[M++]=d-1-s[w]-1,b[M++]=c[w]+1+d,b[M++]=d-1-s[w],b[M++]=c[w]+1+d,b[M++]=c[w]+d,c[Z]-c[w]==2?(b[M++]=c[w]+2+d,b[M++]=c[w]+1+d,b[M++]=d-s[Z]-1):s[Z]-s[w]==2&&(b[M++]=c[Z]+d,b[M++]=d-1-(s[w]+1),b[M++]=d-1-(s[w]+2))}return f=0<n.bevelSize?P(p,[],n.bevelSize,null,!0):p,r=n.boundingRect,{vertices:p,indices:b,topVertices:f,rect:{x:r.x*v[0]+a[0],y:r.y*v[1]+a[1],width:r.width*v[0],height:r.height*v[1]},depth:\"function\"==typeof n.depth?n.depth(t):n.depth,holes:[]}}(h,v,t))}return k(a,t)}function D(e,t,n){for(var r=0;r<e.length;r++)t[0]=Math.min(e[r][0],t[0]),t[1]=Math.min(e[r][1],t[1]),n[0]=Math.max(e[r][0],n[0]),n[1]=Math.max(e[r][1],n[1])}function E(e){for(var t=new Float32Array(e),n=[],r=0,i=t.length;r<i;r+=2){var o=t[r],a=t[r+1];n.push([o,a])}return n}function C(e,t){void 0===t&&(t=!1);for(var n,r,i,o,a=e.length,v=[],h=[],l=[],u=0,x=0,f=0,s=0,c=0;c<a;c++){var p=t?(p=e[c],r=i=n=o=i=r=n=void 0,n=p.data,r=p.height,i=p.width,o=p.bottomHeight,p=_(n,{lineWidth:i,depth:r}),n=p.position,i=p.normal,r=p.uv,p=p.indices,G(n,o),{position:n,normal:i,uv:r,indices:p}):(d=e[c],b=m=y=b=g=m=y=void 0,y=d.data,m=d.height,g=d.bottomHeight,b=I(y,{depth:m}),d=b.position,y=b.normal,m=b.uv,b=b.indices,G(d,g),{position:d,normal:y,uv:m,indices:b}),g=e[c].bottomHeight||0,d=p.position,y=p.normal,m=p.uv,b=p.indices;h.push(p);b=b.length/3;l[c]=[u+1,u+b],u+=b;d=d.length/3,y=y.length/3,m=m.length/2;v[c]={position:{middleZ:g+(e[c].height||0)/2,count:d,start:x,end:x+3*d},normal:{count:y,start:f,end:f+3*y},uv:{count:m,start:s,end:s+2*m},hide:!1},x+=3*d,f+=3*y,s+=2*m}var M=function(e){for(var t={},n={},r=0;r<e.length;++r){var i,o=e[r];for(i in o)void 0===t[i]&&(t[i]=[],n[i]=0),t[i].push(o[i]),n[i]+=o[i].length}var a,v={},h=0,l=[];for(a in t)if(\"indices\"===a)for(var u=t[a],x=0,f=u.length;x<f;x++){for(var s=u[x],c=0,p=s.length;c<p;c++)l.push(s[c]+h);h+=t.position[x].length/3}else{var g=function(e,t){for(var n=new Float32Array(t),r=0,i=0;i<e.length;++i)n.set(e[i],r),r+=e[i].length;return n}(t[a],n[a]);if(!g)return null;v[a]=g}return v.indices=new Uint32Array(l),v}(h),w=M.position,Z=M.normal,S=M.uv,M=M.indices;return{position:w.buffer,normal:Z.buffer,uv:S.buffer,indices:M.buffer,faceMap:l,geometriesAttributes:v}}function G(e,t){if(void 0!==t&&\"number\"==typeof t&&0!==t)for(var n=0,r=e.length;n<r;n+=3)e[n+2]+=t}e.initialize=function(){},e.onmessage=function(e,t){var n=e.data,e=n.type,r=n.datas;if(\"Polygon\"===e){!function(e){for(var t=e.length,n=0;n<t;n++)for(var r=e[n].data,i=0,o=r.length;i<o;i++)for(var a=r[i],v=0,h=a.length;v<h;v++)e[n].data[i][v]=E(a[v])}(r);n=C(r);t(null,n,[n.position,n.normal,n.uv,n.indices])}else if(\"LineString\"===e){for(var i=0,o=r.length;i<o;i++)for(var a=0,v=r[i].data.length;a<v;a++)r[i].data[a]=E(r[i].data[a]);e=C(r,!0);t(null,e,[e.position,e.normal,e.uv,e.indices])}},Object.defineProperty(e,\"__esModule\",{value:!0})}`;\r\nconst workerName = '__maptalks.three__';\r\n\r\nexport function getWorkerName() {\r\n    return workerName;\r\n}\r\n\r\nexport function getWorkerCode() {\r\n    return workerCode;\r\n}\r\n","import * as maptalks from 'maptalks';\r\nimport * as THREE from 'three';\r\nimport BaseObject from './BaseObject';\r\nimport Bar from './Bar';\r\nimport Line from './Line';\r\nimport ExtrudeLine from './ExtrudeLine';\r\nimport ExtrudePolygon from './ExtrudePolygon';\r\nimport Model from './Model';\r\nimport ExtrudeLineTrail from './ExtrudeLineTrail';\r\nimport ExtrudePolygons from './ExtrudePolygons';\r\nimport Point from './Point';\r\nimport Points from './Points';\r\nimport Bars from './Bars';\r\nimport ExtrudeLines from './ExtrudeLines';\r\nimport Lines from './Lines';\r\nimport ThreeVectorTileLayer from './ThreeVectorTileLayer';\r\nimport Terrain from './Terrain';\r\nimport TerrainVectorTileLayer from './TerrainVectorTileLayer';\r\nimport HeatMap from './HeatMap';\r\nimport { setRaycasterLinePrecision } from './util/ThreeAdaptUtil';\r\nimport GPUPick from './GPUPick';\r\nimport FatLine from './FatLine';\r\nimport FatLines from './FatLines';\r\nimport Box from './Box';\r\nimport Boxs from './Boxs';\r\nimport MergedMixin from './MergedMixin';\r\nimport * as GeoJSONUtil from './util/GeoJSONUtil';\r\nimport * as GeoUtil from './util/GeoUtil';\r\nimport * as MergeGeometryUtil from './util/MergeGeometryUtil';\r\nimport * as ExtrudeUtil from './util/ExtrudeUtil';\r\nimport * as LineUtil from './util/LineUtil';\r\nimport * as IdentifyUtil from './util/IdentifyUtil';\r\nimport * as geometryExtrude from 'deyihu-geometry-extrude';\r\nimport LineMaterial from './util/fatline/LineMaterial';\r\nimport { BarOptionType, BaseLayerOptionType, BaseObjectOptionType, ExtrudeLineOptionType, ExtrudeLineTrailOptionType, ExtrudePolygonOptionType, FatLineMaterialType, getBaseObjectMaterialType, HeatMapDataType, HeatMapOptionType, LineMaterialType, LineOptionType, LineStringType, PointOptionType, PolygonType, SingleLineStringType, TerrainOptionType } from './type/index';\r\nimport { getWorkerCode, getWorkerName } from './worker/getworker';\r\n\r\n\r\nconst options: BaseLayerOptionType = {\r\n    'renderer': 'gl',\r\n    'doubleBuffer': false,\r\n    'glOptions': null,\r\n    'geometryEvents': true,\r\n    'identifyCountOnEvent': 0,\r\n    'forceRenderOnZooming': true,\r\n    'loopRenderCount': 50\r\n};\r\n\r\nconst RADIAN = Math.PI / 180;\r\n\r\nconst LINEPRECISIONS = [\r\n    [4000, 220],\r\n    [2000, 100],\r\n    [1000, 30],\r\n    [500, 15],\r\n    [100, 5],\r\n    [50, 2],\r\n    [10, 1],\r\n    [5, 0.7],\r\n    [2, 0.1],\r\n    [1, 0.05],\r\n    [0.5, 0.02]\r\n];\r\n\r\nconst EVENTS = [\r\n    'mousemove',\r\n    'click',\r\n    'mousedown',\r\n    'mouseup',\r\n    'dblclick',\r\n    'contextmenu',\r\n    'touchstart',\r\n    'touchmove',\r\n    'touchend'\r\n];\r\nconst TEMP_COORD = new maptalks.Coordinate(0, 0);\r\nconst TEMP_POINT = new maptalks.Point(0, 0);\r\n\r\n\r\n// const MATRIX4 = new THREE.Matrix4();\r\n\r\n/**\r\n * A Layer to render with THREE.JS (http://threejs.org), the most popular library for WebGL. <br>\r\n *\r\n * @classdesc\r\n * A layer to render with THREE.JS\r\n * @example\r\n *  var layer = new maptalks.ThreeLayer('three');\r\n *\r\n *  layer.prepareToDraw = function (gl, scene, camera) {\r\n *      var size = map.getSize();\r\n *      return [size.width, size.height]\r\n *  };\r\n *\r\n *  layer.draw = function (gl, view, scene, camera, width,height) {\r\n *      //...\r\n *  };\r\n *  layer.addTo(map);\r\n * @class\r\n * @category layer\r\n * @extends {maptalks.CanvasLayer}\r\n * @param {String|Number} id - layer's id\r\n * @param {Object} options - options defined in [options]{@link maptalks.ThreeLayer#options}\r\n */\r\nclass ThreeLayer extends maptalks.CanvasLayer {\r\n    options: BaseLayerOptionType;\r\n    map: maptalks.Map;\r\n    type: string;\r\n    _animationBaseObjectMap: { [key: string]: BaseObject } = {};\r\n    _needsUpdate: boolean = true;\r\n    _raycaster: THREE.Raycaster;\r\n    _mouse: THREE.Vector2;\r\n    _containerPoint: maptalks.Point;\r\n    _mousemoveTimeOut: number = 0;\r\n    _baseObjects: Array<BaseObject> = [];\r\n    _delayMeshes: Array<BaseObject> = [];\r\n\r\n    constructor(id: string, options: BaseLayerOptionType) {\r\n        super(id, options);\r\n        this.type = 'ThreeLayer';\r\n    }\r\n\r\n    isRendering(): boolean {\r\n        const map = this.getMap();\r\n        if (!map) {\r\n            return false;\r\n        }\r\n        return map.isInteracting() || map.isAnimating();\r\n    }\r\n\r\n    prepareToDraw(...args) {\r\n\r\n    }\r\n    /**\r\n     * Draw method of ThreeLayer\r\n     * In default, it calls renderScene, refresh the camera and the scene\r\n     */\r\n    draw() {\r\n        this.renderScene();\r\n    }\r\n\r\n    /**\r\n     * Draw method of ThreeLayer when map is interacting\r\n     * In default, it calls renderScene, refresh the camera and the scene\r\n     */\r\n    drawOnInteracting() {\r\n        this.renderScene();\r\n    }\r\n    /**\r\n     * Convert a geographic coordinate to THREE Vector3\r\n     * @param  {maptalks.Coordinate} coordinate - coordinate\r\n     * @param {Number} [z=0] z value\r\n     * @return {THREE.Vector3}\r\n     */\r\n    coordinateToVector3(coordinate: maptalks.Coordinate | Array<number>, z: number = 0): THREE.Vector3 {\r\n        const map = this.getMap();\r\n        if (!map) {\r\n            return null;\r\n        }\r\n        const isArray = Array.isArray(coordinate);\r\n        if (isArray) {\r\n            TEMP_COORD.x = coordinate[0];\r\n            TEMP_COORD.y = coordinate[1];\r\n        }\r\n        if (!isArray) {\r\n            if (!(coordinate instanceof maptalks.Coordinate)) {\r\n                coordinate = new maptalks.Coordinate(coordinate);\r\n            }\r\n        }\r\n        const res = getGLRes(map);\r\n        const p = coordinateToPoint(map, isArray ? TEMP_COORD : coordinate, res, TEMP_POINT);\r\n        return new THREE.Vector3(p.x, p.y, z);\r\n    }\r\n\r\n    /**\r\n     * Convert geographic distance to THREE Vector3\r\n     * @param  {Number} w - width\r\n     * @param  {Number} h - height\r\n     * @return {THREE.Vector3}\r\n     */\r\n    distanceToVector3(w: number, h: number, coord?: maptalks.Coordinate | Array<number>): THREE.Vector3 {\r\n        if ((w === 0 && h === 0) || (!maptalks.Util.isNumber(w) || !maptalks.Util.isNumber(h))) {\r\n            return new THREE.Vector3(0, 0, 0);\r\n        }\r\n        const map = this.getMap();\r\n        const res = getGLRes(map);\r\n        let center = coord || map.getCenter();\r\n        if (!(center instanceof maptalks.Coordinate)) {\r\n            center = new maptalks.Coordinate(center);\r\n        }\r\n        const target = map.locate(center, w, h);\r\n        const p0 = coordinateToPoint(map, center, res),\r\n            p1 = coordinateToPoint(map, target, res);\r\n        const x = Math.abs(p1.x - p0.x) * maptalks.Util.sign(w);\r\n        const y = Math.abs(p1.y - p0.y) * maptalks.Util.sign(h);\r\n        return new THREE.Vector3(x, y, 0);\r\n    }\r\n\r\n    /**\r\n     * Convert a Polygon or a MultiPolygon to THREE shape\r\n     * @param  {maptalks.Polygon|maptalks.MultiPolygon} polygon - polygon or multipolygon\r\n     * @return {THREE.Shape}\r\n     */\r\n    toShape(polygon: maptalks.Polygon | maptalks.MultiPolygon): THREE.Shape | Array<THREE.Shape> {\r\n        if (!polygon) {\r\n            return null;\r\n        }\r\n        if (polygon instanceof maptalks.MultiPolygon) {\r\n            return polygon.getGeometries().map(c => this.toShape(c) as any);\r\n        }\r\n        const center = polygon.getCenter();\r\n        const centerPt = this.coordinateToVector3(center);\r\n        const shell = polygon.getShell();\r\n        const outer = shell.map(c => {\r\n            const vector = this.coordinateToVector3(c).sub(centerPt);\r\n            return new THREE.Vector2(vector.x, vector.y);\r\n        });\r\n        const shape = new THREE.Shape(outer);\r\n        const holes = polygon.getHoles();\r\n\r\n        if (holes && holes.length > 0) {\r\n            shape.holes = holes.map(item => {\r\n                const pts = item.map(c => {\r\n                    const vector = this.coordinateToVector3(c).sub(centerPt);\r\n                    return new THREE.Vector2(vector.x, vector.y);\r\n                });\r\n                return new THREE.Shape(pts);\r\n            });\r\n        }\r\n\r\n        return shape;\r\n    }\r\n\r\n\r\n    /**\r\n     * todo   This should also be extracted as a component\r\n     * @param {*} polygon\r\n     * @param {*} altitude\r\n     * @param {*} material\r\n     * @param {*} height\r\n     */\r\n    toExtrudeMesh(polygon: maptalks.Polygon | maptalks.MultiPolygon, altitude: number, material: THREE.Material, height: number): THREE.Mesh | Array<THREE.Mesh> {\r\n        if (!polygon) {\r\n            return null;\r\n        }\r\n        if (polygon instanceof maptalks.MultiPolygon) {\r\n            return polygon.getGeometries().map(c => this.toExtrudeMesh(c, altitude, material, height) as any);\r\n        }\r\n        const rings = polygon.getCoordinates();\r\n        rings.forEach(ring => {\r\n            const length = ring.length;\r\n            for (let i = length - 1; i >= 1; i--) {\r\n                if (ring[i].equals(ring[i - 1])) {\r\n                    ring.splice(i, 1);\r\n                }\r\n            }\r\n        });\r\n        polygon.setCoordinates(rings);\r\n        const shape = this.toShape(polygon);\r\n        const center = this.coordinateToVector3(polygon.getCenter());\r\n        height = maptalks.Util.isNumber(height) ? height : altitude;\r\n        height = this.distanceToVector3(height, height).x;\r\n        const amount = this.distanceToVector3(altitude, altitude).x;\r\n        //{ amount: extrudeH, bevelEnabled: true, bevelSegments: 2, steps: 2, bevelSize: 1, bevelThickness: 1 };\r\n        const config: { [key: string]: any } = { 'bevelEnabled': false, 'bevelSize': 1 };\r\n        const name = parseInt(THREE.REVISION) >= 93 ? 'depth' : 'amount';\r\n        config[name] = height;\r\n        const geom = new THREE.ExtrudeGeometry(shape, config);\r\n        let buffGeom = geom as any;\r\n        if ((THREE.BufferGeometry.prototype as any).fromGeometry) {\r\n            buffGeom = new THREE.BufferGeometry();\r\n            buffGeom.fromGeometry(geom);\r\n        }\r\n        const mesh = new THREE.Mesh(buffGeom, material);\r\n        mesh.position.set(center.x, center.y, amount - height);\r\n        return mesh;\r\n    }\r\n\r\n\r\n    /**\r\n     *\r\n     * @param {maptalks.Polygon|maptalks.MultiPolygon} polygon\r\n     * @param {Object} options\r\n     * @param {THREE.Material} material\r\n     */\r\n    toExtrudePolygon(polygon: PolygonType, options: ExtrudePolygonOptionType, material: THREE.Material): ExtrudePolygon {\r\n        return new ExtrudePolygon(polygon, options, material, this);\r\n    }\r\n\r\n\r\n    /**\r\n     *\r\n     * @param {maptalks.Coordinate} coordinate\r\n     * @param {Object} options\r\n     * @param {THREE.Material} material\r\n     */\r\n    toBar(coordinate: maptalks.Coordinate, options: BarOptionType, material: THREE.Material): Bar {\r\n        return new Bar(coordinate, options, material, this);\r\n    }\r\n\r\n\r\n    /**\r\n    *\r\n    * @param {maptalks.LineString} lineString\r\n    * @param {Object} options\r\n    * @param {THREE.LineMaterial} material\r\n    */\r\n    toLine(lineString: LineStringType, options: LineOptionType, material: LineMaterialType): Line {\r\n        return new Line(lineString, options, material, this);\r\n    }\r\n\r\n\r\n    /**\r\n     *\r\n     * @param {maptalks.LineString} lineString\r\n     * @param {Object} options\r\n     * @param {THREE.Material} material\r\n     */\r\n    toExtrudeLine(lineString: LineStringType, options: ExtrudeLineOptionType, material: THREE.Material): ExtrudeLine {\r\n        return new ExtrudeLine(lineString, options, material, this);\r\n    }\r\n\r\n\r\n    /**\r\n     *\r\n     * @param {THREE.Mesh|THREE.Group} model\r\n     * @param {Object} options\r\n     */\r\n    toModel(model: THREE.Object3D, options: BaseObjectOptionType): Model {\r\n        return new Model(model, options, this);\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     *\r\n     * @param {maptalks.LineString} lineString\r\n     * @param {*} options\r\n     * @param {THREE.Material} material\r\n     */\r\n    toExtrudeLineTrail(lineString: SingleLineStringType, options: ExtrudeLineTrailOptionType, material: THREE.Material): ExtrudeLineTrail {\r\n        return new ExtrudeLineTrail(lineString, options, material, this);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {*} polygons\r\n     * @param {*} options\r\n     * @param {*} material\r\n     */\r\n    toExtrudePolygons(polygons: Array<PolygonType>, options: ExtrudePolygonOptionType, material: THREE.Material): ExtrudePolygons {\r\n        return new ExtrudePolygons(polygons, options, material, this);\r\n    }\r\n\r\n\r\n    /**\r\n     *\r\n     * @param {maptalks.Coordinate} coordinate\r\n     * @param {*} options\r\n     * @param {*} material\r\n     */\r\n    toPoint(coordinate: maptalks.Coordinate, options: PointOptionType, material: THREE.PointsMaterial): Point {\r\n        return new Point(coordinate, options, material, this);\r\n    }\r\n\r\n\r\n    /**\r\n     *\r\n     * @param {Array} points\r\n     * @param {*} options\r\n     * @param {*} material\r\n     */\r\n    toPoints(points: Array<PointOptionType>, options: PointOptionType, material: THREE.PointsMaterial): Points {\r\n        return new Points(points, options, material, this);\r\n    }\r\n\r\n\r\n    /**\r\n     *\r\n     * @param {Array} points\r\n     * @param {*} options\r\n     * @param {*} material\r\n     */\r\n    toBars(points: Array<BarOptionType>, options: BarOptionType, material: THREE.Material): Bars {\r\n        return new Bars(points, options, material, this);\r\n    }\r\n\r\n\r\n    /**\r\n     *\r\n     * @param {Array[maptalks.LineString]} lineStrings\r\n     * @param {*} options\r\n     * @param {*} material\r\n     */\r\n    toExtrudeLines(lineStrings: Array<LineStringType>, options: ExtrudeLineOptionType, material: THREE.Material): ExtrudeLines {\r\n        return new ExtrudeLines(lineStrings, options, material, this);\r\n    }\r\n\r\n\r\n    /**\r\n     *\r\n     * @param {Array[maptalks.LineString]} lineStrings\r\n     * @param {*} options\r\n     * @param {*} material\r\n     */\r\n    toLines(lineStrings: Array<LineStringType>, options: LineOptionType, material: LineMaterialType): Lines {\r\n        return new Lines(lineStrings, options, material, this);\r\n    }\r\n\r\n\r\n    /**\r\n     *\r\n     * @param {*} url\r\n     * @param {*} options\r\n     * @param {*} getMaterial\r\n     * @param {*} worker\r\n     */\r\n    toThreeVectorTileLayer(url: string, options: any, getMaterial: getBaseObjectMaterialType): ThreeVectorTileLayer {\r\n        return new ThreeVectorTileLayer(url, options, getMaterial, this);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {*} extent\r\n     * @param {*} options\r\n     * @param {*} material\r\n     */\r\n    toTerrain(extent: maptalks.Extent, options: TerrainOptionType, material: THREE.Material): Terrain {\r\n        return new Terrain(extent, options, material, this);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {*} url\r\n     * @param {*} options\r\n     * @param {*} material\r\n     */\r\n    toTerrainVectorTileLayer(url: string, options: any, material: THREE.Material): TerrainVectorTileLayer {\r\n        return new TerrainVectorTileLayer(url, options, material, this);\r\n    }\r\n\r\n\r\n    /**\r\n     *\r\n     * @param {*} data\r\n     * @param {*} options\r\n     * @param {*} material\r\n     */\r\n    toHeatMap(data: Array<HeatMapDataType>, options: HeatMapOptionType, material: THREE.Material): HeatMap {\r\n        return new HeatMap(data, options, material, this);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {*} lineString\r\n     * @param {*} options\r\n     * @param {*} material\r\n     */\r\n    toFatLine(lineString: LineStringType, options: LineOptionType, material: FatLineMaterialType): FatLine {\r\n        return new FatLine(lineString, options, material, this);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {*} lineStrings\r\n     * @param {*} options\r\n     * @param {*} material\r\n     */\r\n    toFatLines(lineStrings: Array<LineStringType>, options, material: FatLineMaterialType): FatLines {\r\n        return new FatLines(lineStrings, options, material, this);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {*} coorindate\r\n     * @param {*} options\r\n     * @param {*} material\r\n     */\r\n    toBox(coorindate: maptalks.Coordinate, options: BarOptionType, material: THREE.Material): Box {\r\n        return new Box(coorindate, options, material, this);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {*} points\r\n     * @param {*} options\r\n     * @param {*} material\r\n     */\r\n    toBoxs(points: Array<BarOptionType>, options: BarOptionType, material: THREE.Material): Boxs {\r\n        return new Boxs(points, options, material, this);\r\n    }\r\n\r\n\r\n    getBaseObjects(): Array<BaseObject> {\r\n        return this.getMeshes().filter((mesh => {\r\n            return mesh instanceof BaseObject;\r\n        })) as any;\r\n    }\r\n\r\n\r\n    getMeshes(): Array<THREE.Object3D | BaseObject> {\r\n        const scene = this.getScene();\r\n        if (!scene) {\r\n            return [];\r\n        }\r\n        const meshes = [];\r\n        for (let i = 0, len = scene.children.length; i < len; i++) {\r\n            const child = scene.children[i];\r\n            if (child instanceof THREE.Object3D && !(child instanceof THREE.Camera)) {\r\n                meshes.push(child['__parent'] || child);\r\n            }\r\n        }\r\n        return meshes;\r\n    }\r\n\r\n\r\n    clear() {\r\n        return this.clearMesh();\r\n    }\r\n\r\n    clearMesh() {\r\n        const scene = this.getScene();\r\n        if (!scene) {\r\n            return this;\r\n        }\r\n        for (let i = scene.children.length - 1; i >= 0; i--) {\r\n            const child = scene.children[i];\r\n            if (child instanceof THREE.Object3D && !(child instanceof THREE.Camera)) {\r\n                scene.remove(child);\r\n                const parent = child['__parent'];\r\n                if (parent && parent instanceof BaseObject) {\r\n                    parent.isAdd = false;\r\n                    parent._fire('remove', { target: parent });\r\n                    delete this._animationBaseObjectMap[child.uuid];\r\n                }\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    lookAt(vector: THREE.Vector3) {\r\n        const renderer = this._getRenderer();\r\n        if (renderer) {\r\n            renderer.context.lookAt(vector);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    getCamera(): THREE.Camera {\r\n        const renderer = this._getRenderer();\r\n        if (renderer) {\r\n            return renderer.camera;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    getScene(): THREE.Scene {\r\n        const renderer = this._getRenderer();\r\n        if (renderer) {\r\n            return renderer.scene;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    renderScene() {\r\n        const renderer = this._getRenderer();\r\n        if (renderer) {\r\n            renderer.clearCanvas();\r\n            renderer.renderScene();\r\n        }\r\n        return this;\r\n    }\r\n\r\n    loop(render: boolean = false) {\r\n        const delayMeshes = this._delayMeshes;\r\n        if (!delayMeshes.length) {\r\n            return;\r\n        }\r\n        const map = this.getMap();\r\n        if (!map || map.isAnimating() || map.isInteracting()) {\r\n            return;\r\n        }\r\n        const loopRenderCount = this.options.loopRenderCount || 50;\r\n        const meshes = delayMeshes.slice(0, loopRenderCount);\r\n        if (meshes) {\r\n            this.addMesh(meshes, render);\r\n        }\r\n        delayMeshes.splice(0, loopRenderCount);\r\n    }\r\n\r\n    renderPickScene() {\r\n        const renderer = this._getRenderer();\r\n        if (renderer) {\r\n            const pick = renderer.pick;\r\n            if (pick) {\r\n                pick.pick(this._containerPoint);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    getThreeRenderer(): THREE.WebGLRenderer {\r\n        const renderer = this._getRenderer();\r\n        if (renderer) {\r\n            return renderer.context;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    getPick(): GPUPick {\r\n        const renderer = this._getRenderer();\r\n        if (renderer) {\r\n            return renderer.pick;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    delayAddMesh(meshes: Array<BaseObject>) {\r\n        if (!meshes) return this;\r\n        if (!Array.isArray(meshes)) {\r\n            meshes = [meshes];\r\n        }\r\n        for (let i = 0, len = meshes.length; i < len; i++) {\r\n            this._delayMeshes.push(meshes[i]);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * add object3ds\r\n     * @param {BaseObject} meshes\r\n     */\r\n    addMesh(meshes: Array<BaseObject | THREE.Object3D>, render: boolean = true) {\r\n        if (!meshes) return this;\r\n        if (!Array.isArray(meshes)) {\r\n            meshes = [meshes];\r\n        }\r\n        const scene = this.getScene();\r\n        meshes.forEach(mesh => {\r\n            if (mesh instanceof BaseObject) {\r\n                scene.add(mesh.getObject3d());\r\n                if (!mesh.isAdd) {\r\n                    mesh.isAdd = true;\r\n                    mesh._fire('add', { target: mesh });\r\n                }\r\n                if (mesh._animation && maptalks.Util.isFunction(mesh._animation)) {\r\n                    this._animationBaseObjectMap[mesh.getObject3d().uuid] = mesh;\r\n                }\r\n            } else if (mesh instanceof THREE.Object3D) {\r\n                scene.add(mesh);\r\n            }\r\n        });\r\n        this._zoomend();\r\n        if (render) {\r\n            this.renderScene();\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * remove object3ds\r\n     * @param {BaseObject} meshes\r\n     */\r\n    removeMesh(meshes: Array<BaseObject | THREE.Object3D>, render: boolean = true) {\r\n        if (!meshes) return this;\r\n        if (!Array.isArray(meshes)) {\r\n            meshes = [meshes];\r\n        }\r\n        const scene = this.getScene();\r\n        meshes.forEach(mesh => {\r\n            if (mesh instanceof BaseObject) {\r\n                scene.remove(mesh.getObject3d());\r\n                if (mesh.isAdd) {\r\n                    mesh.isAdd = false;\r\n                    mesh._fire('remove', { target: mesh });\r\n                }\r\n                if (mesh._animation && maptalks.Util.isFunction(mesh._animation)) {\r\n                    delete this._animationBaseObjectMap[mesh.getObject3d().uuid];\r\n                }\r\n                const delayMeshes = this._delayMeshes;\r\n                if (delayMeshes.length) {\r\n                    for (let i = 0, len = delayMeshes.length; i < len; i++) {\r\n                        if (delayMeshes[i] === mesh) {\r\n                            delayMeshes.splice(i, 1);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            } else if (mesh instanceof THREE.Object3D) {\r\n                scene.remove(mesh);\r\n            }\r\n        });\r\n        if (render) {\r\n            this.renderScene();\r\n        }\r\n        return this;\r\n    }\r\n\r\n    _initRaycaster() {\r\n        if (!this._raycaster) {\r\n            this._raycaster = new THREE.Raycaster();\r\n            this._mouse = new THREE.Vector2();\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {Coordinate} coordinate\r\n     * @param {Object} options\r\n     * @return {Array}\r\n     */\r\n    identify(coordinate: maptalks.Coordinate, options: object): Array<BaseObject | THREE.Object3D> {\r\n        if (!coordinate) {\r\n            console.error('coordinate is null,it should be Coordinate');\r\n            return [];\r\n        }\r\n        if (Array.isArray(coordinate)) {\r\n            coordinate = new maptalks.Coordinate(coordinate);\r\n        }\r\n        if (!(coordinate instanceof maptalks.Coordinate)) {\r\n            console.error('coordinate type is error,it should be Coordinate');\r\n            return [];\r\n        }\r\n        const p = this.getMap().coordToContainerPoint(coordinate);\r\n        this._containerPoint = p;\r\n        const { x, y } = p;\r\n        this._initRaycaster();\r\n        const raycaster = this._raycaster,\r\n            mouse = this._mouse,\r\n            camera = this.getCamera(),\r\n            scene = this.getScene(),\r\n            size = this.getMap().getSize();\r\n        //fix Errors will be reported when the layer is not initialized\r\n        if (!scene) {\r\n            return [];\r\n        }\r\n        const width = size.width,\r\n            height = size.height;\r\n        mouse.x = (x / width) * 2 - 1;\r\n        mouse.y = -(y / height) * 2 + 1;\r\n        raycaster.setFromCamera(mouse, camera);\r\n        //set linePrecision for THREE.Line\r\n        setRaycasterLinePrecision(raycaster, this._getLinePrecision(this.getMap().getResolution()));\r\n        const children: Array<THREE.Object3D> = [], hasidentifyChildren: Array<BaseObject> = [];\r\n        scene.children.forEach(mesh => {\r\n            const parent = mesh['__parent'];\r\n            if (parent && parent.getOptions) {\r\n                const baseObject = parent as BaseObject;\r\n                const interactive = baseObject.getOptions().interactive;\r\n                if (interactive && baseObject.isVisible()) {\r\n                    //If baseobject has its own hit detection\r\n                    if (baseObject.identify && maptalks.Util.isFunction(baseObject.identify)) {\r\n                        hasidentifyChildren.push(baseObject);\r\n                    } else {\r\n                        children.push(mesh);\r\n                    }\r\n                }\r\n            } else if (mesh instanceof THREE.Mesh || mesh instanceof THREE.Group) {\r\n                children.push(mesh);\r\n            }\r\n        });\r\n        let baseObjects: Array<THREE.Object3D | BaseObject> = [];\r\n        const intersects = raycaster.intersectObjects(children, true);\r\n        if (intersects && Array.isArray(intersects) && intersects.length) {\r\n            baseObjects = intersects.map(intersect => {\r\n                let object: any = intersect.object;\r\n                object = this._recursionMesh(object) || {};\r\n                const baseObject = object['__parent'] || object;\r\n                baseObject.faceIndex = intersect.faceIndex;\r\n                baseObject.index = intersect.index;\r\n                return baseObject;\r\n            });\r\n        }\r\n        this.renderPickScene();\r\n        if (hasidentifyChildren.length) {\r\n            hasidentifyChildren.forEach(baseObject => {\r\n                // baseObject identify\r\n                if (baseObject.identify(coordinate)) {\r\n                    baseObjects.push(baseObject);\r\n                }\r\n            });\r\n        }\r\n        const len = baseObjects.length;\r\n        for (let i = 0; i < len; i++) {\r\n            if (baseObjects[i]) {\r\n                for (let j = i + 1; j < len; j++) {\r\n                    if (baseObjects[i] === baseObjects[j]) {\r\n                        baseObjects.splice(j, 1);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        options = maptalks.Util.extend({}, options);\r\n        const count = options['count'];\r\n        return (maptalks.Util.isNumber(count) && count > 0 ? baseObjects.slice(0, count) : baseObjects);\r\n    }\r\n\r\n    /**\r\n    * Recursively finding the root node of mesh,Until it is scene node\r\n    * @param {*} mesh\r\n    */\r\n    _recursionMesh(mesh: THREE.Object3D): THREE.Object3D {\r\n        while (mesh && ((mesh.parent !== this.getScene()))) {\r\n            mesh = mesh.parent;\r\n        }\r\n        return mesh;\r\n    }\r\n\r\n    //get Line Precision by Resolution\r\n    _getLinePrecision(res = 10): number {\r\n        for (let i = 0, len = LINEPRECISIONS.length; i < len; i++) {\r\n            const [resLevel, precision] = LINEPRECISIONS[i];\r\n            if (res > resLevel) {\r\n                return precision;\r\n            }\r\n        }\r\n        return 0.01;\r\n    }\r\n\r\n    /**\r\n     * fire baseObject events\r\n     * @param {*} e\r\n     */\r\n    _identifyBaseObjectEvents(e: any) {\r\n        if (!this.options.geometryEvents) {\r\n            return this;\r\n        }\r\n        const map = this.map || this.getMap();\r\n        //When map interaction, do not carry out mouse movement detection, which can have better performance\r\n        if (map.isInteracting() || !map.options.geometryEvents) {\r\n            return this;\r\n        }\r\n        const { type, coordinate } = e;\r\n        const now = maptalks.Util.now();\r\n        if (this._mousemoveTimeOut && type === 'mousemove') {\r\n            if (now - this._mousemoveTimeOut < 64) {\r\n                return this;\r\n            }\r\n        }\r\n        this._mousemoveTimeOut = now;\r\n        map.resetCursor('default');\r\n        const identifyCountOnEvent = this.options['identifyCountOnEvent'];\r\n        let count = Math.max(0, maptalks.Util.isNumber(identifyCountOnEvent) ? identifyCountOnEvent : 0);\r\n        if (count === 0) {\r\n            count = Infinity;\r\n        }\r\n        const baseObjects = this.identify(coordinate, { count });\r\n        const scene = this.getScene();\r\n        if (baseObjects.length === 0 && scene) {\r\n            for (let i = 0, len = scene.children.length; i < len; i++) {\r\n                const child = scene.children[i] || {};\r\n                const parent = child['__parent'];\r\n                if (parent) {\r\n                    (parent as BaseObject).fire('empty', Object.assign({}, e, { target: parent }));\r\n                }\r\n            }\r\n        }\r\n        if (type === 'mousemove') {\r\n            if (baseObjects.length) {\r\n                map.setCursor('pointer');\r\n            }\r\n            // mouseout objects\r\n            const outBaseObjects: Array<THREE.Object3D | BaseObject> = [];\r\n            if (this._baseObjects) {\r\n                this._baseObjects.forEach(baseObject => {\r\n                    let isOut = true;\r\n                    baseObjects.forEach(baseO => {\r\n                        if (baseObject === baseO) {\r\n                            isOut = false;\r\n                        }\r\n                    });\r\n                    if (isOut) {\r\n                        outBaseObjects.push(baseObject);\r\n                    }\r\n                });\r\n            }\r\n            outBaseObjects.forEach(baseObject => {\r\n                if (baseObject && baseObject instanceof BaseObject) {\r\n                    // reset _mouseover status\r\n                    // Deal with the mergedmesh\r\n                    if (baseObject.getSelectMesh) {\r\n                        if (!baseObject.isHide) {\r\n                            baseObject._mouseover = false;\r\n                            baseObject.fire('mouseout', Object.assign({}, e, { target: baseObject, type: 'mouseout', selectMesh: null }));\r\n                            baseObject.closeToolTip();\r\n                        }\r\n                    } else {\r\n                        baseObject._mouseover = false;\r\n                        baseObject.fire('mouseout', Object.assign({}, e, { target: baseObject, type: 'mouseout' }));\r\n                        baseObject.closeToolTip();\r\n                    }\r\n                }\r\n            });\r\n            baseObjects.forEach(baseObject => {\r\n                if (baseObject instanceof BaseObject) {\r\n                    if (!baseObject._mouseover) {\r\n                        baseObject.fire('mouseover', Object.assign({}, e, { target: baseObject, type: 'mouseover', selectMesh: (baseObject.getSelectMesh ? baseObject.getSelectMesh() : null) }));\r\n                        baseObject._mouseover = true;\r\n                    }\r\n                    baseObject.fire(type, Object.assign({}, e, { target: baseObject, selectMesh: (baseObject.getSelectMesh ? baseObject.getSelectMesh() : null) }));\r\n                    // tooltip\r\n                    const tooltip = baseObject.getToolTip();\r\n                    if (tooltip && (!tooltip._owner)) {\r\n                        tooltip.addTo(baseObject);\r\n                    }\r\n                    baseObject.openToolTip(coordinate);\r\n                }\r\n            });\r\n            this._baseObjects = baseObjects as any;\r\n        } else {\r\n            baseObjects.forEach(baseObject => {\r\n                if (baseObject instanceof BaseObject) {\r\n                    baseObject.fire(type, Object.assign({}, e, { target: baseObject, selectMesh: (baseObject.getSelectMesh ? baseObject.getSelectMesh() : null) }));\r\n                    if (type === 'click') {\r\n                        const infoWindow = baseObject.getInfoWindow();\r\n                        if (infoWindow && (!infoWindow._owner)) {\r\n                            infoWindow.addTo(baseObject);\r\n                        }\r\n                        baseObject.openInfoWindow(coordinate);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     *map zoom event\r\n     */\r\n    _zoomend() {\r\n        const scene = this.getScene();\r\n        if (!scene) {\r\n            return;\r\n        }\r\n        const zoom = this.getMap().getZoom();\r\n        scene.children.forEach(mesh => {\r\n            const parent = mesh['__parent'];\r\n            if (parent && parent.getOptions) {\r\n                const baseObject = parent as BaseObject;\r\n                if (baseObject.zoomChange && maptalks.Util.isFunction(baseObject.zoomChange)) {\r\n                    baseObject.zoomChange(zoom);\r\n                }\r\n                const minZoom = baseObject.getMinZoom(), maxZoom = baseObject.getMaxZoom();\r\n                if (zoom < minZoom || zoom > maxZoom) {\r\n                    if (baseObject.isVisible()) {\r\n                        baseObject.getObject3d().visible = false;\r\n                    }\r\n                    baseObject._zoomVisible = false;\r\n                } else if (minZoom <= zoom && zoom <= maxZoom) {\r\n                    if (baseObject._visible) {\r\n                        baseObject.getObject3d().visible = true;\r\n                    }\r\n                    baseObject._zoomVisible = true;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    onAdd() {\r\n        super.onAdd();\r\n        const map = this.map || this.getMap();\r\n        if (!map) return this;\r\n        EVENTS.forEach(event => {\r\n            map.on(event, this._identifyBaseObjectEvents, this);\r\n        });\r\n        this._needsUpdate = true;\r\n        if (!this._animationBaseObjectMap) {\r\n            this._animationBaseObjectMap = {};\r\n        }\r\n        map.on('zooming zoomend', this._zoomend, this);\r\n        return this;\r\n    }\r\n\r\n    onRemove() {\r\n        super.onRemove();\r\n        const map = this.map || this.getMap();\r\n        if (!map) return this;\r\n        EVENTS.forEach(event => {\r\n            map.off(event, this._identifyBaseObjectEvents, this);\r\n        });\r\n        map.off('zooming zoomend', this._zoomend, this);\r\n        return this;\r\n    }\r\n\r\n    _callbackBaseObjectAnimation() {\r\n        const layer = this;\r\n        if (layer._animationBaseObjectMap) {\r\n            for (const uuid in layer._animationBaseObjectMap) {\r\n                const baseObject = layer._animationBaseObjectMap[uuid];\r\n                baseObject._animation();\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * To make map's 2d point's 1 pixel euqal with 1 pixel on XY plane in THREE's scene:\r\n     * 1. fov is 90 and camera's z is height / 2 * scale,\r\n     * 2. if fov is not 90, a ratio is caculated to transfer z to the equivalent when fov is 90\r\n     * @return {Number} fov ratio on z axis\r\n     */\r\n    _getFovRatio(): number {\r\n        const map = this.getMap();\r\n        const fov = map.getFov();\r\n        return Math.tan(fov / 2 * RADIAN);\r\n    }\r\n}\r\n\r\nThreeLayer.mergeOptions(options);\r\n\r\nclass ThreeRenderer extends maptalks.renderer.CanvasLayerRenderer {\r\n    scene: THREE.Scene;\r\n    camera: THREE.Camera;\r\n    canvas: any\r\n    layer: ThreeLayer;\r\n    gl: any\r\n    context: THREE.WebGLRenderer;\r\n    matrix4: THREE.Matrix4;\r\n    pick: GPUPick;\r\n    _renderTime: number = 0;\r\n\r\n    getPrepareParams(): Array<any> {\r\n        return [this.scene, this.camera];\r\n    }\r\n\r\n    getDrawParams(): Array<any> {\r\n        return [this.scene, this.camera];\r\n    }\r\n\r\n    _drawLayer() {\r\n        super._drawLayer.apply(this, arguments);\r\n        // this.renderScene();\r\n    }\r\n\r\n    hitDetect(): boolean {\r\n        return false;\r\n    }\r\n\r\n    createCanvas() {\r\n        super.createCanvas();\r\n        this.createContext();\r\n    }\r\n\r\n    createContext() {\r\n        if (this.canvas.gl && this.canvas.gl.wrap) {\r\n            this.gl = this.canvas.gl.wrap();\r\n        } else {\r\n            const layer = this.layer;\r\n            const attributes = layer.options.glOptions || {\r\n                alpha: true,\r\n                depth: true,\r\n                antialias: true,\r\n                stencil: true,\r\n                preserveDrawingBuffer: false\r\n            };\r\n            attributes.preserveDrawingBuffer = true;\r\n            this.gl = this.gl || this._createGLContext(this.canvas, attributes);\r\n        }\r\n        this._initThreeRenderer();\r\n        this.layer.onCanvasCreate(this.context, this.scene, this.camera);\r\n    }\r\n\r\n    _initThreeRenderer() {\r\n        this.matrix4 = new THREE.Matrix4();\r\n        const renderer = new THREE.WebGLRenderer({ 'context': this.gl, alpha: true });\r\n        renderer.autoClear = false;\r\n        renderer.setClearColor(new THREE.Color(1, 1, 1), 0);\r\n        renderer.setSize(this.canvas.width, this.canvas.height);\r\n        renderer.clear();\r\n        // renderer.canvas = this.canvas;\r\n        this.context = renderer;\r\n\r\n        const scene = this.scene = new THREE.Scene();\r\n        const map = this.layer.getMap();\r\n        const fov = map.getFov() * Math.PI / 180;\r\n        const camera = this.camera = new THREE.PerspectiveCamera(fov, map.width / map.height, map.cameraNear, map.cameraFar);\r\n        camera.matrixAutoUpdate = false;\r\n        this._syncCamera();\r\n        scene.add(camera);\r\n        this.pick = new GPUPick(this.layer);\r\n    }\r\n\r\n    onCanvasCreate() {\r\n        super.onCanvasCreate();\r\n\r\n    }\r\n\r\n    resizeCanvas(canvasSize: maptalks.Size) {\r\n        if (!this.canvas) {\r\n            return;\r\n        }\r\n        let size, map = this.getMap();\r\n        if (!canvasSize) {\r\n            size = map.getSize();\r\n        } else {\r\n            size = canvasSize;\r\n        }\r\n        // const r = maptalks.Browser.retina ? 2 : 1;\r\n        const r = map.getDevicePixelRatio ? map.getDevicePixelRatio() : (maptalks.Browser.retina ? 2 : 1);\r\n        const canvas = this.canvas;\r\n        //retina support\r\n        canvas.height = r * size['height'];\r\n        canvas.width = r * size['width'];\r\n        if (this.layer._canvas && canvas.style) {\r\n            canvas.style.width = size.width + 'px';\r\n            canvas.style.height = size.height + 'px';\r\n        }\r\n        this.context.setSize(canvas.width, canvas.height);\r\n    }\r\n\r\n    clearCanvas() {\r\n        if (!this.canvas) {\r\n            return;\r\n        }\r\n\r\n        this.context.clear();\r\n    }\r\n\r\n    prepareCanvas(): any {\r\n        if (!this.canvas) {\r\n            this.createCanvas();\r\n        } else {\r\n            this.clearCanvas();\r\n        }\r\n        this.layer.fire('renderstart', { 'context': this.context });\r\n        return null;\r\n    }\r\n\r\n    renderScene() {\r\n        const time = maptalks.Util.now();\r\n        // Make sure to execute only once in a frame\r\n        if (time - this._renderTime >= 16) {\r\n            this.layer._callbackBaseObjectAnimation();\r\n            this._renderTime = time;\r\n        }\r\n        this._syncCamera();\r\n        this.context.render(this.scene, this.camera);\r\n        this.completeRender();\r\n    }\r\n\r\n    remove() {\r\n        delete this._drawContext;\r\n        super.remove();\r\n    }\r\n\r\n    _syncCamera() {\r\n        const map = this.getMap();\r\n        const camera = this.camera;\r\n        camera.matrix.elements = map.cameraWorldMatrix;\r\n        camera.projectionMatrix.elements = map.projMatrix;\r\n        //https://github.com/mrdoob/three.js/commit/d52afdd2ceafd690ac9e20917d0c968ff2fa7661\r\n        if (this.matrix4.invert) {\r\n            camera.projectionMatrixInverse.elements = this.matrix4.copy(camera.projectionMatrix).invert().elements;\r\n        } else {\r\n            camera.projectionMatrixInverse.elements = this.matrix4.getInverse(camera.projectionMatrix).elements;\r\n        }\r\n    }\r\n\r\n    _createGLContext(canvas: HTMLCanvasElement, options: object) {\r\n        const names = ['webgl2', 'webgl', 'experimental-webgl'];\r\n        let context = null;\r\n        /* eslint-disable no-empty */\r\n        for (let i = 0; i < names.length; ++i) {\r\n            try {\r\n                context = canvas.getContext(names[i], options);\r\n            } catch (e) { }\r\n            if (context) {\r\n                break;\r\n            }\r\n        }\r\n        return context;\r\n        /* eslint-enable no-empty */\r\n    }\r\n}\r\n\r\nThreeLayer.registerRenderer('gl', ThreeRenderer);\r\n\r\nfunction getGLRes(map: maptalks.Map) {\r\n    return map.getGLRes ? map.getGLRes() : map.getGLZoom();\r\n}\r\n\r\nfunction coordinateToPoint(map, coordinate, res, out?: any) {\r\n    if (map.coordToPointAtRes) {\r\n        return map.coordToPointAtRes(coordinate, res, out);\r\n    }\r\n    return map.coordinateToPoint(coordinate, res, out);\r\n}\r\n\r\nexport {\r\n    ThreeLayer, ThreeRenderer, BaseObject,\r\n    MergedMixin,\r\n    GeoJSONUtil, MergeGeometryUtil, GeoUtil, ExtrudeUtil, LineUtil,\r\n    IdentifyUtil, geometryExtrude,\r\n    LineMaterial\r\n};\r\n\r\nif (maptalks.registerWorkerAdapter) {\r\n    maptalks.registerWorkerAdapter(getWorkerName(), getWorkerCode());\r\n}\r\n"],"names":["THREE.REVISION","THREE.VertexColors","THREE.InstancedBufferGeometry","THREE.Float32BufferAttribute","THREE.InstancedInterleavedBuffer","THREE.InterleavedBufferAttribute","THREE.WireframeGeometry","THREE.Box3","THREE.Vector3","THREE.Sphere","THREE.Vector2","THREE.UniformsUtils","THREE.UniformsLib","THREE.ShaderMaterial","THREE.Mesh","maptalks.Eventable","maptalks.Util","maptalks.Coordinate","THREE.Material","maptalks.ui","maptalks.animation","THREE.Group","THREE.Line","THREE.Points","THREE.LineSegments","THREE.BufferGeometry","THREE.BufferAttribute","THREE.BoxBufferGeometry","THREE.Color","THREE.CylinderBufferGeometry","OPTIONS","area","earcut","doSimplify","maptalks.LineString","maptalks.MultiLineString","topColor","bottomColor","THREE.Uint32BufferAttribute","initVertexColors","maptalks.MultiPolygon","maptalks.Polygon","THREE.MeshBasicMaterial","maptalks.worker","vector","maptalks.TileLayer","maptalks.Ajax","maptalks.Extent","THREE.LineBasicMaterial","THREE.LineDashedMaterial","THREE.PointsMaterial","THREE.TextureLoader","canvas","generateImage","THREE.WebGLRenderTarget","THREE.Scene","workerName","getWorkerName","EVENTS","TEMP_COORD","maptalks.Point","maptalks.CanvasLayer","THREE.Shape","THREE.ExtrudeGeometry","THREE.Object3D","THREE.Camera","THREE.Raycaster","maptalks.renderer","THREE.Matrix4","THREE.WebGLRenderer","THREE.PerspectiveCamera","maptalks.Browser","maptalks.registerWorkerAdapter"],"mappings":"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"}