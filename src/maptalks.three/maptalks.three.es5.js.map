{"version":3,"file":"maptalks.three.es5.js","sources":["../src/util/ThreeAdaptUtil.ts","../src/util/fatline/LineSegmentsGeometry.ts","../src/util/fatline/LineMaterial.ts","../src/util/fatline/LineSegments2.ts","../src/util/fatline/LineGeometry.ts","../src/util/fatline/Line2.ts","../src/BaseObject.ts","../src/util/MergeGeometryUtil.ts","../src/util/BarUtil.ts","../src/Bar.ts","../src/util/index.ts","../node_modules/earcut/src/earcut.js","../node_modules/deyihu-geometry-extrude/src/simplify.js","../node_modules/deyihu-geometry-extrude/src/math.js","../node_modules/deyihu-geometry-extrude/src/main.js","../src/util/GeoJSONUtil.ts","../src/util/LineUtil.ts","../src/Line.ts","../src/util/ExtrudeUtil.ts","../src/ExtrudeLine.ts","../src/ExtrudePolygon.ts","../src/Model.ts","../src/util/GeoUtil.ts","../src/ExtrudeLineTrail.ts","../src/MergedMixin.ts","../src/worker/worker.ts","../src/worker/MeshActor.ts","../src/ExtrudePolygons.ts","../src/util/IdentifyUtil.ts","../src/Point.ts","../src/util/BBox.ts","../src/Points.ts","../src/Bars.ts","../src/ExtrudeLines.ts","../src/Lines.ts","../src/queue/TileDataQueue.ts","../src/util/CanvasUtil.ts","../src/BaseVectorTileLayer.ts","../src/ThreeVectorTileLayer.ts","../src/util/GeometryUtil.ts","../src/Terrain.ts","../src/TerrainVectorTileLayer.ts","../src/util/heatmap/Intensity.ts","../src/util/heatmap/HeatMapUtil.ts","../src/HeatMap.ts","../src/GPUPick.ts","../src/FatLine.ts","../src/FatLines.ts","../src/Box.ts","../src/Boxs.ts","../src/worker/getworker.ts","../src/index.ts"],"sourcesContent":["\r\nimport * as THREE from 'three';\r\n\r\n/**\r\n * three api adapt\r\n */\r\nconst REVISION = parseInt(THREE.REVISION.replace('dev', ''));\r\n//Three does not print version information now. Output the version of three to find compatibility problems\r\nconsole.log(`maptalks.three log: current three.js version is %c${REVISION}`, 'color:red;font-size: 16px;font-weight: bold;');\r\n/**\r\n *\r\n * @param {THREE.BufferGeometry} bufferGeomertry\r\n * @param {String} key\r\n * @param {*} value\r\n */\r\nexport function addAttribute(bufferGeomertry: THREE.BufferGeometry, key: string, value: THREE.BufferAttribute | THREE.InterleavedBufferAttribute): THREE.BufferGeometry {\r\n    if (REVISION > 109) {\r\n        bufferGeomertry.setAttribute(key, value);\r\n    } else {\r\n        bufferGeomertry.addAttribute(key, value);\r\n    }\r\n    return bufferGeomertry;\r\n}\r\n\r\nexport function setRaycasterLinePrecision(raycaster: THREE.Raycaster, linePrecision: number): void {\r\n    if (REVISION > 113) {\r\n        raycaster.params.Line.threshold = linePrecision;\r\n    } else {\r\n        (raycaster as any).linePrecision = linePrecision;\r\n    }\r\n}\r\n\r\nexport function getVertexColors(): number | boolean {\r\n    if ((THREE as any).VertexColors) {\r\n        return (THREE as any).VertexColors;\r\n    }\r\n    return true;\r\n\r\n}\r\n","/**\r\n * @author WestLangley / http://github.com/WestLangley\r\n *\r\n */\r\nimport * as THREE from 'three';\r\nimport { addAttribute } from '../ThreeAdaptUtil';\r\n\r\nclass LineSegmentsGeometry extends THREE.InstancedBufferGeometry {\r\n    isLineSegmentsGeometry: boolean = true;\r\n    constructor() {\r\n        super();\r\n        this.type = 'LineSegmentsGeometry';\r\n        var positions = [-1, 2, 0, 1, 2, 0, -1, 1, 0, 1, 1, 0, -1, 0, 0, 1, 0, 0, -1, -1, 0, 1, -1, 0];\r\n        var uvs = [-1, 2, 1, 2, -1, 1, 1, 1, -1, -1, 1, -1, -1, -2, 1, -2];\r\n        var index = [0, 2, 1, 2, 3, 1, 2, 4, 3, 4, 5, 3, 4, 6, 5, 6, 7, 5];\r\n\r\n        this.setIndex(index);\r\n        addAttribute(this, 'position', new THREE.Float32BufferAttribute(positions, 3));\r\n        addAttribute(this, 'uv', new THREE.Float32BufferAttribute(uvs, 2));\r\n    }\r\n\r\n    // THREE.InstancedBufferGeometry.call(this);\r\n\r\n\r\n    // var plane = new THREE.BufferGeometry();\r\n\r\n    // this.addAttribute('position', new THREE.Float32BufferAttribute(positions, 3));\r\n    // this.addAttribute('uv', new THREE.Float32BufferAttribute(uvs, 2));\r\n\r\n    applyMatrix(matrix) {\r\n\r\n        var start = this.attributes.instanceStart;\r\n        var end = this.attributes.instanceEnd;\r\n\r\n        if (start !== undefined) {\r\n\r\n            matrix.applyToBufferAttribute(start);\r\n\r\n            matrix.applyToBufferAttribute(end);\r\n\r\n            (start as any).data.needsUpdate = true;\r\n\r\n        }\r\n\r\n        if (this.boundingBox !== null) {\r\n\r\n            this.computeBoundingBox();\r\n\r\n        }\r\n\r\n        if (this.boundingSphere !== null) {\r\n\r\n            this.computeBoundingSphere();\r\n\r\n        }\r\n\r\n        return this;\r\n\r\n    }\r\n\r\n    setPositions(array) {\r\n\r\n        var lineSegments;\r\n\r\n        if (array instanceof Float32Array) {\r\n\r\n            lineSegments = array;\r\n\r\n        } else if (Array.isArray(array)) {\r\n\r\n            lineSegments = new Float32Array(array);\r\n\r\n        }\r\n\r\n        var instanceBuffer = new THREE.InstancedInterleavedBuffer(lineSegments, 6, 1); // xyz, xyz\r\n\r\n        addAttribute(this, 'instanceStart', new THREE.InterleavedBufferAttribute(instanceBuffer, 3, 0));\r\n        addAttribute(this, 'instanceEnd', new THREE.InterleavedBufferAttribute(instanceBuffer, 3, 3));\r\n        // this.addAttribute('instanceStart', new THREE.InterleavedBufferAttribute(instanceBuffer, 3, 0)); // xyz\r\n        // this.addAttribute('instanceEnd', new THREE.InterleavedBufferAttribute(instanceBuffer, 3, 3)); // xyz\r\n\r\n        //\r\n\r\n        this.computeBoundingBox();\r\n        this.computeBoundingSphere();\r\n\r\n        return this;\r\n\r\n    }\r\n\r\n    setColors(array) {\r\n\r\n        var colors;\r\n\r\n        if (array instanceof Float32Array) {\r\n\r\n            colors = array;\r\n\r\n        } else if (Array.isArray(array)) {\r\n\r\n            colors = new Float32Array(array);\r\n\r\n        }\r\n\r\n        var instanceColorBuffer = new THREE.InstancedInterleavedBuffer(colors, 6, 1); // rgb, rgb\r\n        addAttribute(this, 'instanceColorStart', new THREE.InterleavedBufferAttribute(instanceColorBuffer, 3, 0));\r\n        addAttribute(this, 'instanceColorEnd', new THREE.InterleavedBufferAttribute(instanceColorBuffer, 3, 3));\r\n        // this.addAttribute('instanceColorStart', new THREE.InterleavedBufferAttribute(instanceColorBuffer, 3, 0)); // rgb\r\n        // this.addAttribute('instanceColorEnd', new THREE.InterleavedBufferAttribute(instanceColorBuffer, 3, 3)); // rgb\r\n\r\n        return this;\r\n\r\n    }\r\n\r\n    fromWireframeGeometry(geometry) {\r\n\r\n        this.setPositions(geometry.attributes.position.array);\r\n\r\n        return this;\r\n\r\n    }\r\n\r\n    fromEdgesGeometry(geometry) {\r\n\r\n        this.setPositions(geometry.attributes.position.array);\r\n\r\n        return this;\r\n\r\n    }\r\n\r\n    fromMesh(mesh) {\r\n\r\n        this.fromWireframeGeometry(new THREE.WireframeGeometry(mesh.geometry));\r\n\r\n        // set colors, maybe\r\n\r\n        return this;\r\n\r\n    }\r\n\r\n    fromLineSegements(lineSegments) {\r\n\r\n        var geometry = lineSegments.geometry;\r\n\r\n        if (geometry.isGeometry) {\r\n\r\n            this.setPositions(geometry.vertices);\r\n\r\n        } else if (geometry.isBufferGeometry) {\r\n\r\n            this.setPositions(geometry.position.array); // assumes non-indexed\r\n\r\n        }\r\n\r\n        // set colors, maybe\r\n\r\n        return this;\r\n\r\n    }\r\n\r\n    computeBoundingBox() {\r\n\r\n        var box = new THREE.Box3();\r\n\r\n        if (this.boundingBox === null) {\r\n\r\n            this.boundingBox = new THREE.Box3();\r\n\r\n        }\r\n\r\n        var start = this.attributes.instanceStart;\r\n        var end = this.attributes.instanceEnd;\r\n\r\n        if (start !== undefined && end !== undefined) {\r\n\r\n            this.boundingBox.setFromBufferAttribute(start as any);\r\n\r\n            box.setFromBufferAttribute(end as any);\r\n\r\n            this.boundingBox.union(box);\r\n\r\n        }\r\n\r\n    }\r\n\r\n    computeBoundingSphere() {\r\n\r\n        var vector = new THREE.Vector3();\r\n\r\n        if (this.boundingSphere === null) {\r\n\r\n            this.boundingSphere = new THREE.Sphere();\r\n\r\n        }\r\n\r\n        if (this.boundingBox === null) {\r\n\r\n            this.computeBoundingBox();\r\n\r\n        }\r\n\r\n        var start = this.attributes.instanceStart;\r\n        var end = this.attributes.instanceEnd;\r\n\r\n        if (start !== undefined && end !== undefined) {\r\n\r\n            var center = this.boundingSphere.center;\r\n\r\n            this.boundingBox.getCenter(center);\r\n\r\n            var maxRadiusSq = 0;\r\n\r\n            for (var i = 0, il = start.count; i < il; i++) {\r\n\r\n                vector.fromBufferAttribute(start, i);\r\n                maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(vector));\r\n\r\n                vector.fromBufferAttribute(end, i);\r\n                maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(vector));\r\n\r\n            }\r\n\r\n            this.boundingSphere.radius = Math.sqrt(maxRadiusSq);\r\n\r\n            if (isNaN(this.boundingSphere.radius)) {\r\n\r\n                console.error('THREE.LineSegmentsGeometry.computeBoundingSphere(): Computed radius is NaN. The instanced position data is likely to have NaN values.', this);\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    toJSON() {\r\n\r\n        // todo\r\n\r\n    }\r\n\r\n    // clone: function () {\r\n\r\n    //     // todo\r\n\r\n    // },\r\n\r\n    // eslint-disable-next-line no-unused-vars\r\n    copy(source) {\r\n\r\n        // todo\r\n\r\n        return this;\r\n\r\n    }\r\n\r\n};\r\nexport default LineSegmentsGeometry;\r\n","/**\r\n * @author WestLangley / http://github.com/WestLangley\r\n *\r\n * parameters = {\r\n *  color: <hex>,\r\n *  linewidth: <float>,\r\n *  dashed: <boolean>,\r\n *  dashScale: <float>,\r\n *  dashSize: <float>,\r\n *  gapSize: <float>,\r\n *  resolution: <Vector2>, // to be set by renderer\r\n * }\r\n */\r\nimport * as THREE from 'three';\r\n\r\nconst UniformsLib: { [key: string]: any } = {}, ShaderLib = {};\r\n\r\nUniformsLib.line = {\r\n\r\n\tlinewidth: { value: 1 },\r\n\tresolution: { value: new THREE.Vector2(1, 1) },\r\n\tdashScale: { value: 1 },\r\n\tdashSize: { value: 1 },\r\n\tgapSize: { value: 1 } // todo FIX - maybe change to totalSize\r\n\r\n};\r\n\r\nShaderLib['line'] = {\r\n\r\n\tuniforms: THREE.UniformsUtils.merge([\r\n\t\tTHREE.UniformsLib.common,\r\n\t\tTHREE.UniformsLib.fog,\r\n\t\tUniformsLib.line\r\n\t]),\r\n\r\n\tvertexShader:\r\n\t\t`\r\n\t\t#include <common>\r\n\t\t#include <color_pars_vertex>\r\n\t\t#include <fog_pars_vertex>\r\n\t\t#include <logdepthbuf_pars_vertex>\r\n\t\t#include <clipping_planes_pars_vertex>\r\n\r\n\t\tuniform float linewidth;\r\n\t\tuniform vec2 resolution;\r\n\r\n\t\tattribute vec3 instanceStart;\r\n\t\tattribute vec3 instanceEnd;\r\n\r\n\t\tattribute vec3 instanceColorStart;\r\n\t\tattribute vec3 instanceColorEnd;\r\n\r\n\t\tvarying vec2 vUv;\r\n\r\n\t\t#ifdef USE_DASH\r\n\r\n\t\t\tuniform float dashScale;\r\n\t\t\tattribute float instanceDistanceStart;\r\n\t\t\tattribute float instanceDistanceEnd;\r\n\t\t\tvarying float vLineDistance;\r\n\r\n\t\t#endif\r\n\r\n\t\tvoid trimSegment( const in vec4 start, inout vec4 end ) {\r\n\r\n\t\t\t// trim end segment so it terminates between the camera plane and the near plane\r\n\r\n\t\t\t// conservative estimate of the near plane\r\n\t\t\tfloat a = projectionMatrix[ 2 ][ 2 ]; // 3nd entry in 3th column\r\n\t\t\tfloat b = projectionMatrix[ 3 ][ 2 ]; // 3nd entry in 4th column\r\n\t\t\tfloat nearEstimate = - 0.5 * b / a;\r\n\r\n\t\t\tfloat alpha = ( nearEstimate - start.z ) / ( end.z - start.z );\r\n\r\n\t\t\tend.xyz = mix( start.xyz, end.xyz, alpha );\r\n\r\n\t\t}\r\n\r\n\t\tvoid main() {\r\n\r\n\t\t\t#ifdef USE_COLOR\r\n\r\n\t\t\t\tvColor.xyz = ( position.y < 0.5 ) ? instanceColorStart : instanceColorEnd;\r\n\r\n\t\t\t#endif\r\n\r\n\t\t\t#ifdef USE_DASH\r\n\r\n\t\t\t\tvLineDistance = ( position.y < 0.5 ) ? dashScale * instanceDistanceStart : dashScale * instanceDistanceEnd;\r\n\r\n\t\t\t#endif\r\n\r\n\t\t\tfloat aspect = resolution.x / resolution.y;\r\n\r\n\t\t\tvUv = uv;\r\n\r\n\t\t\t// camera space\r\n\t\t\tvec4 start = modelViewMatrix * vec4( instanceStart, 1.0 );\r\n\t\t\tvec4 end = modelViewMatrix * vec4( instanceEnd, 1.0 );\r\n\r\n\t\t\t// special case for perspective projection, and segments that terminate either in, or behind, the camera plane\r\n\t\t\t// clearly the gpu firmware has a way of addressing this issue when projecting into ndc space\r\n\t\t\t// but we need to perform ndc-space calculations in the shader, so we must address this issue directly\r\n\t\t\t// perhaps there is a more elegant solution -- WestLangley\r\n\r\n\t\t\tbool perspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 ); // 4th entry in the 3rd column\r\n\r\n\t\t\tif ( perspective ) {\r\n\r\n\t\t\t\tif ( start.z < 0.0 && end.z >= 0.0 ) {\r\n\r\n\t\t\t\t\ttrimSegment( start, end );\r\n\r\n\t\t\t\t} else if ( end.z < 0.0 && start.z >= 0.0 ) {\r\n\r\n\t\t\t\t\ttrimSegment( end, start );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// clip space\r\n\t\t\tvec4 clipStart = projectionMatrix * start;\r\n\t\t\tvec4 clipEnd = projectionMatrix * end;\r\n\r\n\t\t\t// ndc space\r\n\t\t\tvec2 ndcStart = clipStart.xy / clipStart.w;\r\n\t\t\tvec2 ndcEnd = clipEnd.xy / clipEnd.w;\r\n\r\n\t\t\t// direction\r\n\t\t\tvec2 dir = ndcEnd - ndcStart;\r\n\r\n\t\t\t// account for clip-space aspect ratio\r\n\t\t\tdir.x *= aspect;\r\n\t\t\tdir = normalize( dir );\r\n\r\n\t\t\t// perpendicular to dir\r\n\t\t\tvec2 offset = vec2( dir.y, - dir.x );\r\n\r\n\t\t\t// undo aspect ratio adjustment\r\n\t\t\tdir.x /= aspect;\r\n\t\t\toffset.x /= aspect;\r\n\r\n\t\t\t// sign flip\r\n\t\t\tif ( position.x < 0.0 ) offset *= - 1.0;\r\n\r\n\t\t\t// endcaps\r\n\t\t\tif ( position.y < 0.0 ) {\r\n\r\n\t\t\t\toffset += - dir;\r\n\r\n\t\t\t} else if ( position.y > 1.0 ) {\r\n\r\n\t\t\t\toffset += dir;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// adjust for linewidth\r\n\t\t\toffset *= linewidth;\r\n\r\n\t\t\t// adjust for clip-space to screen-space conversion // maybe resolution should be based on viewport ...\r\n\t\t\toffset /= resolution.y;\r\n\r\n\t\t\t// select end\r\n\t\t\tvec4 clip = ( position.y < 0.5 ) ? clipStart : clipEnd;\r\n\r\n\t\t\t// back to clip space\r\n\t\t\toffset *= clip.w;\r\n\r\n\t\t\tclip.xy += offset;\r\n\r\n\t\t\tgl_Position = clip;\r\n\r\n\t\t\tvec4 mvPosition = ( position.y < 0.5 ) ? start : end; // this is an approximation\r\n\r\n\t\t\t#include <logdepthbuf_vertex>\r\n\t\t\t#include <clipping_planes_vertex>\r\n\t\t\t#include <fog_vertex>\r\n\r\n\t\t}\r\n\t\t`,\r\n\r\n\tfragmentShader:\r\n\t\t`\r\n\t\tuniform vec3 diffuse;\r\n\t\tuniform float opacity;\r\n\r\n\t\t#ifdef USE_DASH\r\n\r\n\t\t\tuniform float dashSize;\r\n\t\t\tuniform float gapSize;\r\n\r\n\t\t#endif\r\n\r\n\t\tvarying float vLineDistance;\r\n\r\n\t\t#include <common>\r\n\t\t#include <color_pars_fragment>\r\n\t\t#include <fog_pars_fragment>\r\n\t\t#include <logdepthbuf_pars_fragment>\r\n\t\t#include <clipping_planes_pars_fragment>\r\n\r\n\t\tvarying vec2 vUv;\r\n\r\n\t\tvoid main() {\r\n\r\n\t\t\t#include <clipping_planes_fragment>\r\n\r\n\t\t\t#ifdef USE_DASH\r\n\r\n\t\t\t\tif ( vUv.y < - 1.0 || vUv.y > 1.0 ) discard; // discard endcaps\r\n\r\n\t\t\t\tif ( mod( vLineDistance, dashSize + gapSize ) > dashSize ) discard; // todo - FIX\r\n\r\n\t\t\t#endif\r\n\r\n\t\t\tif ( abs( vUv.y ) > 1.0 ) {\r\n\r\n\t\t\t\tfloat a = vUv.x;\r\n\t\t\t\tfloat b = ( vUv.y > 0.0 ) ? vUv.y - 1.0 : vUv.y + 1.0;\r\n\t\t\t\tfloat len2 = a * a + b * b;\r\n\r\n\t\t\t\tif ( len2 > 1.0 ) discard;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvec4 diffuseColor = vec4( diffuse, opacity );\r\n\r\n\t\t\t#include <logdepthbuf_fragment>\r\n\t\t\t#include <color_fragment>\r\n\r\n\t\t\tgl_FragColor = vec4( diffuseColor.rgb, diffuseColor.a );\r\n\r\n\t\t\t#include <premultiplied_alpha_fragment>\r\n\t\t\t#include <tonemapping_fragment>\r\n\t\t\t#include <encodings_fragment>\r\n\t\t\t#include <fog_fragment>\r\n\r\n\t\t}\r\n\t\t`\r\n};\r\n\r\nclass LineMaterial extends THREE.ShaderMaterial {\r\n\tdashed: boolean = true;\r\n\tisLineMaterial: boolean = true;\r\n\ttype: string = 'LineMaterial';\r\n\tconstructor(parameters) {\r\n\t\tsuper({\r\n\t\t\tuniforms: THREE.UniformsUtils.clone(ShaderLib['line'].uniforms),\r\n\t\t\tvertexShader: ShaderLib['line'].vertexShader,\r\n\t\t\tfragmentShader: ShaderLib['line'].fragmentShader\r\n\t\t})\r\n\r\n\t\tObject.defineProperties(this, {\r\n\r\n\t\t\tcolor: {\r\n\r\n\t\t\t\tenumerable: true,\r\n\r\n\t\t\t\tget: function () {\r\n\r\n\t\t\t\t\treturn this.uniforms.diffuse.value;\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tset: function (value) {\r\n\r\n\t\t\t\t\tthis.uniforms.diffuse.value = value;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t},\r\n\r\n\t\t\tlinewidth: {\r\n\r\n\t\t\t\tenumerable: true,\r\n\r\n\t\t\t\tget: function () {\r\n\r\n\t\t\t\t\treturn this.uniforms.linewidth.value;\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tset: function (value) {\r\n\r\n\t\t\t\t\tthis.uniforms.linewidth.value = value;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t},\r\n\r\n\t\t\tdashScale: {\r\n\r\n\t\t\t\tenumerable: true,\r\n\r\n\t\t\t\tget: function () {\r\n\r\n\t\t\t\t\treturn this.uniforms.dashScale.value;\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tset: function (value) {\r\n\r\n\t\t\t\t\tthis.uniforms.dashScale.value = value;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t},\r\n\r\n\t\t\tdashSize: {\r\n\r\n\t\t\t\tenumerable: true,\r\n\r\n\t\t\t\tget: function () {\r\n\r\n\t\t\t\t\treturn this.uniforms.dashSize.value;\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tset: function (value) {\r\n\r\n\t\t\t\t\tthis.uniforms.dashSize.value = value;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t},\r\n\r\n\t\t\tgapSize: {\r\n\r\n\t\t\t\tenumerable: true,\r\n\r\n\t\t\t\tget: function () {\r\n\r\n\t\t\t\t\treturn this.uniforms.gapSize.value;\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tset: function (value) {\r\n\r\n\t\t\t\t\tthis.uniforms.gapSize.value = value;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t},\r\n\r\n\t\t\tresolution: {\r\n\r\n\t\t\t\tenumerable: true,\r\n\r\n\t\t\t\tget: function () {\r\n\r\n\t\t\t\t\treturn this.uniforms.resolution.value;\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tset: function (value) {\r\n\r\n\t\t\t\t\tthis.uniforms.resolution.value.copy(value);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.setValues(parameters);\r\n\t}\r\n};\r\n\r\n// LineMaterial.prototype = Object.create(THREE.ShaderMaterial.prototype);\r\n// LineMaterial.prototype.constructor = LineMaterial;\r\n\r\n// LineMaterial.prototype.isLineMaterial = true;\r\n\r\n// LineMaterial.prototype.copy = function (source) {\r\n\r\n// \t// THREE.ShaderMaterial.prototype.copy.call(this, source);\r\n\r\n// \tthis.color.copy(source.color);\r\n\r\n// \tthis.linewidth = source.linewidth;\r\n\r\n// \tthis.resolution = source.resolution;\r\n\r\n// \t// todo\r\n\r\n// \treturn this;\r\n\r\n// };\r\n\r\nexport default LineMaterial;\r\n","/**\r\n * @author WestLangley / http://github.com/WestLangley\r\n *\r\n */\r\nimport * as THREE from 'three';\r\nimport LineSegmentsGeometry from './LineSegmentsGeometry';\r\nimport { addAttribute } from '../ThreeAdaptUtil';\r\nimport LineMaterial from './LineMaterial';\r\n\r\nclass LineSegments2 extends THREE.Mesh {\r\n    isLineSegments2: boolean = true;\r\n    constructor(geometry, material) {\r\n        super(geometry, material);\r\n        this.type = 'LineSegments2';\r\n\r\n        this.geometry = geometry !== undefined ? geometry : new LineSegmentsGeometry();\r\n        this.material = material !== undefined ? material : new LineMaterial({ color: Math.random() * 0xffffff });\r\n    }\r\n\r\n    computeLineDistances() { // for backwards-compatability, but could be a method of LineSegmentsGeometry...\r\n\r\n        var start = new THREE.Vector3();\r\n        var end = new THREE.Vector3();\r\n\r\n\r\n        var geometry = this.geometry;\r\n\r\n        var instanceStart = geometry.attributes.instanceStart;\r\n        var instanceEnd = geometry.attributes.instanceEnd;\r\n        var lineDistances = new Float32Array(2 * (instanceStart as any).data.count);\r\n\r\n        for (var i = 0, j = 0, l = (instanceStart as any).data.count; i < l; i++, j += 2) {\r\n\r\n            start.fromBufferAttribute(instanceStart, i);\r\n            end.fromBufferAttribute(instanceEnd, i);\r\n\r\n            lineDistances[j] = (j === 0) ? 0 : lineDistances[j - 1];\r\n            lineDistances[j + 1] = lineDistances[j] + start.distanceTo(end);\r\n\r\n        }\r\n\r\n        var instanceDistanceBuffer = new THREE.InstancedInterleavedBuffer(lineDistances, 2, 1); // d0, d1\r\n\r\n        addAttribute(geometry, 'instanceDistanceStart', new THREE.InterleavedBufferAttribute(instanceDistanceBuffer, 1, 0));\r\n        addAttribute(geometry, 'instanceDistanceEnd', new THREE.InterleavedBufferAttribute(instanceDistanceBuffer, 1, 1));\r\n        // geometry.addAttribute('instanceDistanceStart', new THREE.InterleavedBufferAttribute(instanceDistanceBuffer, 1, 0)); // d0\r\n        // geometry.addAttribute('instanceDistanceEnd', new THREE.InterleavedBufferAttribute(instanceDistanceBuffer, 1, 1)); // d1\r\n\r\n        return this;\r\n\r\n\r\n    }\r\n\r\n};\r\nexport default LineSegments2;\r\n","/**\r\n * @author WestLangley / http://github.com/WestLangley\r\n *\r\n */\r\n// import * as THREE from 'three';\r\nimport LineSegmentsGeometry from './LineSegmentsGeometry';\r\n\r\nclass LineGeometry extends LineSegmentsGeometry {\r\n    isLineGeometry: boolean = true;\r\n    constructor() {\r\n        super();\r\n        this.type = 'LineGeometry';\r\n    }\r\n\r\n    fromLine(line) {\r\n\r\n        var geometry = line.geometry;\r\n\r\n        if (geometry.isGeometry) {\r\n\r\n            this.setPositions(geometry.vertices);\r\n\r\n        } else if (geometry.isBufferGeometry) {\r\n\r\n            this.setPositions(geometry.position.array); // assumes non-indexed\r\n\r\n        }\r\n\r\n        return this;\r\n    }\r\n};\r\nexport default LineGeometry;\r\n","/**\r\n * @author WestLangley / http://github.com/WestLangley\r\n *\r\n */\r\n// import * as THREE from 'three';\r\nimport LineSegments2 from './LineSegments2';\r\nimport LineGeometry from './LineGeometry';\r\nimport LineMaterial from './LineMaterial';\r\n\r\nclass Line2 extends LineSegments2 {\r\n    isLine2: boolean = true;\r\n    _colorIndex: number;\r\n    constructor(geometry, material) {\r\n        super(geometry, material);\r\n        this.type = 'Line2';\r\n\r\n        this.geometry = geometry !== undefined ? geometry : new LineGeometry();\r\n        this.material = material !== undefined ? material : new LineMaterial({ color: Math.random() * 0xffffff });\r\n    }\r\n\r\n    copy(source) {\r\n\r\n        return this;\r\n    }\r\n};\r\nexport default Line2;\r\n","\"use strict\"\r\nimport * as maptalks from 'maptalks';\r\nimport * as THREE from 'three';\r\nimport { BaseObjectOptionType } from './type/BaseOption';\r\nimport Line2 from './util/fatline/Line2';\r\n\r\nconst OPTIONS = {\r\n    interactive: true,\r\n    altitude: 0,\r\n    minZoom: 0,\r\n    maxZoom: 30,\r\n    asynchronous: false\r\n};\r\n\r\n/**\r\n * a Class for Eventable\r\n */\r\nfunction Base() {\r\n\r\n}\r\n\r\n// class Base {\r\n//     constructor() {\r\n\r\n//     }\r\n// }\r\n\r\n/**\r\n * EVENTS=[\r\n *  'add',\r\n *  'remove',\r\n    'mousemove',\r\n    'click',\r\n    'mousedown',\r\n    'mouseup',\r\n    'dblclick',\r\n    'contextmenu',\r\n    'touchstart',\r\n    'touchmove',\r\n    'touchend',\r\n    'mouseover',\r\n    'mouseout',\r\n    'idchange',\r\n    'propertieschange',\r\n    'show',\r\n    'hide',\r\n    'symbolchange'\r\n     empty\r\n];\r\n * This is the base class for all 3D objects\r\n *\r\n *\r\n * Its function and maptalks.geometry are as similar as possible\r\n *\r\n * maptalks.Eventable(Base) return a Class  https://github.com/maptalks/maptalks.js/blob/master/src/core/Eventable.js\r\n *\r\n */\r\nclass BaseObject extends maptalks.Eventable(Base) {\r\n    isAdd: boolean = false;\r\n    object3d: THREE.Object3D;\r\n    options: BaseObjectOptionType;\r\n    toolTip: maptalks.ui.ToolTip;\r\n    infoWindow: maptalks.ui.InfoWindow;\r\n    _mouseover: boolean = false;\r\n    _showPlayer: any;\r\n    _visible: boolean = true;\r\n    _zoomVisible: boolean = true;\r\n    _vt: any;\r\n    picked: boolean = false;\r\n    pickObject3d: THREE.Object3D;\r\n    id: string | number;\r\n    type: string;\r\n    _baseObjects: BaseObject[];\r\n\r\n    readonly isBaseObject: boolean = true;\r\n\r\n    constructor(id?: string | number) {\r\n        super();\r\n        if (id === undefined) {\r\n            id = maptalks.Util.GUID();\r\n        }\r\n        this.id = id;\r\n    }\r\n\r\n    addTo(layer: any) {\r\n        if (layer && layer.type === 'ThreeLayer') {\r\n            layer.addMesh([this]);\r\n        } else {\r\n            console.error('layer only support maptalks.ThreeLayer');\r\n        }\r\n        return this;\r\n    }\r\n\r\n    remove() {\r\n        const layer = this.getLayer();\r\n        if (layer) {\r\n            layer.removeMesh([this]);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    getObject3d(): THREE.Object3D {\r\n        return this.object3d;\r\n    }\r\n\r\n    getId(): string | number {\r\n        return this.id;\r\n    }\r\n\r\n    setId(id: string | number) {\r\n        const oldId = this.getId();\r\n        this.id = id;\r\n        this._fire('idchange', {\r\n            'old': oldId,\r\n            'new': id,\r\n            'target': this\r\n        });\r\n        return this;\r\n    }\r\n\r\n    getType(): string {\r\n        return this.type;\r\n    }\r\n\r\n    getOptions(): BaseObjectOptionType {\r\n        return this.options;\r\n    }\r\n\r\n    getProperties(): object {\r\n        return (this.options || {}).properties;\r\n    }\r\n\r\n    setProperties(property: object) {\r\n        const old = Object.assign({}, this.getProperties());\r\n        this.options.properties = property;\r\n        this._fire('propertieschange', {\r\n            'old': old,\r\n            'new': property,\r\n            'target': this\r\n        });\r\n        return this;\r\n    }\r\n\r\n\r\n    getLayer() {\r\n        return this.options.layer;\r\n    }\r\n\r\n\r\n    // eslint-disable-next-line consistent-return\r\n    getMap(): maptalks.Map {\r\n        const layer = this.getLayer();\r\n        if (layer) {\r\n            return layer.getMap();\r\n        }\r\n    }\r\n\r\n    // eslint-disable-next-line consistent-return\r\n    getCenter(): maptalks.Coordinate {\r\n        const options = this.getOptions();\r\n        const { coordinate, lineString, polygon } = options;\r\n        if (coordinate) {\r\n            return coordinate instanceof maptalks.Coordinate ? coordinate : new maptalks.Coordinate(coordinate);\r\n        } else {\r\n            const geometry = polygon || lineString;\r\n            if (geometry && geometry.getCenter) {\r\n                return geometry.getCenter();\r\n            }\r\n        }\r\n    }\r\n\r\n    getAltitude(): number {\r\n        return this.getOptions().altitude;\r\n    }\r\n\r\n\r\n    /**\r\n     * Different objects need to implement their own methods\r\n     * @param {*} altitude\r\n     */\r\n    setAltitude(altitude: number) {\r\n        if (maptalks.Util.isNumber(altitude)) {\r\n            const z = this.getLayer().distanceToVector3(altitude, altitude).x;\r\n            this.getObject3d().position.z = z;\r\n            this.options.altitude = altitude;\r\n            if (this.pickObject3d) {\r\n                this.pickObject3d.position.z = z;\r\n            }\r\n            //fix merged mesh\r\n            if (this._baseObjects && Array.isArray(this._baseObjects)) {\r\n                for (let i = 0, len = this._baseObjects.length; i < len; i++) {\r\n                    if (this._baseObjects[i]) {\r\n                        this._baseObjects[i].getObject3d().position.z = z;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n\r\n    show() {\r\n        //  in zoom range\r\n        if (this._zoomVisible) {\r\n            this.getObject3d().visible = true;\r\n            this._fire('show');\r\n        }\r\n        this._visible = true;\r\n        return this;\r\n    }\r\n\r\n\r\n    hide() {\r\n        this.getObject3d().visible = false;\r\n        this._fire('hide');\r\n        this._visible = false;\r\n        return this;\r\n    }\r\n\r\n    isVisible(): boolean {\r\n        return (!!this.getObject3d().visible);\r\n    }\r\n\r\n\r\n    /**\r\n     *  Different objects need to implement their own methods\r\n     */\r\n    getSymbol(): THREE.Material {\r\n        return (this.getObject3d() as any).material;\r\n    }\r\n\r\n    /**\r\n     *  Different objects need to implement their own methods\r\n     * @param {*} material\r\n     */\r\n    setSymbol(material: THREE.Material) {\r\n        if (material && material instanceof THREE.Material) {\r\n            material.needsUpdate = true;\r\n            material.vertexColors = (this.getObject3d() as any).material.vertexColors;\r\n            const old = (this.getObject3d() as any).material.clone();\r\n            (this.getObject3d() as any).material = material;\r\n            this._fire('symbolchange', {\r\n                'old': old,\r\n                'new': material,\r\n                'target': this\r\n            });\r\n        }\r\n        return this;\r\n    }\r\n\r\n    setInfoWindow(options: object) {\r\n        this.removeInfoWindow();\r\n        this.infoWindow = new maptalks.ui.InfoWindow(options);\r\n        this.infoWindow.addTo(this);\r\n        return this;\r\n    }\r\n\r\n    getInfoWindow(): maptalks.ui.InfoWindow {\r\n        return this.infoWindow;\r\n    }\r\n\r\n    openInfoWindow(coordinate: maptalks.Coordinate) {\r\n        coordinate = coordinate || this.getCenter();\r\n        if (!(coordinate instanceof maptalks.Coordinate)) {\r\n            coordinate = new maptalks.Coordinate(coordinate);\r\n        }\r\n        // eslint-disable-next-line no-unused-expressions\r\n        (coordinate && this.infoWindow && this.infoWindow.show(coordinate));\r\n        return this;\r\n    }\r\n\r\n    closeInfoWindow() {\r\n        // eslint-disable-next-line no-unused-expressions\r\n        (this.infoWindow && this.infoWindow.hide());\r\n        return this;\r\n    }\r\n\r\n\r\n    removeInfoWindow() {\r\n        // eslint-disable-next-line no-unused-expressions\r\n        if (this.infoWindow) {\r\n            this.infoWindow.remove();\r\n            delete this.infoWindow;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    setToolTip(content: string, options: object) {\r\n        this.removeToolTip();\r\n        this.toolTip = new maptalks.ui.ToolTip(content, options);\r\n        this.toolTip.addTo(this);\r\n        return this;\r\n    }\r\n\r\n    getToolTip(): maptalks.ui.ToolTip {\r\n        return this.toolTip;\r\n    }\r\n\r\n    openToolTip(coordinate: maptalks.Coordinate) {\r\n        coordinate = coordinate || this.getCenter();\r\n        if (!(coordinate instanceof maptalks.Coordinate)) {\r\n            coordinate = new maptalks.Coordinate(coordinate);\r\n        }\r\n        // eslint-disable-next-line no-unused-expressions\r\n        (coordinate && this.toolTip && this.toolTip.show(coordinate));\r\n        return this;\r\n    }\r\n\r\n    closeToolTip() {\r\n        // eslint-disable-next-line no-unused-expressions\r\n        (this.toolTip && this.toolTip.hide());\r\n        return this;\r\n    }\r\n\r\n    removeToolTip() {\r\n        // eslint-disable-next-line no-unused-expressions\r\n        if (this.toolTip) {\r\n            this.toolTip.remove();\r\n            delete this.toolTip;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * different components should implement their own animation methods\r\n     * @param {*} options\r\n     * @param {*} cb\r\n     */\r\n    // eslint-disable-next-line no-unused-vars\r\n    animateShow(options: object = {}, cb: Function) {\r\n        if (this._showPlayer) {\r\n            this._showPlayer.cancel();\r\n        }\r\n        if (maptalks.Util.isFunction(options)) {\r\n            options = {};\r\n            cb = options as Function;\r\n        }\r\n        const duration = options['duration'] || 1000,\r\n            easing = options['easing'] || 'out';\r\n        const player = this._showPlayer = maptalks.animation.Animation.animate({\r\n            'scale': 1\r\n        }, {\r\n            'duration': duration,\r\n            'easing': easing\r\n        }, frame => {\r\n            const scale = frame.styles.scale;\r\n            if (scale > 0) {\r\n                this.getObject3d().scale.z = scale;\r\n            }\r\n            if (cb) {\r\n                cb(frame, scale);\r\n            }\r\n        });\r\n        player.play();\r\n        return player;\r\n    }\r\n\r\n\r\n    getMinZoom(): number {\r\n        return this.getOptions().minZoom;\r\n    }\r\n\r\n\r\n    getMaxZoom(): number {\r\n        return this.getOptions().maxZoom;\r\n    }\r\n\r\n    isAsynchronous(): boolean {\r\n        return this.getOptions().asynchronous;\r\n    }\r\n\r\n    fire(eventType: string, param: any) {\r\n        this._fire(eventType, param);\r\n        if (this._vt && this._vt.onSelectMesh) {\r\n            this._vt.onSelectMesh(eventType, param);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    config() {\r\n\r\n        return this;\r\n    }\r\n\r\n    setPickObject3d(object3d: THREE.Object3D) {\r\n        this.pickObject3d = object3d;\r\n        this.pickObject3d['__parent'] = this;\r\n        return this;\r\n    }\r\n\r\n\r\n    /**\r\n     * more method support\r\n     * @param {*} options\r\n     */\r\n\r\n    /**\r\n     *\r\n     * @param {*} options\r\n     */\r\n\r\n    _initOptions(options: BaseObjectOptionType) {\r\n        this.options = maptalks.Util.extend({} as BaseObjectOptionType, OPTIONS, options);\r\n        return this;\r\n    }\r\n\r\n    _createMesh(geometry: THREE.BufferGeometry, material: THREE.Material) {\r\n        this.object3d = new THREE.Mesh(geometry, material);\r\n        this.object3d['__parent'] = this;\r\n        return this;\r\n    }\r\n\r\n    _createGroup() {\r\n        this.object3d = new THREE.Group();\r\n        this.object3d['__parent'] = this;\r\n        return this;\r\n    }\r\n\r\n\r\n    _createLine(geometry: THREE.BufferGeometry, material: THREE.LineBasicMaterial | THREE.LineDashedMaterial) {\r\n        this.object3d = new THREE.Line(geometry, material);\r\n        (this.object3d as THREE.Line).computeLineDistances();\r\n        this.object3d['__parent'] = this;\r\n        return this;\r\n    }\r\n\r\n    _createLine2(geometry, material) {\r\n        this.object3d = new Line2(geometry, material);\r\n        (this.object3d as any).computeLineDistances();\r\n        this.object3d['__parent'] = this;\r\n        return this;\r\n    }\r\n\r\n\r\n    // eslint-disable-next-line no-unused-vars\r\n    _createPoints(geometry: THREE.BufferGeometry, material: THREE.PointsMaterial) {\r\n        //Serving for particles\r\n        this.object3d = new THREE.Points(geometry, material);\r\n        this.object3d['__parent'] = this;\r\n        return this;\r\n    }\r\n\r\n    _createLineSegments(geometry: THREE.BufferGeometry, material: THREE.LineBasicMaterial | THREE.LineDashedMaterial) {\r\n        this.object3d = new THREE.LineSegments(geometry, material);\r\n        (this.object3d as THREE.LineSegments).computeLineDistances();\r\n        this.object3d['__parent'] = this;\r\n        return this;\r\n    }\r\n}\r\n\r\nexport default BaseObject;\r\n","\r\nimport { MergeAttributeType } from './../type/index';\r\nimport * as THREE from 'three';\r\nimport { TypedArray } from 'three';\r\nimport { addAttribute } from './ThreeAdaptUtil';\r\n\r\nexport function mergeBufferGeometries(geometries: Array<MergeAttributeType>): THREE.BufferGeometry {\r\n    const { position, normal, uv, indices } = mergeBufferGeometriesAttribute(geometries);\r\n    const bufferGeomertry = new THREE.BufferGeometry();\r\n    const color = new Float32Array(position.length);\r\n    color.fill(1, 0, position.length);\r\n    addAttribute(bufferGeomertry, 'color', new THREE.BufferAttribute(color, 3));\r\n    addAttribute(bufferGeomertry, 'normal', new THREE.BufferAttribute(normal, 3));\r\n    addAttribute(bufferGeomertry, 'position', new THREE.BufferAttribute(position, 3));\r\n    if (uv && uv.length) {\r\n        addAttribute(bufferGeomertry, 'uv', new THREE.BufferAttribute(uv, 2));\r\n    }\r\n    bufferGeomertry.setIndex(new THREE.BufferAttribute(indices, 1));\r\n    return bufferGeomertry;\r\n}\r\n\r\n\r\nexport function mergeBufferGeometriesAttribute(geometries: Array<MergeAttributeType>): MergeAttributeType {\r\n    const attributes: { [key: string]: Array<TypedArray> } = {}, attributesLen: { [key: string]: number } = {};\r\n    for (let i = 0; i < geometries.length; ++i) {\r\n        const geometry = geometries[i];\r\n        for (const name in geometry) {\r\n            if (attributes[name] === undefined) {\r\n                attributes[name] = [];\r\n                attributesLen[name] = 0;\r\n            }\r\n            attributes[name].push((geometry as any)[name]);\r\n            attributesLen[name] += (geometry as any)[name].length;\r\n        }\r\n    }\r\n    // merge attributes\r\n    const mergedGeometry: MergeAttributeType = {};\r\n    let indexOffset = 0;\r\n    const mergedIndex = new Uint32Array(attributesLen['indices']);\r\n    for (const name in attributes) {\r\n        if (name === 'indices') {\r\n            const indices = attributes[name];\r\n            let iIndex = 0;\r\n            for (let i = 0, len = indices.length; i < len; i++) {\r\n                const index = indices[i];\r\n                for (let j = 0, len1 = index.length; j < len1; j++) {\r\n                    mergedIndex[iIndex] = index[j] + indexOffset;\r\n                    iIndex++;\r\n                    // mergedIndex.push(index[j] + indexOffset);\r\n                }\r\n                indexOffset += attributes['position'][i].length / 3;\r\n            }\r\n        } else {\r\n            const mergedAttribute = mergeBufferAttributes(attributes[name], attributesLen[name]);\r\n            if (!mergedAttribute) return null;\r\n            (mergedGeometry as any)[name] = mergedAttribute;\r\n        }\r\n    }\r\n    mergedGeometry['indices'] = mergedIndex;\r\n    return mergedGeometry;\r\n}\r\n\r\n\r\n\r\nfunction mergeBufferAttributes(attributes: Array<TypedArray>, arrayLength: number): Float32Array {\r\n    const array = new Float32Array(arrayLength);\r\n    let offset = 0;\r\n    for (let i = 0; i < attributes.length; ++i) {\r\n        array.set(attributes[i], offset);\r\n        offset += attributes[i].length;\r\n    }\r\n    return array;\r\n}\r\n\r\nexport function generateBufferGeometry(data: MergeAttributeType): THREE.BufferGeometry {\r\n    //arraybuffer data\r\n    const { position, normal, uv, indices } = data;\r\n    // const color = new Float32Array(position.length);\r\n    // color.fill(1, 0, position.length);\r\n    const bufferGeomertry = new THREE.BufferGeometry();\r\n    // addAttribute(bufferGeomertry, 'color', new THREE.BufferAttribute(color, 3));\r\n    addAttribute(bufferGeomertry, 'normal', new THREE.BufferAttribute(new Float32Array(normal), 3));\r\n    addAttribute(bufferGeomertry, 'position', new THREE.BufferAttribute(new Float32Array(position), 3));\r\n    addAttribute(bufferGeomertry, 'uv', new THREE.BufferAttribute(new Float32Array(uv), 2));\r\n    bufferGeomertry.setIndex(new THREE.BufferAttribute(new Uint32Array(indices), 1));\r\n    return bufferGeomertry;\r\n}\r\n\r\nexport function generatePickBufferGeometry(geometry: THREE.BufferGeometry): THREE.BufferGeometry {\r\n    const bufferGeomertry = new THREE.BufferGeometry();\r\n    addAttribute(bufferGeomertry, 'normal', geometry.getAttribute('normal'));\r\n    addAttribute(bufferGeomertry, 'position', geometry.getAttribute('position').clone());\r\n    bufferGeomertry.setIndex(geometry.getIndex());\r\n    return bufferGeomertry;\r\n}\r\n\r\nlet defaultBufferGeometry: THREE.BufferGeometry;\r\n\r\nexport function getDefaultBufferGeometry(): THREE.BufferGeometry {\r\n    if (!defaultBufferGeometry) {\r\n        const SIZE = 0.000001;\r\n        defaultBufferGeometry = new THREE.BoxBufferGeometry(SIZE, SIZE, SIZE);\r\n    }\r\n    return defaultBufferGeometry;\r\n}\r\n","import * as THREE from 'three';\r\nimport { MergeAttributeType } from '../type/BaseAttribute';\r\nimport { mergeBufferGeometries } from './MergeGeometryUtil';\r\nimport { addAttribute } from './ThreeAdaptUtil';\r\ntype Cache = {\r\n    [key: number]: THREE.BufferGeometry\r\n}\r\nconst barGeometryCache: Cache = {};\r\n\r\nconst defaultBoxGeometry: THREE.BoxBufferGeometry = new THREE.BoxBufferGeometry(1, 1, 1);\r\ndefaultBoxGeometry.translate(0, 0, 0.5);\r\n\r\nconst topColor: THREE.Color = new THREE.Color('#fff'),\r\n    bottomColor: THREE.Color = new THREE.Color('#fff');\r\n\r\nfunction getDefaultCylinderBufferGeometry(radialSegments: number = 6): THREE.BufferGeometry {\r\n    if (!barGeometryCache[radialSegments]) {\r\n        const geometry = new THREE.CylinderBufferGeometry(1, 1, 1, radialSegments, 1);\r\n        geometry.rotateX(Math.PI / 2);\r\n        geometry.translate(0, 0, 0.5);\r\n        geometry.rotateZ(Math.PI / 6);\r\n        barGeometryCache[radialSegments] = geometry;\r\n    }\r\n    return barGeometryCache[radialSegments];\r\n}\r\n\r\n/**\r\n * Reuse Geometry   , Meter as unit\r\n * @param {*} property\r\n */\r\n// eslint-disable-next-line no-unused-vars\r\nexport function getGeometry(property: any): THREE.BufferGeometry {\r\n    const {\r\n        height,\r\n        radialSegments,\r\n        radius\r\n    } = property;\r\n    const geometry = getDefaultCylinderBufferGeometry(radialSegments).clone();\r\n    geometry.scale(radius, radius, height);\r\n    return geometry;\r\n}\r\n\r\n\r\n/**\r\n * init Colors\r\n * @param {*} geometry\r\n * @param {*} color\r\n * @param {*} _topColor\r\n */\r\nexport function initVertexColors(geometry: THREE.BufferGeometry, color: string, _topColor: string, key: string = 'y', v: number = 0): Float32Array {\r\n    let offset = 0;\r\n    if (key === 'y') {\r\n        offset = 1;\r\n    } else if (key === 'z') {\r\n        offset = 2;\r\n    }\r\n    const position = geometry.attributes.position.array;\r\n    const len = position.length;\r\n    bottomColor.setStyle(color);\r\n    topColor.setStyle(_topColor);\r\n    const colors = new Float32Array(len);\r\n    for (let i = 0; i < len; i += 3) {\r\n        const y = position[i + offset];\r\n        if (y > v) {\r\n            colors[i] = topColor.r;\r\n            colors[i + 1] = topColor.g;\r\n            colors[i + 2] = topColor.b;\r\n            // colors.push(topColor.r, topColor.g, topColor.b);\r\n        } else {\r\n            colors[i] = bottomColor.r;\r\n            colors[i + 1] = bottomColor.g;\r\n            colors[i + 2] = bottomColor.b;\r\n            // colors.push(bottomColor.r, bottomColor.g, bottomColor.b);\r\n        }\r\n    }\r\n    addAttribute(geometry, 'color', new THREE.BufferAttribute(colors, 3, true));\r\n    return colors;\r\n}\r\n\r\n\r\nexport function mergeBarGeometry(geometries: Array<THREE.BufferGeometry>): THREE.BufferGeometry {\r\n    const attributes: MergeAttributeType[] = [];\r\n    const len = geometries.length;\r\n    let colorLen = 0;\r\n    for (let i = 0; i < len; i++) {\r\n        const { color } = geometries[i].attributes;\r\n        if (color) {\r\n            colorLen += color.array.length;\r\n        }\r\n    }\r\n    const colors = new Float32Array(colorLen);\r\n    let offset = 0;\r\n    for (let i = 0, len = geometries.length; i < len; i++) {\r\n        const { color, normal, position, uv } = geometries[i].attributes;\r\n        const index = geometries[i].index;\r\n        if (color) {\r\n            colors.set(color.array, offset);\r\n            offset += color.array.length;\r\n            // for (let j = 0, len1 = color.array.length; j < len1; j++) {\r\n            //     colors.push(color.array[j]);\r\n            // }\r\n        }\r\n        attributes.push({\r\n            // color: color.array,\r\n            normal: normal.array,\r\n            uv: uv.array,\r\n            position: position.array,\r\n            indices: index.array\r\n        });\r\n    }\r\n    const bufferGeometry = mergeBufferGeometries(attributes);\r\n    if (colors.length) {\r\n        addAttribute(bufferGeometry, 'color', new THREE.BufferAttribute(colors, 3, true));\r\n        // for (let i = 0, len = colors.length; i < len; i++) {\r\n        //     bufferGeometry.attributes.color.array[i] = colors[i];\r\n        // }\r\n    }\r\n    for (let i = 0, len = geometries.length; i < len; i++) {\r\n        geometries[i].dispose();\r\n    }\r\n    return bufferGeometry;\r\n\r\n}\r\n\r\nexport function getDefaultBoxGeometry(): THREE.BufferGeometry {\r\n    return defaultBoxGeometry;\r\n}\r\n\r\n","import * as maptalks from 'maptalks';\r\nimport * as THREE from 'three';\r\nimport BaseObject from './BaseObject';\r\nimport { ThreeLayer } from './index';\r\nimport { BarOptionType } from './type/index';\r\nimport { getGeometry, initVertexColors } from './util/BarUtil';\r\nimport { getVertexColors } from './util/ThreeAdaptUtil';\r\n\r\n\r\nconst OPTIONS = {\r\n    radius: 10,\r\n    height: 100,\r\n    radialSegments: 6,\r\n    altitude: 0,\r\n    topColor: '',\r\n    bottomColor: '#2d2f61',\r\n};\r\n\r\n\r\n/**\r\n *\r\n */\r\nclass Bar extends BaseObject {\r\n    constructor(coordinate: maptalks.Coordinate, options: BarOptionType, material: THREE.Material, layer: ThreeLayer) {\r\n        options = maptalks.Util.extend({}, OPTIONS, options, { layer, coordinate });\r\n        super();\r\n        this._initOptions(options);\r\n        const { height, radius, topColor, bottomColor, altitude } = options;\r\n        options.height = layer.distanceToVector3(height, height).x;\r\n        options.radius = layer.distanceToVector3(radius, radius).x;\r\n        // Meter as unit\r\n        options['_radius'] = this.options['radius'];\r\n        options['_height'] = this.options['height'];\r\n        const geometry = getGeometry(options);\r\n        if (topColor) {\r\n            initVertexColors(geometry, bottomColor, topColor, 'z', options.height / 2);\r\n            (material as any).vertexColors = getVertexColors();\r\n        }\r\n        this._createMesh(geometry, material);\r\n        const z = layer.distanceToVector3(altitude, altitude).x;\r\n        const position = layer.coordinateToVector3(coordinate, z);\r\n        this.getObject3d().position.copy(position);\r\n        this.type = 'Bar';\r\n    }\r\n}\r\n\r\nexport default Bar;\r\n","import * as maptalks from 'maptalks';\r\nimport * as THREE from 'three';\r\nimport { ThreeLayer } from './../index';\r\nimport { MergeAttributeType } from './../type/index';\r\n//Using cache to reduce computation\r\nexport function distanceToVector3(distance: number, layer: ThreeLayer, cache: { [key: number]: number } = {}): number {\r\n    if (cache[distance] === undefined) {\r\n        cache[distance] = layer.distanceToVector3(distance, distance).x;\r\n    }\r\n    return cache[distance];\r\n}\r\n\r\n\r\n/**\r\n *Get the center point of the point set\r\n * @param {*} coordinates\r\n */\r\nexport function getCenterOfPoints(coordinates: Array<any> = []): maptalks.Coordinate {\r\n    let sumX = 0, sumY = 0;\r\n    const len = coordinates.length;\r\n    for (let i = 0; i < len; i++) {\r\n        const { coordinate, lnglat, lnglats, xy, xys } = coordinates[i];\r\n        const c = coordinate || lnglat || lnglats || xy || xys || coordinates[i];\r\n        let x, y;\r\n        if (Array.isArray(c)) {\r\n            x = c[0];\r\n            y = c[1];\r\n        } else if (c instanceof maptalks.Coordinate) {\r\n            x = c.x;\r\n            y = c.y;\r\n        }\r\n        sumX += x;\r\n        sumY += y;\r\n    }\r\n    return new maptalks.Coordinate(sumX / len, sumY / len);\r\n}\r\n\r\nexport function setBottomHeight(geometry: THREE.BufferGeometry | MergeAttributeType | THREE.Vector3[], bottomHeight: number, layer: ThreeLayer,\r\n    cache?: { [key: number]: number }): number {\r\n    if (bottomHeight === undefined || typeof bottomHeight !== 'number' || bottomHeight === 0) {\r\n        return 0;\r\n    }\r\n    let position;\r\n    if (geometry instanceof THREE.BufferGeometry) {\r\n        position = geometry.attributes.position.array;\r\n    } else if (Array.isArray(geometry)) {\r\n        position = geometry;\r\n    } else {\r\n        position = geometry.position;\r\n    }\r\n    let h = 0;\r\n    if (position) {\r\n        if (cache) {\r\n            if (cache[bottomHeight] === undefined) {\r\n                cache[bottomHeight] = layer.distanceToVector3(bottomHeight, bottomHeight).x;\r\n            }\r\n            h = cache[bottomHeight];\r\n        } else {\r\n            h = layer.distanceToVector3(bottomHeight, bottomHeight).x;\r\n        }\r\n        const len = position.length;\r\n        if (position[0] instanceof THREE.Vector3) {\r\n            for (let i = 0; i < len; i++) {\r\n                position[i].z += h;\r\n            }\r\n        } else {\r\n            for (let i = 0; i < len; i += 3) {\r\n                position[i + 2] += h;\r\n            }\r\n        }\r\n    }\r\n    return h;\r\n}\r\n\r\nexport function getGeometriesColorArray(geometriesAttributes): Float32Array {\r\n    const len = geometriesAttributes.length;\r\n    let colorsLen = 0;\r\n    for (let i = 0; i < len; i++) {\r\n        const { count } = geometriesAttributes[i].position;\r\n        colorsLen += count;\r\n    }\r\n    return new Float32Array(colorsLen * 3);\r\n}","'use strict';\n\nmodule.exports = earcut;\nmodule.exports.default = earcut;\n\nfunction earcut(data, holeIndices, dim) {\n\n    dim = dim || 2;\n\n    var hasHoles = holeIndices && holeIndices.length,\n        outerLen = hasHoles ? holeIndices[0] * dim : data.length,\n        outerNode = linkedList(data, 0, outerLen, dim, true),\n        triangles = [];\n\n    if (!outerNode || outerNode.next === outerNode.prev) return triangles;\n\n    var minX, minY, maxX, maxY, x, y, invSize;\n\n    if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim);\n\n    // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n    if (data.length > 80 * dim) {\n        minX = maxX = data[0];\n        minY = maxY = data[1];\n\n        for (var i = dim; i < outerLen; i += dim) {\n            x = data[i];\n            y = data[i + 1];\n            if (x < minX) minX = x;\n            if (y < minY) minY = y;\n            if (x > maxX) maxX = x;\n            if (y > maxY) maxY = y;\n        }\n\n        // minX, minY and invSize are later used to transform coords into integers for z-order calculation\n        invSize = Math.max(maxX - minX, maxY - minY);\n        invSize = invSize !== 0 ? 1 / invSize : 0;\n    }\n\n    earcutLinked(outerNode, triangles, dim, minX, minY, invSize);\n\n    return triangles;\n}\n\n// create a circular doubly linked list from polygon points in the specified winding order\nfunction linkedList(data, start, end, dim, clockwise) {\n    var i, last;\n\n    if (clockwise === (signedArea(data, start, end, dim) > 0)) {\n        for (i = start; i < end; i += dim) last = insertNode(i, data[i], data[i + 1], last);\n    } else {\n        for (i = end - dim; i >= start; i -= dim) last = insertNode(i, data[i], data[i + 1], last);\n    }\n\n    if (last && equals(last, last.next)) {\n        removeNode(last);\n        last = last.next;\n    }\n\n    return last;\n}\n\n// eliminate colinear or duplicate points\nfunction filterPoints(start, end) {\n    if (!start) return start;\n    if (!end) end = start;\n\n    var p = start,\n        again;\n    do {\n        again = false;\n\n        if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {\n            removeNode(p);\n            p = end = p.prev;\n            if (p === p.next) break;\n            again = true;\n\n        } else {\n            p = p.next;\n        }\n    } while (again || p !== end);\n\n    return end;\n}\n\n// main ear slicing loop which triangulates a polygon (given as a linked list)\nfunction earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {\n    if (!ear) return;\n\n    // interlink polygon nodes in z-order\n    if (!pass && invSize) indexCurve(ear, minX, minY, invSize);\n\n    var stop = ear,\n        prev, next;\n\n    // iterate through ears, slicing them one by one\n    while (ear.prev !== ear.next) {\n        prev = ear.prev;\n        next = ear.next;\n\n        if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {\n            // cut off the triangle\n            triangles.push(prev.i / dim);\n            triangles.push(ear.i / dim);\n            triangles.push(next.i / dim);\n\n            removeNode(ear);\n\n            // skipping the next vertex leads to less sliver triangles\n            ear = next.next;\n            stop = next.next;\n\n            continue;\n        }\n\n        ear = next;\n\n        // if we looped through the whole remaining polygon and can't find any more ears\n        if (ear === stop) {\n            // try filtering points and slicing again\n            if (!pass) {\n                earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);\n\n            // if this didn't work, try curing all small self-intersections locally\n            } else if (pass === 1) {\n                ear = cureLocalIntersections(filterPoints(ear), triangles, dim);\n                earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);\n\n            // as a last resort, try splitting the remaining polygon into two\n            } else if (pass === 2) {\n                splitEarcut(ear, triangles, dim, minX, minY, invSize);\n            }\n\n            break;\n        }\n    }\n}\n\n// check whether a polygon node forms a valid ear with adjacent nodes\nfunction isEar(ear) {\n    var a = ear.prev,\n        b = ear,\n        c = ear.next;\n\n    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\n    // now make sure we don't have other points inside the potential ear\n    var p = ear.next.next;\n\n    while (p !== ear.prev) {\n        if (pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&\n            area(p.prev, p, p.next) >= 0) return false;\n        p = p.next;\n    }\n\n    return true;\n}\n\nfunction isEarHashed(ear, minX, minY, invSize) {\n    var a = ear.prev,\n        b = ear,\n        c = ear.next;\n\n    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\n    // triangle bbox; min & max are calculated like this for speed\n    var minTX = a.x < b.x ? (a.x < c.x ? a.x : c.x) : (b.x < c.x ? b.x : c.x),\n        minTY = a.y < b.y ? (a.y < c.y ? a.y : c.y) : (b.y < c.y ? b.y : c.y),\n        maxTX = a.x > b.x ? (a.x > c.x ? a.x : c.x) : (b.x > c.x ? b.x : c.x),\n        maxTY = a.y > b.y ? (a.y > c.y ? a.y : c.y) : (b.y > c.y ? b.y : c.y);\n\n    // z-order range for the current triangle bbox;\n    var minZ = zOrder(minTX, minTY, minX, minY, invSize),\n        maxZ = zOrder(maxTX, maxTY, minX, minY, invSize);\n\n    var p = ear.prevZ,\n        n = ear.nextZ;\n\n    // look for points inside the triangle in both directions\n    while (p && p.z >= minZ && n && n.z <= maxZ) {\n        if (p !== ear.prev && p !== ear.next &&\n            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&\n            area(p.prev, p, p.next) >= 0) return false;\n        p = p.prevZ;\n\n        if (n !== ear.prev && n !== ear.next &&\n            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) &&\n            area(n.prev, n, n.next) >= 0) return false;\n        n = n.nextZ;\n    }\n\n    // look for remaining points in decreasing z-order\n    while (p && p.z >= minZ) {\n        if (p !== ear.prev && p !== ear.next &&\n            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&\n            area(p.prev, p, p.next) >= 0) return false;\n        p = p.prevZ;\n    }\n\n    // look for remaining points in increasing z-order\n    while (n && n.z <= maxZ) {\n        if (n !== ear.prev && n !== ear.next &&\n            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) &&\n            area(n.prev, n, n.next) >= 0) return false;\n        n = n.nextZ;\n    }\n\n    return true;\n}\n\n// go through all polygon nodes and cure small local self-intersections\nfunction cureLocalIntersections(start, triangles, dim) {\n    var p = start;\n    do {\n        var a = p.prev,\n            b = p.next.next;\n\n        if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {\n\n            triangles.push(a.i / dim);\n            triangles.push(p.i / dim);\n            triangles.push(b.i / dim);\n\n            // remove two nodes involved\n            removeNode(p);\n            removeNode(p.next);\n\n            p = start = b;\n        }\n        p = p.next;\n    } while (p !== start);\n\n    return filterPoints(p);\n}\n\n// try splitting polygon into two and triangulate them independently\nfunction splitEarcut(start, triangles, dim, minX, minY, invSize) {\n    // look for a valid diagonal that divides the polygon into two\n    var a = start;\n    do {\n        var b = a.next.next;\n        while (b !== a.prev) {\n            if (a.i !== b.i && isValidDiagonal(a, b)) {\n                // split the polygon in two by the diagonal\n                var c = splitPolygon(a, b);\n\n                // filter colinear points around the cuts\n                a = filterPoints(a, a.next);\n                c = filterPoints(c, c.next);\n\n                // run earcut on each half\n                earcutLinked(a, triangles, dim, minX, minY, invSize);\n                earcutLinked(c, triangles, dim, minX, minY, invSize);\n                return;\n            }\n            b = b.next;\n        }\n        a = a.next;\n    } while (a !== start);\n}\n\n// link every hole into the outer loop, producing a single-ring polygon without holes\nfunction eliminateHoles(data, holeIndices, outerNode, dim) {\n    var queue = [],\n        i, len, start, end, list;\n\n    for (i = 0, len = holeIndices.length; i < len; i++) {\n        start = holeIndices[i] * dim;\n        end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n        list = linkedList(data, start, end, dim, false);\n        if (list === list.next) list.steiner = true;\n        queue.push(getLeftmost(list));\n    }\n\n    queue.sort(compareX);\n\n    // process holes from left to right\n    for (i = 0; i < queue.length; i++) {\n        eliminateHole(queue[i], outerNode);\n        outerNode = filterPoints(outerNode, outerNode.next);\n    }\n\n    return outerNode;\n}\n\nfunction compareX(a, b) {\n    return a.x - b.x;\n}\n\n// find a bridge between vertices that connects hole with an outer ring and and link it\nfunction eliminateHole(hole, outerNode) {\n    outerNode = findHoleBridge(hole, outerNode);\n    if (outerNode) {\n        var b = splitPolygon(outerNode, hole);\n\n        // filter collinear points around the cuts\n        filterPoints(outerNode, outerNode.next);\n        filterPoints(b, b.next);\n    }\n}\n\n// David Eberly's algorithm for finding a bridge between hole and outer polygon\nfunction findHoleBridge(hole, outerNode) {\n    var p = outerNode,\n        hx = hole.x,\n        hy = hole.y,\n        qx = -Infinity,\n        m;\n\n    // find a segment intersected by a ray from the hole's leftmost point to the left;\n    // segment's endpoint with lesser x will be potential connection point\n    do {\n        if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {\n            var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);\n            if (x <= hx && x > qx) {\n                qx = x;\n                if (x === hx) {\n                    if (hy === p.y) return p;\n                    if (hy === p.next.y) return p.next;\n                }\n                m = p.x < p.next.x ? p : p.next;\n            }\n        }\n        p = p.next;\n    } while (p !== outerNode);\n\n    if (!m) return null;\n\n    if (hx === qx) return m; // hole touches outer segment; pick leftmost endpoint\n\n    // look for points inside the triangle of hole point, segment intersection and endpoint;\n    // if there are no points found, we have a valid connection;\n    // otherwise choose the point of the minimum angle with the ray as connection point\n\n    var stop = m,\n        mx = m.x,\n        my = m.y,\n        tanMin = Infinity,\n        tan;\n\n    p = m;\n\n    do {\n        if (hx >= p.x && p.x >= mx && hx !== p.x &&\n                pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {\n\n            tan = Math.abs(hy - p.y) / (hx - p.x); // tangential\n\n            if (locallyInside(p, hole) &&\n                (tan < tanMin || (tan === tanMin && (p.x > m.x || (p.x === m.x && sectorContainsSector(m, p)))))) {\n                m = p;\n                tanMin = tan;\n            }\n        }\n\n        p = p.next;\n    } while (p !== stop);\n\n    return m;\n}\n\n// whether sector in vertex m contains sector in vertex p in the same coordinates\nfunction sectorContainsSector(m, p) {\n    return area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;\n}\n\n// interlink polygon nodes in z-order\nfunction indexCurve(start, minX, minY, invSize) {\n    var p = start;\n    do {\n        if (p.z === null) p.z = zOrder(p.x, p.y, minX, minY, invSize);\n        p.prevZ = p.prev;\n        p.nextZ = p.next;\n        p = p.next;\n    } while (p !== start);\n\n    p.prevZ.nextZ = null;\n    p.prevZ = null;\n\n    sortLinked(p);\n}\n\n// Simon Tatham's linked list merge sort algorithm\n// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\nfunction sortLinked(list) {\n    var i, p, q, e, tail, numMerges, pSize, qSize,\n        inSize = 1;\n\n    do {\n        p = list;\n        list = null;\n        tail = null;\n        numMerges = 0;\n\n        while (p) {\n            numMerges++;\n            q = p;\n            pSize = 0;\n            for (i = 0; i < inSize; i++) {\n                pSize++;\n                q = q.nextZ;\n                if (!q) break;\n            }\n            qSize = inSize;\n\n            while (pSize > 0 || (qSize > 0 && q)) {\n\n                if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {\n                    e = p;\n                    p = p.nextZ;\n                    pSize--;\n                } else {\n                    e = q;\n                    q = q.nextZ;\n                    qSize--;\n                }\n\n                if (tail) tail.nextZ = e;\n                else list = e;\n\n                e.prevZ = tail;\n                tail = e;\n            }\n\n            p = q;\n        }\n\n        tail.nextZ = null;\n        inSize *= 2;\n\n    } while (numMerges > 1);\n\n    return list;\n}\n\n// z-order of a point given coords and inverse of the longer side of data bbox\nfunction zOrder(x, y, minX, minY, invSize) {\n    // coords are transformed into non-negative 15-bit integer range\n    x = 32767 * (x - minX) * invSize;\n    y = 32767 * (y - minY) * invSize;\n\n    x = (x | (x << 8)) & 0x00FF00FF;\n    x = (x | (x << 4)) & 0x0F0F0F0F;\n    x = (x | (x << 2)) & 0x33333333;\n    x = (x | (x << 1)) & 0x55555555;\n\n    y = (y | (y << 8)) & 0x00FF00FF;\n    y = (y | (y << 4)) & 0x0F0F0F0F;\n    y = (y | (y << 2)) & 0x33333333;\n    y = (y | (y << 1)) & 0x55555555;\n\n    return x | (y << 1);\n}\n\n// find the leftmost node of a polygon ring\nfunction getLeftmost(start) {\n    var p = start,\n        leftmost = start;\n    do {\n        if (p.x < leftmost.x || (p.x === leftmost.x && p.y < leftmost.y)) leftmost = p;\n        p = p.next;\n    } while (p !== start);\n\n    return leftmost;\n}\n\n// check if a point lies within a convex triangle\nfunction pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {\n    return (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 &&\n           (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 &&\n           (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;\n}\n\n// check if a diagonal between two polygon nodes is valid (lies in polygon interior)\nfunction isValidDiagonal(a, b) {\n    return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && // dones't intersect other edges\n           (locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && // locally visible\n            (area(a.prev, a, b.prev) || area(a, b.prev, b)) || // does not create opposite-facing sectors\n            equals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0); // special zero-length case\n}\n\n// signed area of a triangle\nfunction area(p, q, r) {\n    return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);\n}\n\n// check if two points are equal\nfunction equals(p1, p2) {\n    return p1.x === p2.x && p1.y === p2.y;\n}\n\n// check if two segments intersect\nfunction intersects(p1, q1, p2, q2) {\n    var o1 = sign(area(p1, q1, p2));\n    var o2 = sign(area(p1, q1, q2));\n    var o3 = sign(area(p2, q2, p1));\n    var o4 = sign(area(p2, q2, q1));\n\n    if (o1 !== o2 && o3 !== o4) return true; // general case\n\n    if (o1 === 0 && onSegment(p1, p2, q1)) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1\n    if (o2 === 0 && onSegment(p1, q2, q1)) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1\n    if (o3 === 0 && onSegment(p2, p1, q2)) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2\n    if (o4 === 0 && onSegment(p2, q1, q2)) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2\n\n    return false;\n}\n\n// for collinear points p, q, r, check if point q lies on segment pr\nfunction onSegment(p, q, r) {\n    return q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);\n}\n\nfunction sign(num) {\n    return num > 0 ? 1 : num < 0 ? -1 : 0;\n}\n\n// check if a polygon diagonal intersects any polygon segments\nfunction intersectsPolygon(a, b) {\n    var p = a;\n    do {\n        if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&\n                intersects(p, p.next, a, b)) return true;\n        p = p.next;\n    } while (p !== a);\n\n    return false;\n}\n\n// check if a polygon diagonal is locally inside the polygon\nfunction locallyInside(a, b) {\n    return area(a.prev, a, a.next) < 0 ?\n        area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 :\n        area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;\n}\n\n// check if the middle point of a polygon diagonal is inside the polygon\nfunction middleInside(a, b) {\n    var p = a,\n        inside = false,\n        px = (a.x + b.x) / 2,\n        py = (a.y + b.y) / 2;\n    do {\n        if (((p.y > py) !== (p.next.y > py)) && p.next.y !== p.y &&\n                (px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x))\n            inside = !inside;\n        p = p.next;\n    } while (p !== a);\n\n    return inside;\n}\n\n// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n// if one belongs to the outer ring and another to a hole, it merges it into a single ring\nfunction splitPolygon(a, b) {\n    var a2 = new Node(a.i, a.x, a.y),\n        b2 = new Node(b.i, b.x, b.y),\n        an = a.next,\n        bp = b.prev;\n\n    a.next = b;\n    b.prev = a;\n\n    a2.next = an;\n    an.prev = a2;\n\n    b2.next = a2;\n    a2.prev = b2;\n\n    bp.next = b2;\n    b2.prev = bp;\n\n    return b2;\n}\n\n// create a node and optionally link it with previous one (in a circular doubly linked list)\nfunction insertNode(i, x, y, last) {\n    var p = new Node(i, x, y);\n\n    if (!last) {\n        p.prev = p;\n        p.next = p;\n\n    } else {\n        p.next = last.next;\n        p.prev = last;\n        last.next.prev = p;\n        last.next = p;\n    }\n    return p;\n}\n\nfunction removeNode(p) {\n    p.next.prev = p.prev;\n    p.prev.next = p.next;\n\n    if (p.prevZ) p.prevZ.nextZ = p.nextZ;\n    if (p.nextZ) p.nextZ.prevZ = p.prevZ;\n}\n\nfunction Node(i, x, y) {\n    // vertex index in coordinates array\n    this.i = i;\n\n    // vertex coordinates\n    this.x = x;\n    this.y = y;\n\n    // previous and next vertex nodes in a polygon ring\n    this.prev = null;\n    this.next = null;\n\n    // z-order curve value\n    this.z = null;\n\n    // previous and next nodes in z-order\n    this.prevZ = null;\n    this.nextZ = null;\n\n    // indicates whether this is a steiner point\n    this.steiner = false;\n}\n\n// return a percentage difference between the polygon area and its triangulation area;\n// used to verify correctness of triangulation\nearcut.deviation = function (data, holeIndices, dim, triangles) {\n    var hasHoles = holeIndices && holeIndices.length;\n    var outerLen = hasHoles ? holeIndices[0] * dim : data.length;\n\n    var polygonArea = Math.abs(signedArea(data, 0, outerLen, dim));\n    if (hasHoles) {\n        for (var i = 0, len = holeIndices.length; i < len; i++) {\n            var start = holeIndices[i] * dim;\n            var end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n            polygonArea -= Math.abs(signedArea(data, start, end, dim));\n        }\n    }\n\n    var trianglesArea = 0;\n    for (i = 0; i < triangles.length; i += 3) {\n        var a = triangles[i] * dim;\n        var b = triangles[i + 1] * dim;\n        var c = triangles[i + 2] * dim;\n        trianglesArea += Math.abs(\n            (data[a] - data[c]) * (data[b + 1] - data[a + 1]) -\n            (data[a] - data[b]) * (data[c + 1] - data[a + 1]));\n    }\n\n    return polygonArea === 0 && trianglesArea === 0 ? 0 :\n        Math.abs((trianglesArea - polygonArea) / polygonArea);\n};\n\nfunction signedArea(data, start, end, dim) {\n    var sum = 0;\n    for (var i = start, j = end - dim; i < end; i += dim) {\n        sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);\n        j = i;\n    }\n    return sum;\n}\n\n// turn a polygon in a multi-dimensional array form (e.g. as in GeoJSON) into a form Earcut accepts\nearcut.flatten = function (data) {\n    var dim = data[0][0].length,\n        result = {vertices: [], holes: [], dimensions: dim},\n        holeIndex = 0;\n\n    for (var i = 0; i < data.length; i++) {\n        for (var j = 0; j < data[i].length; j++) {\n            for (var d = 0; d < dim; d++) result.vertices.push(data[i][j][d]);\n        }\n        if (i > 0) {\n            holeIndex += data[i - 1].length;\n            result.holes.push(holeIndex);\n        }\n    }\n    return result;\n};\n","/*\r\n (c) 2017, Vladimir Agafonkin\r\n Simplify.js, a high-performance JS polyline simplification library\r\n mourner.github.io/simplify-js\r\n*/\r\n\r\n// to suit your point format, run search/replace for '.x' and '.y';\r\n// for 3D version, see 3d branch (configurability would draw significant performance overhead)\r\n\r\n// square distance between 2 points\r\nfunction getSqDist(p1, p2) {\r\n\r\n    var dx = p1[0] - p2[0],\r\n        dy = p1[1] - p2[1];\r\n\r\n    return dx * dx + dy * dy;\r\n}\r\n\r\n// square distance from a point to a segment\r\nfunction getSqSegDist(p, p1, p2) {\r\n\r\n    var x = p1[0],\r\n        y = p1[1],\r\n        dx = p2[0] - x,\r\n        dy = p2[1] - y;\r\n\r\n    if (dx !== 0 || dy !== 0) {\r\n\r\n        var t = ((p[0] - x) * dx + (p[1] - y) * dy) / (dx * dx + dy * dy);\r\n\r\n        if (t > 1) {\r\n            x = p2[0];\r\n            y = p2[1];\r\n\r\n        } else if (t > 0) {\r\n            x += dx * t;\r\n            y += dy * t;\r\n        }\r\n    }\r\n\r\n    dx = p[0] - x;\r\n    dy = p[1] - y;\r\n\r\n    return dx * dx + dy * dy;\r\n}\r\n// rest of the code doesn't care about point format\r\n\r\n// basic distance-based simplification\r\nfunction simplifyRadialDist(points, sqTolerance) {\r\n\r\n    var prevPoint = points[0],\r\n        newPoints = [prevPoint],\r\n        point;\r\n\r\n    for (var i = 1, len = points.length; i < len; i++) {\r\n        point = points[i];\r\n\r\n        if (getSqDist(point, prevPoint) > sqTolerance) {\r\n            newPoints.push(point);\r\n            prevPoint = point;\r\n        }\r\n    }\r\n\r\n    if (prevPoint !== point) newPoints.push(point);\r\n\r\n    return newPoints;\r\n}\r\n\r\nfunction simplifyDPStep(points, first, last, sqTolerance, simplified) {\r\n    var maxSqDist = sqTolerance,\r\n        index;\r\n\r\n    for (var i = first + 1; i < last; i++) {\r\n        var sqDist = getSqSegDist(points[i], points[first], points[last]);\r\n\r\n        if (sqDist > maxSqDist) {\r\n            index = i;\r\n            maxSqDist = sqDist;\r\n        }\r\n    }\r\n\r\n    if (maxSqDist > sqTolerance) {\r\n        if (index - first > 1) simplifyDPStep(points, first, index, sqTolerance, simplified);\r\n        simplified.push(points[index]);\r\n        if (last - index > 1) simplifyDPStep(points, index, last, sqTolerance, simplified);\r\n    }\r\n}\r\n\r\n// simplification using Ramer-Douglas-Peucker algorithm\r\nfunction simplifyDouglasPeucker(points, sqTolerance) {\r\n    var last = points.length - 1;\r\n\r\n    var simplified = [points[0]];\r\n    simplifyDPStep(points, 0, last, sqTolerance, simplified);\r\n    simplified.push(points[last]);\r\n\r\n    return simplified;\r\n}\r\n\r\n// both algorithms combined for awesome performance\r\nfunction simplify(points, tolerance, highestQuality) {\r\n\r\n    if (points.length <= 2) return points;\r\n\r\n    var sqTolerance = tolerance !== undefined ? tolerance * tolerance : 1;\r\n\r\n    points = highestQuality ? points : simplifyRadialDist(points, sqTolerance);\r\n    points = simplifyDouglasPeucker(points, sqTolerance);\r\n\r\n    return points;\r\n}\r\nexport default simplify;","export function dot(v1, v2) {\r\n    return v1[0] * v2[0] + v1[1] * v2[1] + v1[2] * v2[2];\r\n}\r\nexport function v2Dot(v1, v2) {\r\n    return v1[0] * v2[0] + v1[1] * v2[1];\r\n}\r\n\r\nexport function normalize(out, v) {\r\n    const x = v[0];\r\n    const y = v[1];\r\n    const z = v[2];\r\n    const d = Math.sqrt(x * x + y * y + z * z);\r\n    out[0] = x / d;\r\n    out[1] = y / d;\r\n    out[2] = z / d;\r\n    return out;\r\n}\r\n\r\nexport function v2Normalize(out, v) {\r\n    const x = v[0];\r\n    const y = v[1];\r\n    const d = Math.sqrt(x * x + y * y);\r\n    out[0] = x / d;\r\n    out[1] = y / d;\r\n    return out;\r\n}\r\n\r\nexport function scale(out, v, s) {\r\n    out[0] = v[0] * s;\r\n    out[1] = v[1] * s;\r\n    out[2] = v[2] * s;\r\n    return out;\r\n}\r\n\r\nexport function mul(out, v1, v2) {\r\n    out[0] = v1[0] * v2[0];\r\n    out[1] = v1[1] * v2[1];\r\n    out[2] = v1[2] * v2[2];\r\n    return out;\r\n}\r\n\r\nexport function scaleAndAdd(out, v1, v2, s) {\r\n    out[0] = v1[0] + v2[0] * s;\r\n    out[1] = v1[1] + v2[1] * s;\r\n    out[2] = v1[2] + v2[2] * s;\r\n    return out;\r\n}\r\n\r\nexport function add(out, v1, v2) {\r\n    out[0] = v1[0] + v2[0];\r\n    out[1] = v1[1] + v2[1];\r\n    out[2] = v1[2] + v2[2];\r\n    return out;\r\n}\r\n\r\nexport function v2Add(out, v1, v2) {\r\n    out[0] = v1[0] + v2[0];\r\n    out[1] = v1[1] + v2[1];\r\n    return out;\r\n}\r\n\r\nexport function sub(out, v1, v2) {\r\n    out[0] = v1[0] - v2[0];\r\n    out[1] = v1[1] - v2[1];\r\n    out[2] = v1[2] - v2[2];\r\n    return out;\r\n}\r\n\r\nexport function v2Sub(out, v1, v2) {\r\n    out[0] = v1[0] - v2[0];\r\n    out[1] = v1[1] - v2[1];\r\n    return out;\r\n}\r\n\r\nexport function v3Sub(out, v1, v2) {\r\n    out[0] = v1[0] - v2[0];\r\n    out[1] = v1[1] - v2[1];\r\n    out[2] = v1[2] - v2[2];\r\n    return out;\r\n}\r\n\r\nexport function v3Normalize(out, v) {\r\n    const x = v[0];\r\n    const y = v[1];\r\n    const z = v[2];\r\n    const d = Math.sqrt(x * x + y * y + z * z);\r\n    out[0] = x / d;\r\n    out[1] = y / d;\r\n    out[2] = z / d;\r\n    return out;\r\n}\r\n\r\nexport function v3Cross(out, v1, v2) {\r\n    var ax = v1[0], ay = v1[1], az = v1[2],\r\n        bx = v2[0], by = v2[1], bz = v2[2];\r\n\r\n    out[0] = ay * bz - az * by;\r\n    out[1] = az * bx - ax * bz;\r\n    out[2] = ax * by - ay * bx;\r\n    return out;\r\n}\r\n\r\nconst rel = [];\r\n// start and end must be normalized\r\nexport function slerp(out, start, end, t) {\r\n    // https://keithmaggio.wordpress.com/2011/02/15/math-magician-lerp-slerp-and-nlerp/\r\n    const cosT = dot(start, end);\r\n    const theta = Math.acos(cosT) * t;\r\n\r\n    scaleAndAdd(rel, end, start, -cosT);\r\n    normalize(rel, rel);// start and rel Orthonormal basis\r\n\r\n    scale(out, start, Math.cos(theta));\r\n    scaleAndAdd(out, out, rel, Math.sin(theta));\r\n\r\n    return out;\r\n}\r\n\r\nexport function lineIntersection(x1, y1, x2, y2, x3, y3, x4, y4, out, writeOffset) {\r\n    const dx1 = x2 - x1;\r\n    const dx2 = x4 - x3;\r\n    const dy1 = y2 - y1;\r\n    const dy2 = y4 - y3;\r\n\r\n    const cross = dy2 * dx1 - dx2 * dy1;\r\n    const tmp1 = y1 - y3;\r\n    const tmp2 = x1 - x3;\r\n    const t1 = (dx2 * tmp1 - dy2 * tmp2) / cross;\r\n    // const t2 = (dx1 * tmp1 - dy1 * tmp2) / cross;\r\n\r\n    out[writeOffset] = x1 + t1 * (x2 - x1);\r\n    out[writeOffset + 1] = y1 + t1 * (y2 - y1);\r\n\r\n    return t1;\r\n}\r\n\r\nexport function area(points, start, end) {\r\n    // Signed polygon area\r\n    const n = end - start;\r\n    if (n < 3) {\r\n        return 0;\r\n    }\r\n    let area = 0;\r\n    for (let i = (end - 1) * 2, j = start * 2; j < end * 2;) {\r\n        const x0 = points[i];\r\n        const y0 = points[i + 1];\r\n        const x1 = points[j];\r\n        const y1 = points[j + 1];\r\n        i = j;\r\n        j += 2;\r\n        area += x0 * y1 - x1 * y0;\r\n    }\r\n\r\n    return area;\r\n}\r\n\r\n\r\nexport function triangleArea(x0, y0, x1, y1, x2, y2) {\r\n    return (x1 - x0) * (y2 - y1) - (y1 - y0) * (x2 - x1);\r\n}","// TODO fitRect x, y are negative?\r\n// TODO Dimensions\r\n// TODO bevel=\"top\"|\"bottom\"\r\n\r\nimport earcut from 'earcut';\r\nimport doSimplify from './simplify';\r\nimport {\r\n    slerp, v2Normalize, v2Dot, v2Add, area,\r\n    v3Normalize, v3Sub, v3Cross\r\n} from './math';\r\n\r\nexport function triangulate(vertices, holes, dimensions=2) {\r\n    return earcut(vertices, holes, dimensions);\r\n};\r\n\r\nexport function flatten(data) {\r\n    return earcut.flatten(data);\r\n}\r\n\r\nconst v1 = [];\r\nconst v2 = [];\r\nconst v = [];\r\n\r\nfunction innerOffsetPolygon(\r\n    vertices, out, start, end, outStart, offset, miterLimit, close\r\n) {\r\n    const checkMiterLimit = miterLimit != null;\r\n    let outOff = outStart;\r\n    let indicesMap = null;\r\n    if (checkMiterLimit) {\r\n        indicesMap = new Uint32Array(end - start);\r\n    }\r\n    for (let i = start; i < end; i++) {\r\n        const nextIdx = i === end - 1 ? start : i + 1;\r\n        const prevIdx = i === start ? end - 1 : i - 1;\r\n        const x1 = vertices[prevIdx * 2];\r\n        const y1 = vertices[prevIdx * 2 + 1];\r\n        const x2 = vertices[i * 2];\r\n        const y2 = vertices[i * 2 + 1];\r\n        const x3 = vertices[nextIdx * 2];\r\n        const y3 = vertices[nextIdx * 2 + 1];\r\n\r\n        v1[0] = x2 - x1;\r\n        v1[1] = y2 - y1;\r\n        v2[0] = x3 - x2;\r\n        v2[1] = y3 - y2;\r\n\r\n        v2Normalize(v1, v1);\r\n        v2Normalize(v2, v2);\r\n\r\n        checkMiterLimit && (indicesMap[i] = outOff);\r\n        if (!close && i === start) {\r\n            v[0] = v2[1];\r\n            v[1] = -v2[0];\r\n            v2Normalize(v, v);\r\n            out[outOff * 2] = x2 + v[0] * offset;\r\n            out[outOff * 2 + 1] = y2 + v[1] * offset;\r\n            outOff++;\r\n        }\r\n        else if (!close && i === end - 1) {\r\n            v[0] = v1[1];\r\n            v[1] = -v1[0];\r\n            v2Normalize(v, v);\r\n            out[outOff * 2] = x2 + v[0] * offset;\r\n            out[outOff * 2 + 1] = y2 + v[1] * offset;\r\n            outOff++;\r\n        }\r\n        else {\r\n            // PENDING Why using sub will lost the direction info.\r\n            v2Add(v, v2, v1);\r\n            const tmp = v[1];\r\n            v[1] = -v[0];\r\n            v[0] = tmp;\r\n\r\n            v2Normalize(v, v);\r\n\r\n            const cosA = v2Dot(v, v2);\r\n            const sinA = Math.sqrt(1 - cosA * cosA);\r\n            // PENDING\r\n            const miter = offset * Math.min(10, 1 / sinA);\r\n\r\n            const isCovex = offset * cosA < 0;\r\n\r\n            if (checkMiterLimit && (1 / sinA) > miterLimit && isCovex) {\r\n                const mx = x2 + v[0] * offset;\r\n                const my = y2 + v[1] * offset;\r\n                const halfA = Math.acos(sinA) / 2;\r\n                const dist = Math.tan(halfA) * Math.abs(offset);\r\n                out[outOff * 2] = mx + v[1] * dist;\r\n                out[outOff * 2 + 1] = my - v[0] * dist;\r\n                outOff++;\r\n                out[outOff * 2] = mx - v[1] * dist;\r\n                out[outOff * 2 + 1] = my + v[0] * dist;\r\n                outOff++;\r\n            }\r\n            else {\r\n                out[outOff * 2] = x2 + v[0] * miter;\r\n                out[outOff * 2 + 1] = y2 + v[1] * miter;\r\n                outOff++;\r\n            }\r\n        }\r\n    }\r\n\r\n    return indicesMap;\r\n}\r\n\r\nexport function offsetPolygon(vertices, holes, offset, miterLimit, close) {\r\n    const offsetVertices = miterLimit != null ? [] : new Float32Array(vertices.length);\r\n    const exteriorSize = (holes && holes.length) ? holes[0] : vertices.length / 2;\r\n\r\n    innerOffsetPolygon(\r\n        vertices, offsetVertices, 0, exteriorSize, 0, offset, miterLimit, close, false\r\n    );\r\n\r\n    if (holes) {\r\n        for (let i = 0; i < holes.length; i++) {\r\n            const start = holes[i];\r\n            const end = holes[i + 1] || vertices.length / 2;\r\n            innerOffsetPolygon(\r\n                vertices, offsetVertices, start, end,\r\n                miterLimit != null ? offsetVertices.length / 2 : start,\r\n                offset, miterLimit, close\r\n            );\r\n        }\r\n    }\r\n\r\n    return offsetVertices;\r\n}\r\n\r\nfunction reversePoints(points, stride, start, end) {\r\n    for (let i = 0; i < Math.floor((end - start) / 2); i++) {\r\n        for (let j = 0; j < stride; j++) {\r\n            const a = (i + start) * stride + j;\r\n            const b = (end - i - 1) * stride + j;\r\n            const tmp = points[a];\r\n            points[a] = points[b];\r\n            points[b] = tmp;\r\n        }\r\n    }\r\n\r\n    return points;\r\n}\r\n\r\nfunction convertToClockwise(vertices, holes) {\r\n    let polygonVertexCount = vertices.length / 2;\r\n    let start = 0;\r\n    let end = holes && holes.length ? holes[0] : polygonVertexCount;\r\n    if (area(vertices, start, end) > 0) {\r\n        reversePoints(vertices, 2, start, end);\r\n    }\r\n    for (let h = 1; h < (holes ? holes.length : 0) + 1; h++) {\r\n        start = holes[h - 1];\r\n        end = holes[h] || polygonVertexCount;\r\n        if (area(vertices, start, end) < 0) {\r\n            reversePoints(vertices, 2, start, end);\r\n        }\r\n    }\r\n}\r\n\r\nfunction normalizeOpts(opts) {\r\n\r\n    opts.depth = opts.depth || 1;\r\n    opts.bevelSize = opts.bevelSize || 0;\r\n    opts.bevelSegments = opts.bevelSegments == null ? 2 : opts.bevelSegments;\r\n    opts.smoothSide = opts.smoothSide || false;\r\n    opts.smoothBevel = opts.smoothBevel || false;\r\n    opts.simplify = opts.simplify || 0;\r\n\r\n    // Normalize bevel options.\r\n    if (typeof opts.depth === 'number') {\r\n        opts.bevelSize = Math.min(!(opts.bevelSegments > 0) ? 0 : opts.bevelSize, opts.depth / 2);\r\n    }\r\n    if (!(opts.bevelSize > 0)) {\r\n        opts.bevelSegments = 0;\r\n    }\r\n    opts.bevelSegments = Math.round(opts.bevelSegments);\r\n\r\n    const boundingRect = opts.boundingRect;\r\n    opts.translate = opts.translate || [0, 0];\r\n    opts.scale = opts.scale || [1, 1];\r\n    if (opts.fitRect) {\r\n        let targetX = opts.fitRect.x == null\r\n            ? (boundingRect.x || 0)\r\n            : opts.fitRect.x;\r\n        let targetY = opts.fitRect.y == null\r\n            ? (boundingRect.y || 0)\r\n            : opts.fitRect.y;\r\n        let targetWidth = opts.fitRect.width;\r\n        let targetHeight = opts.fitRect.height;\r\n        if (targetWidth == null) {\r\n            if (targetHeight != null) {\r\n                targetWidth = targetHeight / boundingRect.height * boundingRect.width;\r\n            }\r\n            else {\r\n                targetWidth = boundingRect.width;\r\n                targetHeight = boundingRect.height;\r\n            }\r\n        }\r\n        else if (targetHeight == null) {\r\n            targetHeight = targetWidth / boundingRect.width * boundingRect.height;\r\n        }\r\n        opts.scale = [\r\n            targetWidth / boundingRect.width,\r\n            targetHeight / boundingRect.height\r\n        ];\r\n        opts.translate = [\r\n            (targetX - boundingRect.x) * opts.scale[0],\r\n            (targetY - boundingRect.y) * opts.scale[1]\r\n        ];\r\n    }\r\n}\r\n\r\nfunction generateNormal(indices, position) {\r\n\r\n    function v3Set(p, a, b, c) {\r\n        p[0] = a; p[1] = b; p[2] = c;\r\n    }\r\n\r\n    const p1 = [];\r\n    const p2 = [];\r\n    const p3 = [];\r\n\r\n    const v21 = [];\r\n    const v32 = [];\r\n\r\n    const n = [];\r\n\r\n    const len = indices.length;\r\n    const normals = new Float32Array(position.length);\r\n    for (let f = 0; f < len;) {\r\n        const i1 = indices[f++] * 3;\r\n        const i2 = indices[f++] * 3;\r\n        const i3 = indices[f++] * 3;\r\n\r\n        v3Set(p1, position[i1], position[i1 + 1], position[i1 + 2]);\r\n        v3Set(p2, position[i2], position[i2 + 1], position[i2 + 2]);\r\n        v3Set(p3, position[i3], position[i3 + 1], position[i3 + 2]);\r\n\r\n        v3Sub(v21, p1, p2);\r\n        v3Sub(v32, p2, p3);\r\n        v3Cross(n, v21, v32);\r\n        // Already be weighted by the triangle area\r\n        for (let i = 0; i < 3; i++) {\r\n            normals[i1 + i] = normals[i1 + i] + n[i];\r\n            normals[i2 + i] = normals[i2 + i] + n[i];\r\n            normals[i3 + i] = normals[i3 + i] + n[i];\r\n        }\r\n    }\r\n\r\n    for (var i = 0; i < normals.length;) {\r\n        v3Set(n, normals[i], normals[i+1], normals[i+2]);\r\n        v3Normalize(n, n);\r\n        normals[i++] = n[0];\r\n        normals[i++] = n[1];\r\n        normals[i++] = n[2];\r\n    }\r\n\r\n    return normals;\r\n}\r\n// 0,0----1,0\r\n// 0,1----1,1\r\nconst quadToTriangle = [\r\n    [0, 0], [1, 0], [1, 1],\r\n    [0, 0], [1, 1], [0, 1]\r\n];\r\n\r\n// Add side vertices and indices. Include bevel.\r\nfunction addExtrudeSide(\r\n    out, {vertices, topVertices, depth, rect}, start, end,\r\n    cursors, opts\r\n) {\r\n    const ringVertexCount = end - start;\r\n    const splitSide = opts.smoothSide ? 1 : 2;\r\n    const splitRingVertexCount = ringVertexCount * splitSide;\r\n\r\n    const splitBevel = opts.smoothBevel ? 1 : 2;\r\n    const bevelSize = Math.min(depth / 2, opts.bevelSize);\r\n    const bevelSegments = opts.bevelSegments;\r\n    const vertexOffset = cursors.vertex;\r\n    const size = Math.max(rect.width, rect.height, depth);\r\n\r\n    // Side vertices\r\n    if (bevelSize > 0) {\r\n\r\n        const v0 = [0, 0, 1];\r\n        const v1 = [];\r\n        const v2 = [0, 0, -1];\r\n        const v = [];\r\n\r\n        let ringCount = 0;\r\n        let vLen = new Float32Array(ringVertexCount);\r\n        for (let k = 0; k < 2; k++) {\r\n            const z = (k === 0 ? (depth - bevelSize) : bevelSize);\r\n            for (let s = 0; s <= bevelSegments * splitBevel; s++) {\r\n                let uLen = 0;\r\n                let prevX;\r\n                let prevY;\r\n                for (let i = 0; i < ringVertexCount; i++) {\r\n\r\n                    for (let j = 0; j < splitSide; j++) {\r\n                        // TODO Cache and optimize\r\n                        let idx = ((i + j) % ringVertexCount + start) * 2;\r\n                        v1[0] = vertices[idx] - topVertices[idx];\r\n                        v1[1] = vertices[idx + 1] - topVertices[idx + 1];\r\n                        v1[2] = 0;\r\n                        const l = Math.sqrt(v1[0] * v1[0] + v1[1] * v1[1]);\r\n                        v1[0] /= l;\r\n                        v1[1] /= l;\r\n\r\n                        const t = (Math.floor(s / splitBevel) + (s % splitBevel)) / bevelSegments;\r\n                        k === 0 ? slerp(v, v0, v1, t)\r\n                            : slerp(v, v1, v2, t);\r\n\r\n                        const t2 = k === 0  ? t : 1 - t;\r\n                        const a = bevelSize * Math.sin(t2 * Math.PI / 2);\r\n                        const b = l * Math.cos(t2 * Math.PI / 2);\r\n\r\n                        // ellipse radius\r\n                        const r = bevelSize * l / Math.sqrt(a * a + b * b);\r\n\r\n                        const x = v[0] * r + topVertices[idx];\r\n                        const y = v[1] * r + topVertices[idx + 1];\r\n                        const zz = v[2] * r + z;\r\n                        out.position[cursors.vertex * 3] = x;\r\n                        out.position[cursors.vertex * 3 + 1] = y;\r\n                        out.position[cursors.vertex * 3 + 2] = zz;\r\n\r\n                        // TODO Cache and optimize\r\n                        if (i > 0 || j > 0) {\r\n                            uLen += Math.sqrt((prevX - x) * (prevX - x) + (prevY - y) * (prevY - y));\r\n                        }\r\n                        if (s > 0 || k > 0) {\r\n                            let tmp = (cursors.vertex - splitRingVertexCount) * 3;\r\n                            let prevX2 = out.position[tmp];\r\n                            let prevY2 = out.position[tmp + 1];\r\n                            let prevZ2 = out.position[tmp + 2];\r\n\r\n                            vLen[i] += Math.sqrt(\r\n                                (prevX2 - x) * (prevX2 - x)\r\n                                + (prevY2 - y) * (prevY2 - y)\r\n                                + (prevZ2 - zz) * (prevZ2 - zz)\r\n                            );\r\n                        }\r\n                        out.uv[cursors.vertex * 2] = uLen / size;\r\n                        out.uv[cursors.vertex * 2 + 1] = vLen[i] / size;\r\n\r\n                        prevX = x;\r\n                        prevY = y;\r\n                        cursors.vertex++;\r\n                    }\r\n\r\n                    if ((splitBevel > 1 && (s % splitBevel)) || (splitBevel === 1 && s >= 1)) {\r\n                        for (let f = 0; f < 6; f++) {\r\n                            const m = (quadToTriangle[f][0] + i * splitSide) % splitRingVertexCount;\r\n                            const n = quadToTriangle[f][1] + ringCount;\r\n                            out.indices[cursors.index++] = (n - 1) * splitRingVertexCount + m + vertexOffset;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                ringCount++;\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        for (let k = 0; k < 2; k++) {\r\n            const z = k === 0 ? depth - bevelSize : bevelSize;\r\n            let uLen = 0;\r\n            let prevX;\r\n            let prevY;\r\n            for (let i = 0; i < ringVertexCount; i++) {\r\n                for (let m = 0; m < splitSide; m++) {\r\n                    const idx = ((i + m) % ringVertexCount + start) * 2;\r\n                    const x = vertices[idx];\r\n                    const y = vertices[idx + 1];\r\n                    out.position[cursors.vertex * 3] = x;\r\n                    out.position[cursors.vertex * 3 + 1] = y;\r\n                    out.position[cursors.vertex * 3 + 2] = z;\r\n                    if (i > 0 || m > 0) {\r\n                        uLen += Math.sqrt((prevX - x) * (prevX - x) + (prevY - y) * (prevY - y));\r\n                    }\r\n                    out.uv[cursors.vertex * 2] = uLen / size;\r\n                    out.uv[cursors.vertex * 2 + 1] = z / size;\r\n                    prevX = x;\r\n                    prevY = y;\r\n\r\n                    cursors.vertex++;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // Connect the side\r\n    const sideStartRingN = bevelSize > 0 ? (bevelSegments * splitBevel + 1) : 1;\r\n    for (let i = 0; i < ringVertexCount; i++) {\r\n        for (let f = 0; f < 6; f++) {\r\n            const m = (quadToTriangle[f][0] + i * splitSide) % splitRingVertexCount;\r\n            const n = quadToTriangle[f][1] + sideStartRingN;\r\n            out.indices[cursors.index++] = (n - 1) * splitRingVertexCount + m + vertexOffset;\r\n        }\r\n    }\r\n}\r\n\r\nfunction addTopAndBottom({indices, vertices, topVertices, rect, depth}, out, cursors, opts) {\r\n    if (vertices.length <= 4) {\r\n        return;\r\n    }\r\n\r\n    const vertexOffset = cursors.vertex;\r\n    // Top indices\r\n    const indicesLen = indices.length;\r\n    for (let i = 0; i < indicesLen; i++) {\r\n        out.indices[cursors.index++] = vertexOffset + indices[i];\r\n    }\r\n    const size = Math.max(rect.width, rect.height);\r\n    // Top and bottom vertices\r\n    for (let k = 0; k < (opts.excludeBottom ? 1 : 2); k++) {\r\n        for (let i = 0; i < topVertices.length; i += 2) {\r\n            const x = topVertices[i];\r\n            const y = topVertices[i + 1];\r\n            out.position[cursors.vertex * 3] = x;\r\n            out.position[cursors.vertex * 3 + 1] = y;\r\n            out.position[cursors.vertex * 3 + 2] = (1 - k) * depth;\r\n\r\n            out.uv[cursors.vertex * 2] = (x - rect.x) / size;\r\n            out.uv[cursors.vertex * 2 + 1] = (y - rect.y) / size;\r\n            cursors.vertex++;\r\n        }\r\n    }\r\n    // Bottom indices\r\n    if (!opts.excludeBottom) {\r\n        const vertexCount = vertices.length / 2;\r\n        for (let i = 0; i < indicesLen; i += 3) {\r\n            for (let k = 0; k < 3; k++) {\r\n                out.indices[cursors.index++] = vertexOffset + vertexCount + indices[i + 2 - k];\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\nfunction innerExtrudeTriangulatedPolygon(preparedData, opts) {\r\n    let indexCount = 0;\r\n    let vertexCount = 0;\r\n\r\n    for (let p = 0; p < preparedData.length; p++) {\r\n        const {indices, vertices, holes, depth} = preparedData[p];\r\n        const polygonVertexCount = vertices.length / 2;\r\n        const bevelSize = Math.min(depth / 2, opts.bevelSize);\r\n        const bevelSegments = !(bevelSize > 0) ? 0 : opts.bevelSegments;\r\n\r\n        indexCount += indices.length * (opts.excludeBottom ? 1 : 2);\r\n        vertexCount += polygonVertexCount * (opts.excludeBottom ? 1 : 2);\r\n        const ringCount = 2 + bevelSegments * 2;\r\n\r\n        let start = 0;\r\n        let end = 0;\r\n        for (let h = 0; h < (holes ? holes.length : 0) + 1; h++) {\r\n            if (h === 0) {\r\n                end = holes && holes.length ? holes[0] : polygonVertexCount;\r\n            }\r\n            else {\r\n                start = holes[h - 1];\r\n                end = holes[h] || polygonVertexCount;\r\n            }\r\n\r\n            indexCount += (end - start) * 6 * (ringCount - 1);\r\n\r\n            const sideRingVertexCount = (end - start) * (opts.smoothSide ? 1 : 2);\r\n            vertexCount += sideRingVertexCount * ringCount\r\n                // Double the bevel vertex number if not smooth\r\n                + (!opts.smoothBevel ? bevelSegments * sideRingVertexCount * 2 : 0);\r\n        }\r\n    }\r\n\r\n    const data = {\r\n        position: new Float32Array(vertexCount * 3),\r\n        indices: new (vertexCount > 0xffff ? Uint32Array : Uint16Array)(indexCount),\r\n        uv: new Float32Array(vertexCount * 2)\r\n    };\r\n\r\n    const cursors = {\r\n        vertex: 0, index: 0\r\n    };\r\n\r\n    for (let d = 0; d < preparedData.length; d++) {\r\n        addTopAndBottom(preparedData[d], data, cursors, opts);\r\n    }\r\n\r\n    for (let d = 0; d < preparedData.length; d++) {\r\n        const {holes, vertices} = preparedData[d];\r\n        const topVertexCount = vertices.length / 2;\r\n\r\n        let start = 0;\r\n        let end = (holes && holes.length) ? holes[0] : topVertexCount;\r\n        // Add exterior\r\n        addExtrudeSide(data, preparedData[d], start, end, cursors, opts);\r\n        // Add holes\r\n        if (holes) {\r\n            for (let h = 0; h < holes.length; h++) {\r\n                start = holes[h];\r\n                end = holes[h + 1] || topVertexCount;\r\n                addExtrudeSide(data, preparedData[d], start, end, cursors, opts);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Wrap uv\r\n    for (let i = 0; i < data.uv.length; i++) {\r\n        const val = data.uv[i];\r\n        if (val > 0 && Math.round(val) === val) {\r\n            data.uv[i] = 1;\r\n        }\r\n        else {\r\n            data.uv[i] = val % 1;\r\n        }\r\n    }\r\n\r\n    data.normal = generateNormal(data.indices, data.position);\r\n    // PENDING\r\n    data.boundingRect = preparedData[0] && preparedData[0].rect;\r\n\r\n    return data;\r\n}\r\n\r\nfunction convertPolylineToTriangulatedPolygon(polyline, polylineIdx, opts) {\r\n    const lineWidth = opts.lineWidth;\r\n    const pointCount = polyline.length;\r\n    const points = new Float32Array(pointCount * 2);\r\n    const translate = opts.translate || [0, 0];\r\n    const scale = opts.scale || [1, 1];\r\n    for (let i = 0, k = 0; i < pointCount; i++) {\r\n        points[k++] = polyline[i][0] * scale[0] + translate[0];\r\n        points[k++] = polyline[i][1] * scale[1] + translate[1];\r\n    }\r\n\r\n    if (area(points, 0, pointCount) < 0) {\r\n        reversePoints(points, 2, 0, pointCount);\r\n    }\r\n\r\n    const insidePoints = [];\r\n    const outsidePoints = [];\r\n    const miterLimit = opts.miterLimit;\r\n    const outsideIndicesMap = innerOffsetPolygon(\r\n        points, outsidePoints, 0, pointCount, 0, -lineWidth / 2, miterLimit, false\r\n    );\r\n    reversePoints(points, 2, 0, pointCount);\r\n    const insideIndicesMap = innerOffsetPolygon(\r\n        points, insidePoints, 0, pointCount, 0, -lineWidth / 2, miterLimit, false\r\n    );\r\n\r\n    const polygonVertexCount = (insidePoints.length + outsidePoints.length) / 2;\r\n    const polygonVertices = new Float32Array(polygonVertexCount * 2);\r\n\r\n    let offset = 0;\r\n    const outsidePointCount = outsidePoints.length / 2;\r\n    for (let i = 0; i < outsidePoints.length; i++) {\r\n        polygonVertices[offset++] = outsidePoints[i];\r\n    }\r\n    for (let i = 0; i < insidePoints.length; i++) {\r\n        polygonVertices[offset++] = insidePoints[i];\r\n    }\r\n\r\n    // Built indices\r\n    const indices = new (polygonVertexCount > 0xffff ? Uint32Array : Uint16Array)(\r\n        ((pointCount - 1) * 2 + (polygonVertexCount - pointCount * 2)) * 3\r\n    );\r\n    let off = 0;\r\n    for (let i = 0; i < pointCount - 1; i++) {\r\n        const i2 = i + 1;\r\n        indices[off++] = outsidePointCount - 1 - outsideIndicesMap[i];\r\n        indices[off++] = outsidePointCount - 1 - outsideIndicesMap[i] - 1;\r\n        indices[off++] = insideIndicesMap[i] + 1 + outsidePointCount;\r\n\r\n        indices[off++] = outsidePointCount - 1 - outsideIndicesMap[i];\r\n        indices[off++] = insideIndicesMap[i] + 1 + outsidePointCount;\r\n        indices[off++] = insideIndicesMap[i] + outsidePointCount;\r\n\r\n        if (insideIndicesMap[i2] - insideIndicesMap[i] === 2) {\r\n            indices[off++] = insideIndicesMap[i] + 2 + outsidePointCount;\r\n            indices[off++] = insideIndicesMap[i] + 1 + outsidePointCount;\r\n            indices[off++] = outsidePointCount - outsideIndicesMap[i2] - 1;\r\n        }\r\n        else if (outsideIndicesMap[i2] - outsideIndicesMap[i] === 2) {\r\n            indices[off++] = insideIndicesMap[i2] + outsidePointCount;\r\n            indices[off++] = outsidePointCount - 1 - (outsideIndicesMap[i] + 1);\r\n            indices[off++] = outsidePointCount - 1 - (outsideIndicesMap[i] + 2);\r\n        }\r\n    }\r\n\r\n    const topVertices = opts.bevelSize > 0\r\n        ? offsetPolygon(polygonVertices, [], opts.bevelSize, null, true) : polygonVertices;\r\n    const boundingRect = opts.boundingRect;\r\n    return {\r\n        vertices: polygonVertices,\r\n        indices,\r\n        topVertices,\r\n        rect: {\r\n            x: boundingRect.x * scale[0] + translate[0],\r\n            y: boundingRect.y * scale[1] + translate[1],\r\n            width: boundingRect.width * scale[0],\r\n            height: boundingRect.height * scale[1],\r\n        },\r\n        depth: typeof opts.depth === 'function' ? opts.depth(polylineIdx) : opts.depth,\r\n        holes: []\r\n    };\r\n}\r\n\r\nfunction removeClosePointsOfPolygon(polygon, epsilon) {\r\n    const newPolygon = [];\r\n    for (let k  = 0; k < polygon.length; k++) {\r\n        const points = polygon[k];\r\n        const newPoints = [];\r\n        const len = points.length;\r\n        let x1 = points[len - 1][0];\r\n        let y1 = points[len - 1][1];\r\n        let dist = 0;\r\n        for (let i = 0; i < len; i++) {\r\n            let x2 = points[i][0];\r\n            let y2 = points[i][1];\r\n            const dx = x2 - x1;\r\n            const dy = y2 - y1;\r\n            dist += Math.sqrt(dx * dx + dy * dy);\r\n            if (dist > epsilon) {\r\n                newPoints.push(points[i]);\r\n                dist = 0;\r\n            }\r\n            x1 = x2;\r\n            y1 = y2;\r\n        }\r\n        if (newPoints.length >= 3) {\r\n            newPolygon.push(newPoints);\r\n        }\r\n    }\r\n    return newPolygon.length > 0 ? newPolygon : null;\r\n}\r\n\r\nfunction simplifyPolygon(polygon, tolerance) {\r\n    const newPolygon = [];\r\n    for (let k  = 0; k < polygon.length; k++) {\r\n        let points = polygon[k];\r\n        points = doSimplify(points, tolerance, true);\r\n        if (points.length >= 3) {\r\n            newPolygon.push(points);\r\n        }\r\n    }\r\n    return newPolygon.length > 0 ? newPolygon : null;\r\n}\r\n/**\r\n *\r\n * @param {Array} polygons Polygons array that match GeoJSON MultiPolygon geometry.\r\n * @param {Object} [opts]\r\n * @param {number|Function} [opts.depth]\r\n * @param {number} [opts.bevelSize = 0]\r\n * @param {number} [opts.bevelSegments = 2]\r\n * @param {number} [opts.simplify = 0]\r\n * @param {boolean} [opts.smoothSide = false]\r\n * @param {boolean} [opts.smoothBevel = false]\r\n * @param {boolean} [opts.excludeBottom = false]\r\n * @param {Object} [opts.fitRect] translate and scale will be ignored if fitRect is set\r\n * @param {Array} [opts.translate]\r\n * @param {Array} [opts.scale]\r\n *\r\n * @return {Object} {indices, position, uv, normal, boundingRect}\r\n */\r\nexport function extrudePolygon(polygons, opts) {\r\n\r\n    opts = Object.assign({}, opts);\r\n\r\n    const min = [Infinity, Infinity];\r\n    const max = [-Infinity, -Infinity];\r\n    for (let i = 0; i < polygons.length; i++) {\r\n        updateBoundingRect(polygons[i][0], min, max);\r\n    }\r\n    opts.boundingRect = opts.boundingRect || {\r\n        x: min[0], y: min[1], width: max[0] - min[0], height: max[1] - min[1]\r\n    };\r\n\r\n    normalizeOpts(opts);\r\n\r\n    const preparedData = [];\r\n    const translate = opts.translate || [0, 0];\r\n    const scale = opts.scale || [1, 1];\r\n    const boundingRect = opts.boundingRect;\r\n    const transformdRect = {\r\n        x: boundingRect.x * scale[0] + translate[0],\r\n        y: boundingRect.y * scale[1] + translate[1],\r\n        width: boundingRect.width * scale[0],\r\n        height: boundingRect.height * scale[1],\r\n    };\r\n\r\n    const epsilon = Math.min(\r\n        boundingRect.width, boundingRect.height\r\n    ) / 1e5;\r\n    for (let i = 0; i < polygons.length; i++) {\r\n        let newPolygon = removeClosePointsOfPolygon(polygons[i], epsilon);\r\n        if (!newPolygon) {\r\n            continue;\r\n        }\r\n        const simplifyTolerance = opts.simplify / Math.max(scale[0], scale[1]);\r\n        if (simplifyTolerance > 0) {\r\n            newPolygon = simplifyPolygon(newPolygon, simplifyTolerance);\r\n        }\r\n        if (!newPolygon) {\r\n            continue;\r\n        }\r\n\r\n        const {vertices, holes, dimensions} = earcut.flatten(newPolygon);\r\n\r\n        for (let k = 0; k < vertices.length;) {\r\n            vertices[k] = vertices[k++] * scale[0] + translate[0];\r\n            vertices[k] = vertices[k++] * scale[1] + translate[1];\r\n        }\r\n\r\n        convertToClockwise(vertices, holes);\r\n\r\n        if (dimensions !== 2) {\r\n            throw new Error('Only 2D polygon points are supported');\r\n        }\r\n        const topVertices = opts.bevelSize > 0\r\n            ? offsetPolygon(vertices, holes, opts.bevelSize, null, true) : vertices;\r\n        const indices = triangulate(topVertices, holes, dimensions);\r\n        preparedData.push({\r\n            indices,\r\n            vertices,\r\n            topVertices,\r\n            holes,\r\n            rect: transformdRect,\r\n            depth: typeof opts.depth === 'function' ? opts.depth(i) : opts.depth\r\n        });\r\n    }\r\n    return innerExtrudeTriangulatedPolygon(preparedData, opts);\r\n};\r\n\r\n/**\r\n *\r\n * @param {Array} polylines Polylines array that match GeoJSON MultiLineString geometry.\r\n * @param {Object} [opts]\r\n * @param {number} [opts.depth]\r\n * @param {number} [opts.bevelSize = 0]\r\n * @param {number} [opts.bevelSegments = 2]\r\n * @param {number} [opts.simplify = 0]\r\n * @param {boolean} [opts.smoothSide = false]\r\n * @param {boolean} [opts.smoothBevel = false]\r\n * @param {boolean} [opts.excludeBottom = false]\r\n * @param {boolean} [opts.lineWidth = 1]\r\n * @param {boolean} [opts.miterLimit = 2]\r\n * @param {Object} [opts.fitRect] translate and scale will be ignored if fitRect is set\r\n * @param {Array} [opts.translate]\r\n * @param {Array} [opts.scale]\r\n * @param {Object} [opts.boundingRect]\r\n * @return {Object} {indices, position, uv, normal, boundingRect}\r\n */\r\nexport function extrudePolyline(polylines, opts) {\r\n\r\n    opts = Object.assign({}, opts);\r\n\r\n    const min = [Infinity, Infinity];\r\n    const max = [-Infinity, -Infinity];\r\n    for (let i = 0; i < polylines.length; i++) {\r\n        updateBoundingRect(polylines[i], min, max);\r\n    }\r\n    opts.boundingRect = opts.boundingRect || {\r\n        x: min[0], y: min[1], width: max[0] - min[0], height: max[1] - min[1]\r\n    };\r\n\r\n    normalizeOpts(opts);\r\n    const scale = opts.scale || [1, 1];\r\n\r\n    if (opts.lineWidth == null) {\r\n        opts.lineWidth = 1;\r\n    }\r\n    if (opts.miterLimit == null) {\r\n        opts.miterLimit = 2;\r\n    }\r\n    const preparedData = [];\r\n    // Extrude polyline to polygon\r\n    for (let i = 0; i < polylines.length; i++) {\r\n        let newPolyline = polylines[i];\r\n        const simplifyTolerance = opts.simplify / Math.max(scale[0], scale[1]);\r\n        if (simplifyTolerance > 0) {\r\n            newPolyline = doSimplify(newPolyline, simplifyTolerance, true);\r\n        }\r\n        preparedData.push(convertPolylineToTriangulatedPolygon(newPolyline, i, opts));\r\n    }\r\n\r\n    return innerExtrudeTriangulatedPolygon(preparedData, opts);\r\n}\r\n\r\nfunction updateBoundingRect(points, min, max) {\r\n    for (let i = 0; i < points.length; i++) {\r\n        min[0] = Math.min(points[i][0], min[0]);\r\n        min[1] = Math.min(points[i][1], min[1]);\r\n        max[0] = Math.max(points[i][0], max[0]);\r\n        max[1] = Math.max(points[i][1], max[1]);\r\n    }\r\n}\r\n\r\n/**\r\n *\r\n * @param {Object} geojson\r\n * @param {Object} [opts]\r\n * @param {number} [opts.depth]\r\n * @param {number} [opts.bevelSize = 0]\r\n * @param {number} [opts.bevelSegments = 2]\r\n * @param {number} [opts.simplify = 0]\r\n * @param {boolean} [opts.smoothSide = false]\r\n * @param {boolean} [opts.smoothBevel = false]\r\n * @param {boolean} [opts.excludeBottom = false]\r\n * @param {boolean} [opts.lineWidth = 1]\r\n * @param {boolean} [opts.miterLimit = 2]\r\n * @param {Object} [opts.fitRect] translate and scale will be ignored if fitRect is set\r\n * @param {Array} [opts.translate]\r\n * @param {Array} [opts.scale]\r\n * @param {Object} [opts.boundingRect]\r\n * @return {Object} {polyline: {indices, position, uv, normal}, polygon: {indices, position, uv, normal}}\r\n */\r\n\r\n // TODO Not merge feature\r\nexport function extrudeGeoJSON(geojson, opts) {\r\n\r\n    opts = Object.assign({}, opts);\r\n\r\n    const polylines = [];\r\n    const polygons = [];\r\n\r\n    const polylineFeatureIndices = [];\r\n    const polygonFeatureIndices = [];\r\n\r\n    const min = [Infinity, Infinity];\r\n    const max = [-Infinity, -Infinity];\r\n\r\n    for (let i = 0; i < geojson.features.length; i++) {\r\n        const feature = geojson.features[i];\r\n        const geometry = feature.geometry;\r\n        if (geometry && geometry.coordinates) {\r\n            switch (geometry.type) {\r\n                case 'LineString':\r\n                    polylines.push(geometry.coordinates);\r\n                    polylineFeatureIndices.push(i);\r\n                    updateBoundingRect(geometry.coordinates, min, max);\r\n                    break;\r\n                case 'MultiLineString':\r\n                    for (let k = 0; k < geometry.coordinates.length; k++) {\r\n                        polylines.push(geometry.coordinates[k]);\r\n                        polylineFeatureIndices.push(i);\r\n                        updateBoundingRect(geometry.coordinates[k], min, max);\r\n                    }\r\n                    break;\r\n                case 'Polygon':\r\n                    polygons.push(geometry.coordinates);\r\n                    polygonFeatureIndices.push(i);\r\n                    updateBoundingRect(geometry.coordinates[0], min, max);\r\n                    break;\r\n                case 'MultiPolygon':\r\n                    for (let k = 0; k < geometry.coordinates.length; k++) {\r\n                        polygons.push(geometry.coordinates[k]);\r\n                        polygonFeatureIndices.push(i);\r\n                        updateBoundingRect(geometry.coordinates[k][0], min, max);\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    opts.boundingRect = opts.boundingRect || {\r\n        x: min[0], y: min[1], width: max[0] - min[0], height: max[1] - min[1]\r\n    };\r\n\r\n    const originalDepth = opts.depth;\r\n    return {\r\n        polyline: extrudePolyline(polylines, Object.assign(opts, {\r\n            depth: function (idx) {\r\n                if (typeof originalDepth === 'function') {\r\n                    return originalDepth(\r\n                        geojson.features[polylineFeatureIndices[idx]]\r\n                    );\r\n                }\r\n                return originalDepth;\r\n            }\r\n        })),\r\n        polygon: extrudePolygon(polygons, Object.assign(opts, {\r\n            depth: function (idx) {\r\n                if (typeof originalDepth === 'function') {\r\n                    return originalDepth(\r\n                        geojson.features[polygonFeatureIndices[idx]]\r\n                    );\r\n                }\r\n                return originalDepth;\r\n            }\r\n        }))\r\n    };\r\n}","/* eslint-disable indent */\r\nimport * as maptalks from 'maptalks';\r\nimport { GeoJSONFeature } from './../type/index';\r\n\r\n\r\nconst TYPES: Array<string> = ['Point', 'MultiPoint', 'LineString', 'MultiLineString', 'Polygon', 'MultiPolygon'];\r\n\r\nfunction getGeoJSONType(feature: GeoJSONFeature): string {\r\n    return feature.geometry ? feature.geometry.type : null;\r\n}\r\n\r\n\r\nexport function isGeoJSON(feature: GeoJSONFeature): boolean {\r\n    const type = getGeoJSONType(feature);\r\n    if (type) {\r\n        for (let i = 0, len = TYPES.length; i < len; i++) {\r\n            if (TYPES[i] === type) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n\r\nexport function isGeoJSONPolygon(feature: GeoJSONFeature): boolean {\r\n    const type = getGeoJSONType(feature);\r\n    if (type && (type === TYPES[4] || type === TYPES[5])) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nexport function isGeoJSONLine(feature: GeoJSONFeature): boolean {\r\n    const type = getGeoJSONType(feature);\r\n    if (type && (type === TYPES[2] || type === TYPES[3])) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nexport function isGeoJSONPoint(feature: GeoJSONFeature): boolean {\r\n    const type = getGeoJSONType(feature);\r\n    if (type && (type === TYPES[0] || type === TYPES[1])) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nexport function isGeoJSONMulti(feature: GeoJSONFeature): boolean {\r\n    const type = getGeoJSONType(feature);\r\n    if (type) {\r\n        if (type.indexOf('Multi') > -1) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nexport function getGeoJSONCoordinates(feature: GeoJSONFeature):\r\n    Array<number> | Array<Array<number>> | Array<Array<Array<number>>> | Array<Array<Array<Array<number>>>> {\r\n    return feature.geometry ? feature.geometry.coordinates : [];\r\n}\r\n\r\n\r\nexport function getGeoJSONCenter(feature: GeoJSONFeature, out?: maptalks.Coordinate): maptalks.Coordinate {\r\n    const type = getGeoJSONType(feature);\r\n    if (!type || !feature.geometry) {\r\n        return null;\r\n    }\r\n    const geometry = feature.geometry;\r\n    const coordinates = geometry.coordinates;\r\n    if (!coordinates) {\r\n        return null;\r\n    }\r\n    // const coords: Array<Array<number>> = [];\r\n    let sumX = 0, sumY = 0, coordLen = 0;\r\n    switch (type) {\r\n        case 'Point': {\r\n            sumX = (coordinates as Array<number>)[0];\r\n            sumY = (coordinates as Array<number>)[1];\r\n            // coords.push(coordinates as Array<number>);\r\n            coordLen++;\r\n            break;\r\n        }\r\n        case 'MultiPoint':\r\n        case 'LineString': {\r\n            for (let i = 0, len = coordinates.length; i < len; i++) {\r\n                sumX += (coordinates[i] as Array<number>)[0];\r\n                sumY += (coordinates[i] as Array<number>)[1];\r\n                coordLen++;\r\n                // coords.push(coordinates[i] as Array<number>);\r\n            }\r\n            break;\r\n        }\r\n        case 'MultiLineString':\r\n        case 'Polygon': {\r\n            for (let i = 0, len = coordinates.length; i < len; i++) {\r\n                for (let j = 0, len1 = (coordinates[i] as Array<Array<number>>).length; j < len1; j++) {\r\n                    // coords.push((coordinates[i] as Array<Array<number>>)[j]);\r\n                    sumX += (coordinates[i] as Array<Array<number>>)[j][0];\r\n                    sumY += (coordinates[i] as Array<Array<number>>)[j][1];\r\n                    coordLen++;\r\n                }\r\n            }\r\n            break;\r\n        }\r\n        case 'MultiPolygon': {\r\n            for (let i = 0, len = coordinates.length; i < len; i++) {\r\n                for (let j = 0, len1 = (coordinates[i] as Array<Array<Array<number>>>).length; j < len1; j++) {\r\n                    for (let m = 0, len2 = (coordinates[i] as Array<Array<Array<number>>>)[j].length; m < len2; m++) {\r\n                        // coords.push(((coordinates[i] as Array<Array<Array<number>>>)[j])[m]);\r\n                        sumX += (coordinates[i] as Array<Array<Array<number>>>)[j][m][0];\r\n                        sumY += (coordinates[i] as Array<Array<Array<number>>>)[j][m][1];\r\n                        coordLen++;\r\n                    }\r\n                }\r\n            }\r\n            break;\r\n        }\r\n    }\r\n    const x = sumX / coordLen, y = sumY / coordLen;\r\n    if (out) {\r\n        out.x = x;\r\n        out.y = y;\r\n        return out;\r\n    }\r\n    return new maptalks.Coordinate(x, y);\r\n}\r\n\r\n\r\n\r\nexport function spliteGeoJSONMulti(feature: GeoJSONFeature): GeoJSONFeature[] {\r\n    const type = getGeoJSONType(feature);\r\n    if (!type || !feature.geometry) {\r\n        return null;\r\n    }\r\n    const geometry = feature.geometry;\r\n    const properties = feature.properties || {};\r\n    const coordinates = geometry.coordinates;\r\n    if (!coordinates) {\r\n        return null;\r\n    }\r\n    const features: GeoJSONFeature[] = [];\r\n    let fType;\r\n    switch (type) {\r\n        case 'MultiPoint': {\r\n            fType = 'Point';\r\n            break;\r\n        }\r\n        case 'MultiLineString': {\r\n            fType = 'LineString';\r\n            break;\r\n        }\r\n        case 'MultiPolygon': {\r\n            fType = 'Polygon';\r\n            break;\r\n        }\r\n    }\r\n    if (fType) {\r\n        for (let i = 0, len = coordinates.length; i < len; i++) {\r\n            features.push({\r\n                type: 'Feature',\r\n                geometry: {\r\n                    type: fType as any,\r\n                    coordinates: coordinates[i] as any\r\n                },\r\n                properties\r\n            });\r\n        }\r\n    } else {\r\n        features.push(feature);\r\n    }\r\n    return features;\r\n}\r\n","import * as THREE from 'three';\r\nimport * as maptalks from 'maptalks';\r\nimport { extrudePolyline } from 'deyihu-geometry-extrude';\r\nimport { isGeoJSON, getGeoJSONCoordinates, getGeoJSONCenter, isGeoJSONMulti, spliteGeoJSONMulti } from './GeoJSONUtil';\r\nimport { addAttribute } from './ThreeAdaptUtil';\r\nimport { ThreeLayer } from './../index';\r\nimport { GeoJSONLineStringFeature, LineStringType, MergeAttributeType, SingleLineStringType } from './../type/index';\r\nconst COMMA = ',';\r\n\r\n/**\r\n *\r\n * @param {maptalks.LineString} lineString\r\n * @param {ThreeLayer} layer\r\n */\r\nexport function getLinePosition(lineString: SingleLineStringType | Array<THREE.Vector3>,\r\n    layer: ThreeLayer, center: maptalks.Coordinate): {\r\n        positions2d: Float32Array,\r\n        positions: Float32Array;\r\n        positionsV: THREE.Vector3[];\r\n    } {\r\n    const positionsV: THREE.Vector3[] = [];\r\n    if (Array.isArray(lineString) && lineString[0] instanceof THREE.Vector3) {\r\n        for (let i = 0, len = lineString.length; i < len; i++) {\r\n            const v = lineString[i];\r\n            positionsV.push(v);\r\n        }\r\n    } else {\r\n        if (Array.isArray(lineString)) {\r\n            lineString = new maptalks.LineString(lineString);\r\n        }\r\n        const z = 0;\r\n        //support geojson\r\n        let coordinates: any, cent: maptalks.Coordinate;\r\n        if (isGeoJSON(lineString as any)) {\r\n            coordinates = getGeoJSONCoordinates(lineString as any);\r\n            if (!center) {\r\n                cent = getGeoJSONCenter(lineString as any);\r\n            }\r\n        } else if (lineString instanceof maptalks.LineString) {\r\n            coordinates = lineString.getCoordinates();\r\n            if (!center) {\r\n                cent = lineString.getCenter();\r\n            }\r\n        }\r\n        const centerPt = layer.coordinateToVector3(center || cent);\r\n        for (let i = 0, len = coordinates.length; i < len; i++) {\r\n            const coordinate = coordinates[i];\r\n            const v = layer.coordinateToVector3(coordinate, z).sub(centerPt);\r\n            // positions.push(v.x, v.y, v.z);\r\n            positionsV.push(v);\r\n        }\r\n    }\r\n    const positions = new Float32Array(positionsV.length * 3);\r\n    const positions2d = new Float32Array(positionsV.length * 2);\r\n    for (let i = 0, len = positionsV.length; i < len; i++) {\r\n        const idx = i * 3;\r\n        const v = positionsV[i];\r\n        positions[idx] = v.x;\r\n        positions[idx + 1] = v.y;\r\n        positions[idx + 2] = v.z;\r\n\r\n        const idx1 = i * 2;\r\n        positions2d[idx1] = v.x;\r\n        positions2d[idx1 + 1] = v.y;\r\n    }\r\n    return {\r\n        positions,\r\n        positionsV,\r\n        positions2d\r\n    };\r\n}\r\n\r\n\r\n\r\n/**\r\n *\r\n * @param {maptalks.LineString} lineString\r\n * @param {Number} lineWidth\r\n * @param {Number} depth\r\n * @param {ThreeLayer} layer\r\n */\r\nexport function getExtrudeLineGeometry(lineString: SingleLineStringType, lineWidth = 1, depth = 1,\r\n    layer: ThreeLayer, center: maptalks.Coordinate): THREE.BufferGeometry {\r\n    const {\r\n        indices,\r\n        position,\r\n        normal,\r\n        uv\r\n    } = getExtrudeLineParams(lineString, lineWidth, depth, layer, center);\r\n    const geometry = new THREE.BufferGeometry();\r\n    addAttribute(geometry, 'position', new THREE.BufferAttribute(position, 3));\r\n    addAttribute(geometry, 'normal', new THREE.BufferAttribute(normal, 3));\r\n    addAttribute(geometry, 'uv', new THREE.BufferAttribute(uv, 2));\r\n    geometry.setIndex(new THREE.BufferAttribute(indices, 1));\r\n    return geometry;\r\n}\r\n\r\n/**\r\n *\r\n * @param {Array[Array]} chunkLines\r\n * @param {*} layer\r\n */\r\nexport function getChunkLinesPosition(chunkLines: Array<Array<Array<number>>>, layer: ThreeLayer, positionMap: { [key: string]: any }, centerPt: THREE.Vector3) {\r\n    const positions: Array<number> = [],\r\n        positionsV: Array<THREE.Vector3> = [], lnglats: Array<Array<number>> = [];\r\n    for (let i = 0, len = chunkLines.length; i < len; i++) {\r\n        const line = chunkLines[i];\r\n        for (let j = 0, len1 = line.length; j < len1; j++) {\r\n            const lnglat = line[j];\r\n            if (lnglats.length > 0) {\r\n                const key = lnglat.join(COMMA).toString();\r\n                const key1 = lnglats[lnglats.length - 1].join(COMMA).toString();\r\n                if (key !== key1) {\r\n                    lnglats.push(lnglat);\r\n                }\r\n            } else {\r\n                lnglats.push(lnglat);\r\n            }\r\n        }\r\n    }\r\n    const z = 0;\r\n    for (let i = 0, len = lnglats.length; i < len; i++) {\r\n        const lnglat = lnglats[i];\r\n        let v;\r\n        const key = lnglat.join(COMMA).toString();\r\n        if (positionMap && positionMap[key]) {\r\n            v = positionMap[key];\r\n        } else {\r\n            v = layer.coordinateToVector3(lnglat, z).sub(centerPt);\r\n        }\r\n        positionsV.push(v);\r\n        positions.push(v.x, v.y, v.z);\r\n    }\r\n    return {\r\n        positions: positions,\r\n        positionsV: positionsV,\r\n        lnglats: lnglats\r\n    };\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param {*} lineString\r\n * @param {*} lineWidth\r\n * @param {*} depth\r\n * @param {*} layer\r\n */\r\nexport function getExtrudeLineParams(lineString: SingleLineStringType | Array<THREE.Vector3>,\r\n    lineWidth = 1, depth = 1, layer: ThreeLayer, center?: maptalks.Coordinate): MergeAttributeType {\r\n    const positions = getLinePosition(lineString, layer, center).positionsV;\r\n    const ps = [];\r\n    for (let i = 0, len = positions.length; i < len; i++) {\r\n        const p = positions[i];\r\n        ps.push([p.x, p.y]);\r\n    }\r\n    const {\r\n        indices,\r\n        position,\r\n        normal,\r\n        uv\r\n    } = extrudePolyline([ps], {\r\n        lineWidth: lineWidth,\r\n        depth: depth\r\n    });\r\n    return {\r\n        position: position,\r\n        normal: normal,\r\n        indices: indices,\r\n        uv\r\n    };\r\n}\r\n\r\nexport function LineStringSplit(lineString: LineStringType) {\r\n    let lineStrings: Array<SingleLineStringType> = [], center: maptalks.Coordinate;\r\n    if (lineString instanceof maptalks.MultiLineString) {\r\n        lineStrings = lineString.getGeometries();\r\n        center = lineString.getCenter();\r\n    } else if (lineString instanceof maptalks.LineString) {\r\n        lineStrings.push(lineString);\r\n        center = lineString.getCenter();\r\n    } else if (isGeoJSON(lineString)) {\r\n        center = getGeoJSONCenter(lineString);\r\n        if (isGeoJSONMulti(lineString)) {\r\n            lineStrings = spliteGeoJSONMulti(lineString) as any;\r\n        } else {\r\n            lineStrings.push(lineString as GeoJSONLineStringFeature);\r\n        }\r\n    }\r\n    return {\r\n        lineStrings,\r\n        center\r\n    };\r\n}\r\n\r\nexport function setLineSegmentPosition(position: Array<number>, positionsV: Array<THREE.Vector3>) {\r\n    for (let i = 0, len = positionsV.length; i < len; i++) {\r\n        const v = positionsV[i];\r\n        if (i > 0 && i < len - 1) {\r\n            position.push(v.x, v.y, v.z);\r\n        }\r\n        position.push(v.x, v.y, v.z);\r\n    }\r\n}\r\n","import * as maptalks from 'maptalks';\r\nimport * as THREE from 'three';\r\nimport BaseObject from './BaseObject';\r\nimport { ThreeLayer } from './index';\r\nimport { LineMaterialType, LineOptionType, LineStringType } from './type/index';\r\nimport { setBottomHeight } from './util';\r\nimport { getLinePosition, LineStringSplit, setLineSegmentPosition } from './util/LineUtil';\r\nimport { addAttribute, getVertexColors } from './util/ThreeAdaptUtil';\r\n\r\nfunction initColors(cs) {\r\n    const colors = [];\r\n    if (cs && cs.length) {\r\n        cs.forEach(color => {\r\n            color = (color instanceof THREE.Color ? color : new THREE.Color(color));\r\n            colors.push(color.r, color.g, color.b);\r\n        });\r\n    }\r\n    return colors;\r\n}\r\n\r\nconst OPTIONS = {\r\n    altitude: 0,\r\n    bottomHeight: 0,\r\n    colors: null\r\n};\r\n\r\n/**\r\n *\r\n */\r\nclass Line extends BaseObject {\r\n    constructor(lineString: LineStringType, options: LineOptionType, material: LineMaterialType, layer: ThreeLayer) {\r\n        options = maptalks.Util.extend({}, OPTIONS, options, { layer, lineString });\r\n        super();\r\n        this._initOptions(options);\r\n        const { lineStrings, center } = LineStringSplit(lineString);\r\n        const ps = [];\r\n        for (let i = 0, len = lineStrings.length; i < len; i++) {\r\n            const lineString = lineStrings[i];\r\n            const { positionsV } = getLinePosition(lineString, layer, center);\r\n            setLineSegmentPosition(ps, positionsV);\r\n        }\r\n        const geometry = new THREE.BufferGeometry();\r\n        addAttribute(geometry, 'position', new THREE.Float32BufferAttribute(ps, 3));\r\n        setBottomHeight(geometry, options.bottomHeight, layer);\r\n        const colors = initColors(options.colors);\r\n        if (colors && colors.length) {\r\n            addAttribute(geometry, 'color', new THREE.Float32BufferAttribute(colors, 3));\r\n            (material as any).vertexColors = getVertexColors();\r\n        }\r\n        this._createLineSegments(geometry, material);\r\n\r\n        const { altitude } = options;\r\n        const z = layer.distanceToVector3(altitude, altitude).x;\r\n        const v = layer.coordinateToVector3(center, z);\r\n        this.getObject3d().position.copy(v);\r\n        this.type = 'Line';\r\n    }\r\n}\r\n\r\nexport default Line;\r\n","import * as THREE from 'three';\r\nimport * as maptalks from 'maptalks';\r\nimport { isGeoJSONPolygon, spliteGeoJSONMulti, getGeoJSONCenter, isGeoJSONMulti, getGeoJSONCoordinates } from './GeoJSONUtil';\r\nimport { extrudePolygon } from 'deyihu-geometry-extrude';\r\nimport { addAttribute } from './ThreeAdaptUtil';\r\nimport { ThreeLayer } from './../index';\r\nimport { MergeAttributeType, PolygonType, SinglePolygonType } from './../type/index';\r\n\r\nconst topColor: THREE.Color = new THREE.Color('#fff'),\r\n    bottomColor: THREE.Color = new THREE.Color('#fff');\r\n/**\r\n * this is for ExtrudeMesh util\r\n */\r\n\r\n/**\r\n * Fix the bug in the center of multipoygon\r\n * @param {maptalks.Polygon} polygon\r\n * @param {*} layer\r\n */\r\n// export function toShape(datas = []) {\r\n//     const shapes = [];\r\n//     for (let i = 0, len = datas.length; i < len; i++) {\r\n//         const { outer, holes } = datas[i];\r\n//         const shape = [outer];\r\n//         if (holes && holes.length) {\r\n//             for (let j = 0, len1 = holes.length; j < len1; j++) {\r\n//                 shape.push(holes[j]);\r\n//             }\r\n//         }\r\n//         shapes.push(shape);\r\n//     }\r\n//     return shapes;\r\n// }\r\n\r\n/**\r\n *  Support custom center point\r\n * @param {maptalks.Polygon|maptalks.MultiPolygon} polygon\r\n * @param {*} height\r\n * @param {*} layer\r\n */\r\nexport function getExtrudeGeometry(polygon: PolygonType, height: number, layer: ThreeLayer, center?: maptalks.Coordinate): THREE.BufferGeometry {\r\n    const { position, normal, uv, indices } = getExtrudeGeometryParams(polygon, height, layer, center);\r\n    const color = new Float32Array(position.length);\r\n    color.fill(1, 0, position.length);\r\n    const bufferGeomertry = new THREE.BufferGeometry();\r\n    addAttribute(bufferGeomertry, 'color', new THREE.BufferAttribute(color, 3));\r\n    addAttribute(bufferGeomertry, 'normal', new THREE.BufferAttribute(normal, 3));\r\n    addAttribute(bufferGeomertry, 'position', new THREE.BufferAttribute(position, 3));\r\n    addAttribute(bufferGeomertry, 'uv', new THREE.BufferAttribute(uv, 2));\r\n    bufferGeomertry.setIndex(new THREE.Uint32BufferAttribute(indices, 1));\r\n    return bufferGeomertry;\r\n}\r\n\r\n\r\nexport function getExtrudeGeometryParams(polygon: PolygonType, height: number, layer: ThreeLayer, center: maptalks.Coordinate, centerPt?: THREE.Vector3, altCache?: any): MergeAttributeType {\r\n    const datas = getPolygonPositions(polygon, layer, center, centerPt, false);\r\n    const shapes = datas;\r\n    //Possible later use of geojson\r\n    if (!shapes) return null;\r\n    //Reduce height and repeat calculation\r\n    if (altCache) {\r\n        if (altCache[height] == null) {\r\n            altCache[height] = layer.distanceToVector3(height, height).x;\r\n        }\r\n        height = altCache[height];\r\n    } else {\r\n        height = layer.distanceToVector3(height, height).x;\r\n    }\r\n    const { position, normal, uv, indices } = extrudePolygon(shapes as any, {\r\n        depth: height\r\n    });\r\n    return {\r\n        position, normal, uv, indices\r\n    };\r\n}\r\n\r\n/**\r\n *\r\n * @param {*} geometry\r\n * @param {*} color\r\n * @param {*} _topColor\r\n */\r\nexport function initVertexColors(geometry: THREE.BufferGeometry, color: string, _topColor: string, minZ: number | Array<any>): Float32Array {\r\n    if (minZ === undefined) {\r\n        minZ = 0;\r\n    }\r\n    const position = geometry.attributes.position.array;\r\n    const len = position.length;\r\n    bottomColor.setStyle(color);\r\n    topColor.setStyle(_topColor);\r\n    let colors: Float32Array;\r\n    if (Array.isArray(minZ)) {\r\n        let colorLen = 0;\r\n        for (let i = 0, len = minZ.length; i < len; i++) {\r\n            const { count } = minZ[i].position;\r\n            colorLen += count * 3;\r\n        }\r\n        colors = new Float32Array(colorLen);\r\n    } else {\r\n        colors = new Float32Array(position.length);\r\n    }\r\n    if (Array.isArray(minZ)) {\r\n        for (let i = 0, len = minZ.length; i < len; i++) {\r\n            const { middleZ, start, end } = minZ[i].position;\r\n            for (let j = start; j < end; j += 3) {\r\n                const z = position[j + 2];\r\n                if (z > middleZ) {\r\n                    colors[j] = topColor.r;\r\n                    colors[j + 1] = topColor.g;\r\n                    colors[j + 2] = topColor.b;\r\n                } else {\r\n                    colors[j] = bottomColor.r;\r\n                    colors[j + 1] = bottomColor.g;\r\n                    colors[j + 2] = bottomColor.b;\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n        for (let i = 0; i < len; i += 3) {\r\n            const z = position[i + 2];\r\n            if (z > minZ) {\r\n                colors[i] = topColor.r;\r\n                colors[i + 1] = topColor.g;\r\n                colors[i + 2] = topColor.b;\r\n            } else {\r\n                colors[i] = bottomColor.r;\r\n                colors[i + 1] = bottomColor.g;\r\n                colors[i + 2] = bottomColor.b;\r\n            }\r\n        }\r\n    }\r\n    addAttribute(geometry, 'color', new THREE.BufferAttribute(colors, 3, true));\r\n    return colors;\r\n}\r\n\r\n/**\r\n *\r\n * @param {*} polygon\r\n * @param {*} layer\r\n * @param {*} center\r\n */\r\nexport function getPolygonPositions(polygon: PolygonType, layer: ThreeLayer, center: maptalks.Coordinate, centerPt: THREE.Vector3, isArrayBuff = false): Array<Array<Array<Array<number>> | ArrayBufferLike>> {\r\n    if (!polygon) {\r\n        return null;\r\n    }\r\n    let datas = [];\r\n    if (polygon instanceof maptalks.MultiPolygon) {\r\n        datas = polygon.getGeometries().map(p => {\r\n            return getSinglePolygonPositions(p, layer, center || polygon.getCenter(), centerPt, isArrayBuff);\r\n        });\r\n    } else if (polygon instanceof maptalks.Polygon) {\r\n        const data = getSinglePolygonPositions(polygon, layer, center || polygon.getCenter(), centerPt, isArrayBuff);\r\n        datas.push(data);\r\n    } else if (isGeoJSONPolygon(polygon)) {\r\n        // const cent = getGeoJSONCenter(polygon);\r\n        if (!isGeoJSONMulti(polygon)) {\r\n            const data = getSinglePolygonPositions(polygon as any, layer, center || getGeoJSONCenter(polygon), centerPt, isArrayBuff);\r\n            datas.push(data);\r\n        } else {\r\n            const fs = spliteGeoJSONMulti(polygon);\r\n            for (let i = 0, len = fs.length; i < len; i++) {\r\n                datas.push(getSinglePolygonPositions(fs[i] as any, layer, center || getGeoJSONCenter(polygon), centerPt, isArrayBuff));\r\n            }\r\n        }\r\n    }\r\n    return datas;\r\n}\r\n\r\nexport function getSinglePolygonPositions(polygon: SinglePolygonType, layer: ThreeLayer,\r\n    center: maptalks.Coordinate, centerPt: THREE.Vector3, isArrayBuff = false): Array<Array<Array<number>> | ArrayBufferLike> {\r\n    let shell: Array<any>, holes: Array<any>;\r\n    //it is pre for geojson,Possible later use of geojson\r\n    if (isGeoJSONPolygon(polygon as any)) {\r\n        const coordinates = getGeoJSONCoordinates(polygon as any);\r\n        shell = coordinates[0] as Array<any>;\r\n        holes = coordinates.slice(1, coordinates.length);\r\n        center = center || getGeoJSONCenter(polygon as any);\r\n    } else if (polygon instanceof maptalks.Polygon) {\r\n        shell = polygon.getShell();\r\n        holes = polygon.getHoles();\r\n        center = center || polygon.getCenter();\r\n    }\r\n    centerPt = centerPt || layer.coordinateToVector3(center);\r\n    let outer: Array<Array<number>> | Float32Array;\r\n    if (isArrayBuff) {\r\n        outer = new Float32Array(shell.length * 2);\r\n    } else {\r\n        outer = [];\r\n    }\r\n    for (let i = 0, len = shell.length; i < len; i++) {\r\n        const c = shell[i];\r\n        const v = layer.coordinateToVector3(c).sub(centerPt);\r\n        if (isArrayBuff) {\r\n            const idx = i * 2;\r\n            outer[idx] = v.x;\r\n            outer[idx + 1] = v.y;\r\n            // outer[idx + 2] = v.z;\r\n        } else {\r\n            (outer as Array<Array<number>>).push([v.x, v.y]);\r\n        }\r\n    }\r\n    const data = [(isArrayBuff ? (outer as Float32Array).buffer : outer)];\r\n    if (holes && holes.length > 0) {\r\n        for (let i = 0, len = holes.length; i < len; i++) {\r\n            const pts: Array<Array<number>> | Float32Array = (isArrayBuff ? new Float32Array(holes[i].length * 2) : []);\r\n            for (let j = 0, len1 = holes[i].length; j < len1; j++) {\r\n                const c = holes[i][j];\r\n                const pt = layer.coordinateToVector3(c).sub(centerPt);\r\n                if (isArrayBuff) {\r\n                    const idx = j * 2;\r\n                    pts[idx] = pt.x;\r\n                    pts[idx + 1] = pt.y;\r\n                    // pts[idx + 2] = pt.z;\r\n                } else {\r\n                    (pts as Array<Array<number>>).push([pt.x, pt.y]);\r\n                }\r\n            }\r\n            data.push((isArrayBuff ? (pts as Float32Array).buffer : pts));\r\n        }\r\n    }\r\n    return data;\r\n}\r\n\r\n","import * as maptalks from 'maptalks';\r\nimport * as THREE from 'three';\r\nimport BaseObject from './BaseObject';\r\nimport { ThreeLayer } from './index';\r\nimport { ExtrudeLineOptionType, LineStringType, MergeAttributeType } from './type/index';\r\nimport { setBottomHeight } from './util';\r\nimport { initVertexColors } from './util/ExtrudeUtil';\r\nimport { LineStringSplit, getExtrudeLineParams } from './util/LineUtil';\r\nimport { mergeBufferGeometries } from './util/MergeGeometryUtil';\r\nimport { getVertexColors } from './util/ThreeAdaptUtil';\r\n\r\nconst OPTIONS = {\r\n    bottomHeight: 0,\r\n    width: 3,\r\n    height: 1,\r\n    altitude: 0,\r\n    topColor: null,\r\n    bottomColor: '#2d2f61',\r\n};\r\n\r\n\r\n/**\r\n *\r\n */\r\nclass ExtrudeLine extends BaseObject {\r\n    constructor(lineString: LineStringType, options: ExtrudeLineOptionType, material: THREE.Material, layer: ThreeLayer) {\r\n        options = maptalks.Util.extend({}, OPTIONS, options, { layer, lineString });\r\n        super();\r\n        this._initOptions(options);\r\n\r\n        const { height, width, bottomColor, topColor, bottomHeight, altitude } = options;\r\n        const h = layer.distanceToVector3(height, height).x;\r\n        const w = layer.distanceToVector3(width, width).x;\r\n        const { lineStrings, center } = LineStringSplit(lineString);\r\n        const extrudeParams: MergeAttributeType[] = [];\r\n        let minZ = 0;\r\n        const cache = {};\r\n        for (let i = 0, len = lineStrings.length; i < len; i++) {\r\n            const attribute = getExtrudeLineParams(lineStrings[i], w, h, layer, center);\r\n            minZ = setBottomHeight(attribute, bottomHeight, layer, cache);\r\n            extrudeParams.push(attribute);\r\n        }\r\n        const geometry = mergeBufferGeometries(extrudeParams);\r\n        if (topColor) {\r\n            initVertexColors(geometry, bottomColor, topColor, minZ + h / 2);\r\n            (material as any).vertexColors = getVertexColors();\r\n        }\r\n        this._createMesh(geometry, material);\r\n\r\n        // const center = (isGeoJSON(lineString) ? getGeoJSONCenter(lineString) : lineString.getCenter());\r\n        const z = layer.distanceToVector3(altitude, altitude).x;\r\n        const v = layer.coordinateToVector3(center, z);\r\n        this.getObject3d().position.copy(v);\r\n        this.type = 'ExtrudeLine';\r\n    }\r\n}\r\n\r\nexport default ExtrudeLine;\r\n","import * as maptalks from 'maptalks';\r\nimport * as THREE from 'three';\r\nimport BaseObject from './BaseObject';\r\nimport { ThreeLayer } from './index';\r\nimport { ExtrudePolygonOptionType, PolygonType } from './type/index';\r\nimport { setBottomHeight } from './util';\r\nimport { getExtrudeGeometry, initVertexColors } from './util/ExtrudeUtil';\r\nimport { getGeoJSONCenter, isGeoJSONPolygon } from './util/GeoJSONUtil';\r\nimport { getVertexColors } from './util/ThreeAdaptUtil';\r\n\r\nconst OPTIONS = {\r\n    altitude: 0,\r\n    height: 1,\r\n    bottomHeight: 0,\r\n    topColor: null,\r\n    bottomColor: '#2d2f61',\r\n};\r\n\r\n/**\r\n *\r\n */\r\nclass ExtrudePolygon extends BaseObject {\r\n    constructor(polygon: PolygonType, options: ExtrudePolygonOptionType, material: THREE.Material, layer: ThreeLayer) {\r\n        options = maptalks.Util.extend({}, OPTIONS, options, { layer, polygon });\r\n        super();\r\n        this._initOptions(options);\r\n        const { height, topColor, bottomColor, altitude, bottomHeight } = options;\r\n        const geometry = getExtrudeGeometry(polygon, height, layer);\r\n        const center = (isGeoJSONPolygon(polygon as any) ? getGeoJSONCenter(polygon as any) : (polygon as any).getCenter());\r\n        const h = setBottomHeight(geometry, bottomHeight, layer);\r\n        if (topColor) {\r\n            const extrudeH = layer.distanceToVector3(height, height).x;\r\n            initVertexColors(geometry, bottomColor, topColor, h + extrudeH / 2);\r\n            (material as any).vertexColors = getVertexColors();\r\n        }\r\n        this._createMesh(geometry, material);\r\n        const z = layer.distanceToVector3(altitude, altitude).x;\r\n        const v = layer.coordinateToVector3(center, z);\r\n        this.getObject3d().position.copy(v);\r\n        this.type = 'ExtrudePolygon';\r\n    }\r\n}\r\n\r\nexport default ExtrudePolygon;\r\n","import * as maptalks from 'maptalks';\r\nimport { ThreeLayer } from './index';\r\nimport BaseObject from './BaseObject';\r\nimport { BaseObjectOptionType } from './type';\r\n\r\nconst OPTIONS = {\r\n    altitude: 0,\r\n    coordinate: null\r\n};\r\n\r\n\r\n/**\r\n * Model container\r\n */\r\nclass Model extends BaseObject {\r\n    constructor(model: THREE.Object3D, options: BaseObjectOptionType = {}, layer: ThreeLayer) {\r\n        if (!options.coordinate) {\r\n            console.warn('coordinate is null,it is important to locate the model');\r\n            options.coordinate = layer.getMap().getCenter();\r\n        }\r\n        options = maptalks.Util.extend({}, OPTIONS, options, { layer, model });\r\n        super();\r\n        this._initOptions(options);\r\n        this._createGroup();\r\n        this.getObject3d().add(model);\r\n        const { altitude, coordinate } = options;\r\n        const z = layer.distanceToVector3(altitude, altitude).x;\r\n        const position = layer.coordinateToVector3(coordinate, z);\r\n        this.getObject3d().position.copy(position);\r\n        this.type = 'Model';\r\n    }\r\n}\r\n\r\nexport default Model;\r\n","/**\r\n * provide a simple geo function\r\n */\r\nimport * as maptalks from 'maptalks';\r\n\r\nconst PI = Math.PI / 180;\r\nconst R = 6378137;\r\nconst MINLENGTH = 1;\r\n\r\n\r\nfunction formatLineArray(polyline: maptalks.LineString): Array<Array<number>> {\r\n    const lnglats = polyline.getCoordinates();\r\n    return lnglats.map(lnglat => {\r\n        return lnglat.toArray();\r\n    });\r\n}\r\n\r\nfunction degreesToRadians(d: number): number {\r\n    return d * PI;\r\n}\r\n\r\n\r\n\r\nexport function distance(c1: Array<number> | maptalks.Coordinate, c2: Array<number> | maptalks.Coordinate): number {\r\n    if (!c1 || !c2) {\r\n        return 0;\r\n    }\r\n    if (!Array.isArray(c1)) {\r\n        c1 = c1.toArray();\r\n    }\r\n    if (!Array.isArray(c2)) {\r\n        c2 = c2.toArray();\r\n    }\r\n    let b = degreesToRadians(c1[1]);\r\n    const d = degreesToRadians(c2[1]),\r\n        e = b - d,\r\n        f = degreesToRadians(c1[0]) - degreesToRadians(c2[0]);\r\n    b = 2 * Math.asin(Math.sqrt(Math.pow(Math.sin(e / 2), 2) + Math.cos(b) * Math.cos(d) * Math.pow(Math.sin(f / 2), 2)));\r\n    b *= R;\r\n    return Math.round(b * 1E5) / 1E5;\r\n}\r\n\r\n\r\nexport function lineLength(polyline: Array<Array<number>> | maptalks.LineString): number {\r\n    let lnglatArray = polyline;\r\n    if (!Array.isArray(polyline)) {\r\n        lnglatArray = formatLineArray(polyline);\r\n    }\r\n    let l = 0;\r\n    for (let i = 0, len = (lnglatArray as Array<Array<number>>).length; i < len - 1; i++) {\r\n        l += distance((lnglatArray as Array<Array<number>>)[i], (lnglatArray as Array<Array<number>>)[i + 1]);\r\n    }\r\n    return l;\r\n}\r\n\r\n\r\nfunction getPercentLngLat(l: any, length: number): Array<number> {\r\n    const { len, c1, c2 } = l;\r\n    const dx = c2[0] - c1[0],\r\n        dy = c2[1] - c1[1];\r\n    const percent = length / len;\r\n    const lng = c1[0] + percent * dx;\r\n    const lat = c1[1] + percent * dy;\r\n    return [lng, lat];\r\n}\r\n\r\n\r\n\r\n/**\r\n * This is not an accurate line segment cutting method, but rough, in order to speed up the calculation,\r\n * the correct cutting algorithm can be referred to. http://turfjs.org/docs/#lineChunk\r\n * @param {*} cs\r\n * @param {*} lineChunkLength\r\n */\r\nexport function lineSlice(cs: Array<Array<number>> | maptalks.LineString, lineChunkLength = 10): Array<Array<Array<number>>> {\r\n    lineChunkLength = Math.max(lineChunkLength, MINLENGTH);\r\n    if (!Array.isArray(cs)) {\r\n        cs = formatLineArray(cs);\r\n    }\r\n    const LEN = cs.length;\r\n    let list = [];\r\n    let totalLen = 0;\r\n    for (let i = 0; i < LEN - 1; i++) {\r\n        const len = distance(cs[i], cs[i + 1]);\r\n        const floorlen = Math.floor(len);\r\n        list.push({\r\n            c1: cs[i],\r\n            len: floorlen,\r\n            c2: cs[i + 1]\r\n        });\r\n        totalLen += floorlen;\r\n    }\r\n    if (totalLen <= lineChunkLength) {\r\n        const lnglats = list.map(d => {\r\n            return [d.c1, d.c2];\r\n        });\r\n        return lnglats;\r\n    }\r\n    if (list.length === 1) {\r\n        if (list[0].len <= lineChunkLength) {\r\n            return [\r\n                [list[0].c1, list[0].c2]\r\n            ];\r\n        }\r\n    }\r\n\r\n    const LNGLATSLEN = list.length;\r\n    const first = list[0];\r\n\r\n    let idx = 0;\r\n    let currentLngLat;\r\n    let currentLen = 0;\r\n    const lines = [];\r\n    let lls = [first.c1];\r\n    while (idx < LNGLATSLEN) {\r\n        const { len, c2 } = list[idx];\r\n        currentLen += len;\r\n        if (currentLen < lineChunkLength) {\r\n            lls.push(c2);\r\n            if (idx === LNGLATSLEN - 1) {\r\n                lines.push(lls);\r\n            }\r\n            idx++;\r\n        }\r\n        if (currentLen === lineChunkLength) {\r\n            lls.push(c2);\r\n            currentLen = 0;\r\n            lines.push(lls);\r\n            //next\r\n            lls = [c2];\r\n            idx++;\r\n        }\r\n        if (currentLen > lineChunkLength) {\r\n            const offsetLen = (len - currentLen + lineChunkLength);\r\n            currentLngLat = getPercentLngLat(list[idx], offsetLen);\r\n            lls.push(currentLngLat);\r\n            lines.push(lls);\r\n            currentLen = 0;\r\n            list[idx].c1 = currentLngLat;\r\n            list[idx].len = len - offsetLen;\r\n            //next\r\n            lls = [];\r\n            lls.push(currentLngLat);\r\n        }\r\n    }\r\n    return lines;\r\n}\r\n","import * as maptalks from 'maptalks';\r\nimport * as THREE from 'three';\r\nimport BaseObject from './BaseObject';\r\n\r\nimport { lineSlice } from './util/GeoUtil';\r\nimport { getExtrudeLineParams, getChunkLinesPosition } from './util/LineUtil';\r\nimport { isGeoJSON, getGeoJSONCenter, getGeoJSONCoordinates } from './util/GeoJSONUtil';\r\nimport { addAttribute } from './util/ThreeAdaptUtil';\r\nimport { ExtrudeLineTrailOptionType, SingleLineStringType } from './type';\r\nimport { ThreeLayer } from './index';\r\n\r\nconst MAX_POINTS = 1000;\r\n\r\n/**\r\n *\r\n * @param {THREE.BufferGeometry} geometry\r\n * @param {*} ps\r\n * @param {*} norls\r\n * @param {*} indices\r\n */\r\nfunction setExtrudeLineGeometryAttribute(geometry, ps, norls, indices) {\r\n    const len = ps.length;\r\n    geometry.attributes.normal.count = len;\r\n    geometry.attributes.position.count = len;\r\n    const positions = geometry.attributes.position.array;\r\n    const normals = geometry.attributes.normal.array;\r\n    for (let i = 0; i < len; i++) {\r\n        positions[i] = ps[i];\r\n        normals[i] = norls[i];\r\n    }\r\n    // geometry.index.array = new Uint16Array(indices.length);\r\n    geometry.index.count = indices.length;\r\n    // geometry.index.needsUpdate = true;\r\n    for (let i = 0, len1 = indices.length; i < len1; i++) {\r\n        geometry.index.array[i] = indices[i];\r\n    }\r\n    // geometry.setIndex(new THREE.Uint32BufferAttribute(indices, 1));\r\n    // geometry.setDrawRange(0, len / 3);\r\n}\r\n\r\n\r\nconst OPTIONS = {\r\n    trail: 5,\r\n    chunkLength: 50,\r\n    width: 2,\r\n    height: 1,\r\n    speed: 1,\r\n    altitude: 0,\r\n    interactive: false\r\n};\r\n\r\n/**\r\n *\r\n */\r\nclass ExtrudeLineTrail extends BaseObject {\r\n    constructor(lineString: SingleLineStringType, options: ExtrudeLineTrailOptionType, material: THREE.Material, layer: ThreeLayer) {\r\n        options = maptalks.Util.extend({}, OPTIONS, options, { layer, lineString });\r\n        super();\r\n        this._initOptions(options);\r\n\r\n        const { width, height, altitude, speed, chunkLength, trail } = options;\r\n        let center: maptalks.Coordinate, coordinates;\r\n        if (isGeoJSON(lineString as any)) {\r\n            center = getGeoJSONCenter(lineString as any);\r\n            coordinates = getGeoJSONCoordinates(lineString as any);\r\n        } else {\r\n            center = (lineString as any).getCenter();\r\n            coordinates = lineString;\r\n        }\r\n        const chunkLines = lineSlice(coordinates, chunkLength);\r\n\r\n        const centerPt = layer.coordinateToVector3(center);\r\n        //cache position for  faster computing,reduce double counting\r\n        const positionMap: { [key: string]: THREE.Vector3 } = {};\r\n        for (let i = 0, len = chunkLines.length; i < len; i++) {\r\n            const chunkLine = chunkLines[i];\r\n            for (let j = 0, len1 = chunkLine.length; j < len1; j++) {\r\n                const lnglat = chunkLine[j];\r\n                const key = lnglat.join(',').toString();\r\n                if (!positionMap[key]) {\r\n                    positionMap[key] = layer.coordinateToVector3(lnglat).sub(centerPt);\r\n                }\r\n            }\r\n        }\r\n\r\n        const positions = getChunkLinesPosition(chunkLines.slice(0, 1), layer, positionMap, centerPt).positionsV;\r\n\r\n        //generate geometry\r\n        const geometry = new THREE.BufferGeometry();\r\n        const ps = new Float32Array(MAX_POINTS * 3); // 3 vertices per point\r\n        const norls = new Float32Array(MAX_POINTS * 3); // 3 vertices per point\r\n        const inds = new Uint16Array(MAX_POINTS);\r\n        addAttribute(geometry, 'position', (new THREE.BufferAttribute(ps, 3)));\r\n        addAttribute(geometry, 'normal', (new THREE.BufferAttribute(norls, 3)));\r\n        geometry.setIndex(new THREE.BufferAttribute(inds, 1));\r\n\r\n\r\n        const lineWidth = layer.distanceToVector3(width, width).x;\r\n        const depth = layer.distanceToVector3(height, height).x;\r\n        const params = getExtrudeLineParams(positions, lineWidth, depth, layer);\r\n        setExtrudeLineGeometryAttribute(geometry, params.position, params.normal, params.indices);\r\n\r\n        this._createMesh(geometry, material);\r\n        const z = layer.distanceToVector3(altitude, altitude).x;\r\n        const v = layer.coordinateToVector3(center, z);\r\n        this.getObject3d().position.copy(v);\r\n\r\n        this._params = {\r\n            index: 0,\r\n            chunkLines,\r\n            geometries: [],\r\n            layer,\r\n            trail: Math.max(1, trail),\r\n            lineWidth,\r\n            depth,\r\n            speed: Math.min(1, speed),\r\n            idx: 0,\r\n            loaded: false,\r\n            positionMap,\r\n            centerPt\r\n        };\r\n        this._init(this._params);\r\n        this.type = 'ExtrudeLineTrail';\r\n\r\n    }\r\n\r\n    /**\r\n     * Follow-up support for adding webworker\r\n     * @param {*} params\r\n     */\r\n    _init(params) {\r\n        const { layer, trail, lineWidth, depth, chunkLines, positionMap, centerPt } = params;\r\n        const len = chunkLines.length, geometries = [];\r\n        for (let i = 0; i < len; i++) {\r\n            const lines = chunkLines.slice(i, i + trail);\r\n            const ps = getChunkLinesPosition(lines, layer, positionMap, centerPt).positionsV;\r\n            geometries.push(getExtrudeLineParams(ps, lineWidth, depth, layer));\r\n        }\r\n        this._params.geometries = geometries;\r\n        this._params.loaded = true;\r\n    }\r\n\r\n\r\n    _animation() {\r\n        const { index, geometries, speed, idx, chunkLines, trail, lineWidth, depth, loaded, layer, positionMap, centerPt } = this._params;\r\n        if (!loaded) return;\r\n        const i = Math.round(index);\r\n        if (i > idx) {\r\n            this._params.idx++;\r\n            let p = geometries[i];\r\n            //if not init, this is will running\r\n            if (!p) {\r\n                const lines = chunkLines.slice(i, i + trail);\r\n                const ps = getChunkLinesPosition(lines, layer, positionMap, centerPt).positionsV;\r\n                p = getExtrudeLineParams(ps, lineWidth, depth, layer);\r\n                geometries[i] = p;\r\n            }\r\n            const object3d = this.getObject3d() as any;\r\n            setExtrudeLineGeometryAttribute(object3d.geometry, p.position, p.normal, p.indices);\r\n            object3d.geometry.attributes.position.needsUpdate = true;\r\n            object3d.geometry.attributes.normal.needsUpdate = true;\r\n            object3d.geometry.index.needsUpdate = true;\r\n        }\r\n        if (index >= chunkLines.length - 1) {\r\n            this._params.index = -1;\r\n            this._params.idx = -1;\r\n        }\r\n        this._params.index += speed;\r\n    }\r\n}\r\n\r\nexport default ExtrudeLineTrail;\r\n","import * as THREE from 'three';\r\nimport BaseObject from './BaseObject';\r\nimport { getGeometriesColorArray } from './util';\r\nimport { addAttribute, getVertexColors } from './util/ThreeAdaptUtil';\r\n\r\nconst EVENTS = ['click', 'mousemove', 'mousedown', 'mouseup', 'dblclick', 'contextmenu'].join(' ').toString();\r\nconst defaultMaterial = new THREE.MeshBasicMaterial();\r\n(defaultMaterial as any).vertexColors = getVertexColors();\r\n\r\ntype Constructor<T> = new (...args: any[]) => T;\r\n\r\n/**\r\n * This is for the merger, MergedExtrudeMesh,Points ...\r\n * @param {*} Base\r\n */\r\nconst MergedMixin = <T extends Constructor<BaseObject>>(Base: T) => {\r\n\r\n    return class extends Base {\r\n        _faceMap: Array<Array<number>>;\r\n        _baseObjects: Array<BaseObject>;\r\n        _datas: Array<any>;\r\n        faceIndex: number;\r\n        index: number;\r\n        _geometriesAttributes: Array<any>;\r\n        _geometryCache: THREE.BufferGeometry;\r\n        isHide: boolean;\r\n\r\n        // this._faceMap=[];\r\n        // this._baseObjects = [];\r\n        // this._datas = [];\r\n        // this.faceIndex = null;\r\n        // this.index=null;\r\n        // this._geometriesAttributes = [];\r\n        // this._geometryCache = geometry.clone();\r\n        // this.isHide = false;\r\n\r\n        /**\r\n         *\r\n         * @param {*} baseObjects\r\n         */\r\n        _initBaseObjectsEvent(baseObjects: Array<BaseObject>) {\r\n            if (baseObjects && Array.isArray(baseObjects) && baseObjects.length) {\r\n                for (let i = 0, len = baseObjects.length; i < len; i++) {\r\n                    const baseObject = baseObjects[i];\r\n                    this._proxyEvent(baseObject);\r\n                }\r\n            }\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         *Events representing the merge\r\n         * @param {*} baseObject\r\n         */\r\n        _proxyEvent(baseObject: BaseObject): void {\r\n            baseObject.on('add', (e) => {\r\n                this._showGeometry(e.target, true);\r\n            });\r\n            baseObject.on('remove', (e) => {\r\n                this._showGeometry(e.target, false);\r\n            });\r\n            baseObject.on('mouseout', (e) => {\r\n                this._mouseover = false;\r\n                this.fire('mouseout', Object.assign({}, e, { target: this, selectMesh: (this.getSelectMesh ? this.getSelectMesh() : null) }));\r\n                // this._showGeometry(e.target, false);\r\n            });\r\n            baseObject.on(EVENTS, (e) => {\r\n                this.fire(e.type, Object.assign({}, e, { target: this, selectMesh: (this.getSelectMesh ? this.getSelectMesh() : null) }));\r\n            });\r\n        }\r\n\r\n\r\n        /**\r\n         * Get the index of the monomer to be hidden\r\n         * @param {*} attribute\r\n         */\r\n        _getHideGeometryIndex(attribute: string) {\r\n            const indexs: Array<number> = [];\r\n            let count = 0;\r\n            for (let i = 0, len = this._geometriesAttributes.length; i < len; i++) {\r\n                if (this._geometriesAttributes[i].hide === true) {\r\n                    indexs.push(i);\r\n                    count += this._geometriesAttributes[i][attribute].count;\r\n                }\r\n            }\r\n            return {\r\n                indexs,\r\n                count\r\n            };\r\n        }\r\n\r\n        /**\r\n         * update geometry attributes\r\n         * @param {*} bufferAttribute\r\n         * @param {*} attribute\r\n         */\r\n        _updateAttribute(bufferAttribute: THREE.BufferAttribute, attribute: string) {\r\n            const { indexs } = this._getHideGeometryIndex(attribute);\r\n            const array = this._geometryCache.attributes[attribute].array;\r\n            const len = array.length;\r\n            for (let i = 0; i < len; i++) {\r\n                (bufferAttribute as any).array[i] = array[i];\r\n            }\r\n            let value = NaN;\r\n            if (this.getObject3d() instanceof THREE.LineSegments) {\r\n                value = 0;\r\n            }\r\n            for (let j = 0; j < indexs.length; j++) {\r\n                const index = indexs[j];\r\n                const { start, end } = this._geometriesAttributes[index][attribute];\r\n                for (let i = start; i < end; i++) {\r\n                    (bufferAttribute as any).array[i] = value;\r\n                }\r\n            }\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * show or hide monomer\r\n         * @param {*} baseObject\r\n         * @param {*} isHide\r\n         */\r\n        _showGeometry(baseObject: BaseObject, isHide: boolean) {\r\n            let index;\r\n            if (baseObject) {\r\n                index = baseObject.getOptions().index;\r\n            }\r\n            if (index != null) {\r\n                const geometryAttributes = this._geometriesAttributes[index];\r\n                const { hide } = geometryAttributes;\r\n                if (hide === isHide) {\r\n                    return this;\r\n                }\r\n                geometryAttributes.hide = isHide;\r\n                const buffGeom = (this.getObject3d() as any).geometry;\r\n                this._updateAttribute(buffGeom.attributes.position, 'position');\r\n                // this._updateAttribute(buffGeom.attributes.normal, 'normal', 3);\r\n                // this._updateAttribute(buffGeom.attributes.color, 'color', 3);\r\n                // this._updateAttribute(buffGeom.attributes.uv, 'uv', 2);\r\n                buffGeom.attributes.position.needsUpdate = true;\r\n                // buffGeom.attributes.color.needsUpdate = true;\r\n                // buffGeom.attributes.normal.needsUpdate = true;\r\n                // buffGeom.attributes.uv.needsUpdate = true;\r\n                this.isHide = isHide;\r\n            }\r\n            return this;\r\n        }\r\n\r\n\r\n        /**\r\n         * Get selected monomer\r\n         */\r\n        // eslint-disable-next-line consistent-return\r\n        getSelectMesh(): {\r\n            data: any;\r\n            baseObject: BaseObject;\r\n        } {\r\n            const index = this._getIndex();\r\n            if (index != null) {\r\n                return {\r\n                    data: this._datas[index],\r\n                    baseObject: this._baseObjects[index]\r\n                };\r\n            }\r\n        }\r\n\r\n        _getIndex(faceIndex?: number): number {\r\n            if (faceIndex == null) {\r\n                faceIndex = this.faceIndex || this.index;\r\n            }\r\n            return faceIndex;\r\n        }\r\n\r\n        _init(): void {\r\n            const pick = this.getLayer().getPick();\r\n            this.on('add', () => {\r\n                pick.add(this.pickObject3d);\r\n            });\r\n            this.on('remove', () => {\r\n                pick.remove(this.pickObject3d);\r\n            });\r\n        }\r\n\r\n        //Different objects need to implement their own methods\r\n        _setPickObject3d() {\r\n            // multiplexing geometry\r\n            const geometry = this._geometryCache || (this.getObject3d() as any).geometry.clone();\r\n            const pick = this.getLayer().getPick();\r\n            const { _geometriesAttributes } = this;\r\n            const len = _geometriesAttributes.length;\r\n            const colors = getGeometriesColorArray(_geometriesAttributes);\r\n            let cIndex = 0;\r\n            for (let i = 0; i < len; i++) {\r\n                const color = pick.getColor();\r\n                const colorIndex = color.getHex();\r\n                this._colorMap[colorIndex] = i;\r\n                const { count } = _geometriesAttributes[i].position;\r\n                this._datas[i].colorIndex = colorIndex;\r\n                for (let j = 0; j < count; j++) {\r\n                    colors[cIndex] = color.r;\r\n                    colors[cIndex + 1] = color.g;\r\n                    colors[cIndex + 2] = color.b;\r\n                    cIndex += 3;\r\n                }\r\n            }\r\n            addAttribute(geometry, 'color', new THREE.BufferAttribute(colors, 3, true));\r\n            // const material = new THREE.MeshBasicMaterial();\r\n            // material.vertexColors = THREE.VertexColors;\r\n            const color = pick.getColor();\r\n            const colorIndex = color.getHex();\r\n            const mesh = new THREE.Mesh(geometry, defaultMaterial);\r\n            mesh.position.copy(this.getObject3d().position);\r\n            mesh['_colorIndex'] = colorIndex;\r\n            this.setPickObject3d(mesh);\r\n        }\r\n    };\r\n};\r\n\r\nexport default MergedMixin;\r\n","// eslint-disable-next-line quotes\r\nconst workerCode = `{code}`;\r\nconst workerName = '__maptalks.three__';\r\n\r\nexport function getWorkerName() {\r\n    return workerName;\r\n}\r\n\r\nexport function getWorkerCode() {\r\n    return workerCode;\r\n}\r\n","import * as maptalks from 'maptalks';\r\nimport { isGeoJSONLine, isGeoJSONPolygon } from '../util/GeoJSONUtil';\r\nimport { getPolygonPositions } from '../util/ExtrudeUtil';\r\n// import pkg from './../../package.json';\r\nimport { getLinePosition } from '../util/LineUtil';\r\nimport { LineStringType, PolygonType, SingleLineStringType } from './../type/index';\r\nimport { ThreeLayer } from './../index';\r\nimport { getWorkerName } from './worker';\r\n\r\nlet MeshActor;\r\nif (maptalks.worker) {\r\n    MeshActor = class extends maptalks.worker.Actor {\r\n        test(info, cb) {\r\n            //send data to worker thread\r\n            this.send(info, null, cb);\r\n        }\r\n\r\n        pushQueue(q: any = {}) {\r\n            const { type, data, callback, layer, key, center, lineStrings } = q;\r\n            let params;\r\n            if (type === 'Polygon') {\r\n                params = gengerateExtrudePolygons(data, center, layer);\r\n            } else if (type === 'LineString') {\r\n                //todo liness\r\n                params = gengerateExtrudeLines(data, center, layer, lineStrings);\r\n            } else if (type === 'Point') {\r\n                //todo points\r\n            }\r\n            this.send({ type, datas: params.datas }, params.transfe, function (err, message) {\r\n                if (err) {\r\n                    console.error(err);\r\n                }\r\n                message.key = key;\r\n                callback(message);\r\n            });\r\n        }\r\n\r\n\r\n        // eslint-disable-next-line no-unused-vars\r\n        // receive(message) {\r\n        //     console.log(message);\r\n        // }\r\n    };\r\n}\r\n\r\nvar actor: maptalks.worker.Actor;\r\nexport function getActor(): maptalks.worker.Actor {\r\n    if (!maptalks.worker) {\r\n        console.error('maptalks.worker is not defined,You can\\'t use ThreeVectorTileLayer');\r\n    }\r\n    if (!actor) {\r\n        actor = new MeshActor(getWorkerName());\r\n    }\r\n    return actor;\r\n}\r\n\r\n/**\r\n * generate extrudepolygons data for worker\r\n * @param {*} polygons\r\n * @param {*} layer\r\n */\r\nfunction gengerateExtrudePolygons(polygons: PolygonType[] = [], center: maptalks.Coordinate, layer: ThreeLayer) {\r\n    const centerPt = layer.coordinateToVector3(center);\r\n    const len = polygons.length;\r\n    const datas = [], transfer = [], altCache = {};\r\n    for (let i = 0; i < len; i++) {\r\n        const polygon = polygons[i];\r\n        const data = getPolygonPositions(polygon, layer, center, centerPt, true);\r\n        for (let j = 0, len1 = data.length; j < len1; j++) {\r\n            const d = data[j];\r\n            for (let m = 0, len2 = d.length; m < len2; m++) {\r\n                //ring\r\n                transfer.push(d[m]);\r\n            }\r\n        }\r\n        const properties = (isGeoJSONPolygon(polygon as any) ? polygon['properties'] : (polygon as any).getProperties() || {});\r\n        let height = properties.height || 1;\r\n        let bottomHeight = properties.bottomHeight || 0;\r\n        if (bottomHeight !== undefined && typeof bottomHeight === 'number' && bottomHeight !== 0) {\r\n            if (altCache[bottomHeight] === undefined) {\r\n                altCache[bottomHeight] = layer.distanceToVector3(bottomHeight, bottomHeight).x;\r\n            }\r\n            bottomHeight = altCache[bottomHeight];\r\n        }\r\n        if (altCache[height] === undefined) {\r\n            altCache[height] = layer.distanceToVector3(height, height).x;\r\n        }\r\n        height = altCache[height];\r\n        datas.push({\r\n            data,\r\n            height,\r\n            bottomHeight\r\n        });\r\n    }\r\n    return {\r\n        datas,\r\n        transfer\r\n    };\r\n}\r\n\r\n/**\r\n * generate ExtrudeLines data for worker\r\n * @param {*} lineStringList\r\n * @param {*} center\r\n * @param {*} layer\r\n */\r\nfunction gengerateExtrudeLines(lineStringList: Array<Array<SingleLineStringType>>, center: maptalks.Coordinate, layer: ThreeLayer, lineStrings: Array<LineStringType>) {\r\n    const datas = [], transfer = [], altCache = {};\r\n    const len = lineStringList.length;\r\n    for (let i = 0; i < len; i++) {\r\n        const multiLineString = lineStringList[i];\r\n        const properties = (isGeoJSONLine(lineStrings[i] as any) ? lineStrings[i]['properties'] : (lineStrings[i] as any).getProperties() || {});\r\n        const width = properties.width || 1;\r\n        const height = properties.height || 1;\r\n        let bottomHeight = properties.bottomHeight || 0;\r\n        if (bottomHeight !== undefined && typeof bottomHeight === 'number' && bottomHeight !== 0) {\r\n            if (altCache[bottomHeight] === undefined) {\r\n                altCache[bottomHeight] = layer.distanceToVector3(bottomHeight, bottomHeight).x;\r\n            }\r\n            bottomHeight = altCache[bottomHeight];\r\n        }\r\n        if (altCache[height] === undefined) {\r\n            altCache[height] = layer.distanceToVector3(height, height).x;\r\n        }\r\n        if (altCache[width] === undefined) {\r\n            altCache[width] = layer.distanceToVector3(width, width).x;\r\n        }\r\n        const data = [];\r\n        for (let j = 0, len1 = multiLineString.length; j < len1; j++) {\r\n            const lineString = multiLineString[j];\r\n            const positions2d = getLinePosition(lineString, layer, center).positions2d;\r\n            transfer.push(positions2d);\r\n            data.push(positions2d);\r\n        }\r\n        datas.push({\r\n            data,\r\n            height: altCache[height],\r\n            width: altCache[width],\r\n            bottomHeight\r\n        });\r\n    }\r\n    return {\r\n        datas,\r\n        transfer\r\n    };\r\n}\r\n\r\n\r\n\r\n\r\n","import * as maptalks from 'maptalks';\r\nimport * as THREE from 'three';\r\nimport BaseObject from './BaseObject';\r\nimport { initVertexColors, getExtrudeGeometryParams } from './util/ExtrudeUtil';\r\nimport ExtrudePolygon from './ExtrudePolygon';\r\nimport MergedMixin from './MergedMixin';\r\nimport { getGeoJSONCenter, isGeoJSONPolygon } from './util/GeoJSONUtil';\r\nimport { generateBufferGeometry, generatePickBufferGeometry, getDefaultBufferGeometry, mergeBufferGeometries } from './util/MergeGeometryUtil';\r\nimport { getActor } from './worker/MeshActor';\r\nimport { ExtrudePolygonOptionType, PolygonType } from './type';\r\nimport { ThreeLayer } from './index';\r\nimport { getVertexColors } from './util/ThreeAdaptUtil';\r\nimport { setBottomHeight } from './util';\r\n\r\nconst OPTIONS = {\r\n    altitude: 0,\r\n    height: 1,\r\n    bottomHeight: 0,\r\n    topColor: null,\r\n    bottomColor: '#2d2f61',\r\n};\r\nconst TEMP_COORD = new maptalks.Coordinate(0, 0);\r\n\r\nclass ExtrudePolygons extends MergedMixin(BaseObject) {\r\n    constructor(polygons: Array<PolygonType>, options: ExtrudePolygonOptionType, material: THREE.Material, layer: ThreeLayer) {\r\n        if (!Array.isArray(polygons)) {\r\n            polygons = [polygons];\r\n        }\r\n        const len = polygons.length;\r\n        if (len === 0) {\r\n            console.error('polygons is empty');\r\n        }\r\n        // const centers = [];\r\n        let minX = Infinity, minY = Infinity, maxX = -Infinity, maxY = -Infinity;\r\n        for (let i = 0; i < len; i++) {\r\n            const polygon = polygons[i];\r\n            const center = ((polygon as any).getCenter ? (polygon as any).getCenter() : getGeoJSONCenter((polygon as any), TEMP_COORD));\r\n            let x, y;\r\n            if (Array.isArray(center)) {\r\n                x = center[0];\r\n                y = center[1];\r\n            } else if (center instanceof maptalks.Coordinate) {\r\n                x = center.x;\r\n                y = center.y;\r\n            }\r\n            minX = Math.min(minX, x);\r\n            minY = Math.min(minY, y);\r\n            maxX = Math.max(maxX, x);\r\n            maxY = Math.max(maxY, y);\r\n        }\r\n        // Get the center point of the point set\r\n        const center = new maptalks.Coordinate((minX + maxX) / 2, (minY + maxY) / 2);\r\n        options = maptalks.Util.extend({}, OPTIONS, options, { layer, polygons, coordinate: center });\r\n        const { topColor, bottomColor, altitude, asynchronous } = options;\r\n        let bufferGeometry;\r\n        const extrudePolygons = [], faceMap = [], geometriesAttributes = [];\r\n        if (asynchronous) {\r\n            var actor = getActor();\r\n            bufferGeometry = getDefaultBufferGeometry();\r\n            (actor as any).pushQueue({\r\n                type: 'Polygon',\r\n                layer,\r\n                key: options.key,\r\n                center,\r\n                data: polygons,\r\n                callback: (e) => {\r\n                    const { faceMap, geometriesAttributes } = e;\r\n                    this._faceMap = faceMap;\r\n                    this._geometriesAttributes = geometriesAttributes;\r\n                    const bufferGeometry = generateBufferGeometry(e);\r\n                    this._geometryCache = generatePickBufferGeometry(bufferGeometry);\r\n                    if (topColor) {\r\n                        initVertexColors(bufferGeometry, bottomColor, topColor, geometriesAttributes);\r\n                        (material as any).vertexColors = getVertexColors();\r\n                    }\r\n                    const object3d = this.getObject3d() as any;\r\n                    object3d.geometry = bufferGeometry;\r\n                    object3d.material.needsUpdate = true;\r\n                    this._setPickObject3d();\r\n                    this._init();\r\n                    if (this.isAdd) {\r\n                        const pick = this.getLayer().getPick();\r\n                        pick.add(this.pickObject3d);\r\n                    }\r\n                    this._fire('workerload', { target: this });\r\n                }\r\n            });\r\n        } else {\r\n            const centerPt = layer.coordinateToVector3(center);\r\n            const geometries = [];\r\n            let faceIndex = 0, psIndex = 0, normalIndex = 0, uvIndex = 0;\r\n            const altCache = {};\r\n            for (let i = 0; i < len; i++) {\r\n                const polygon = polygons[i];\r\n                const properties = (isGeoJSONPolygon(polygon as any) ? polygon['properties'] : (polygon as any).getProperties() || {});\r\n                const height = properties.height || 1;\r\n                const bottomHeight = properties.bottomHeight || 0;\r\n                const buffGeom = getExtrudeGeometryParams(polygon, height, layer, center, centerPt, altCache);\r\n                geometries.push(buffGeom);\r\n                const minZ = setBottomHeight(buffGeom, bottomHeight, layer, altCache);\r\n\r\n                // const extrudePolygon = new ExtrudePolygon(polygon, Object.assign({}, options, { height, index: i }), material, layer);\r\n                // extrudePolygons.push(extrudePolygon);\r\n\r\n                const { position, normal, uv, indices } = buffGeom;\r\n                const faceLen = indices.length / 3;\r\n                faceMap[i] = [faceIndex + 1, faceIndex + faceLen];\r\n                faceIndex += faceLen;\r\n                const psCount = position.length / 3,\r\n                    //  colorCount = buffGeom.attributes.color.count,\r\n                    normalCount = normal.length / 3, uvCount = uv.length / 2;\r\n                geometriesAttributes[i] = {\r\n                    position: {\r\n                        middleZ: minZ + altCache[height] / 2,\r\n                        count: psCount,\r\n                        start: psIndex,\r\n                        end: psIndex + psCount * 3,\r\n                    },\r\n                    normal: {\r\n                        count: normalCount,\r\n                        start: normalIndex,\r\n                        end: normalIndex + normalCount * 3,\r\n                    },\r\n                    // color: {\r\n                    //     count: colorCount,\r\n                    //     start: colorIndex,\r\n                    //     end: colorIndex + colorCount * 3,\r\n                    // },\r\n                    uv: {\r\n                        count: uvCount,\r\n                        start: uvIndex,\r\n                        end: uvIndex + uvCount * 2,\r\n                    },\r\n                    hide: false\r\n                };\r\n                psIndex += psCount * 3;\r\n                normalIndex += normalCount * 3;\r\n                // colorIndex += colorCount * 3;\r\n                uvIndex += uvCount * 2;\r\n            }\r\n            bufferGeometry = mergeBufferGeometries(geometries);\r\n            if (topColor) {\r\n                initVertexColors(bufferGeometry, bottomColor, topColor, geometriesAttributes);\r\n                (material as any).vertexColors = getVertexColors();\r\n            }\r\n        }\r\n\r\n        super();\r\n        this._initOptions(options);\r\n\r\n        this._createMesh(bufferGeometry, material);\r\n        const z = layer.distanceToVector3(altitude, altitude).x;\r\n        const v = layer.coordinateToVector3(center, z);\r\n        this.getObject3d().position.copy(v);\r\n\r\n        //Face corresponding to monomer\r\n        this._faceMap = faceMap;\r\n        this._baseObjects = extrudePolygons;\r\n        this._datas = polygons;\r\n        this._geometriesAttributes = geometriesAttributes;\r\n        this.faceIndex = null;\r\n        this._geometryCache = bufferGeometry.clone();\r\n        this.isHide = false;\r\n        this._colorMap = {};\r\n        this._initBaseObjectsEvent(extrudePolygons);\r\n        if (!asynchronous) {\r\n            this._setPickObject3d();\r\n            this._init();\r\n        }\r\n        this.type = 'ExtrudePolygons';\r\n    }\r\n\r\n    // eslint-disable-next-line consistent-return\r\n    getSelectMesh() {\r\n        const index = this._getIndex();\r\n        if (index != null) {\r\n            if (!this._baseObjects[index]) {\r\n                const polygon = this._datas[index];\r\n                const opts = Object.assign({}, this.options, isGeoJSONPolygon(polygon) ? polygon.properties : polygon.getProperties(), { index });\r\n                this._baseObjects[index] = new ExtrudePolygon(polygon, opts, (this.getObject3d() as any).material, this.getLayer());\r\n                this._proxyEvent(this._baseObjects[index]);\r\n            }\r\n            return {\r\n                data: this._datas[index],\r\n                baseObject: this._baseObjects[index]\r\n            };\r\n        }\r\n    }\r\n\r\n    // eslint-disable-next-line no-unused-vars\r\n    identify(coordinate): boolean {\r\n        return this.picked;\r\n    }\r\n}\r\n\r\nexport default ExtrudePolygons;\r\n","/* eslint-disable indent */\r\nimport * as maptalks from 'maptalks';\r\nimport { ThreeLayer } from './../index';\r\nimport * as THREE from 'three';\r\nimport { distanceToVector3 } from './index';\r\n\r\nfunction positionsConvert(worldPoints: Array<number>, altitude: number = 0, layer: ThreeLayer): Array<THREE.Vector3> {\r\n    const vectors: THREE.Vector3[] = [], cache = {};\r\n    for (let i = 0, len = worldPoints.length; i < len; i += 3) {\r\n        let x = worldPoints[i], y = worldPoints[i + 1], z = worldPoints[i + 2];\r\n        if (altitude > 0) {\r\n            z += distanceToVector3(altitude, layer, cache);\r\n        }\r\n        vectors.push(new THREE.Vector3(x, y, z));\r\n    }\r\n    return vectors;\r\n}\r\n\r\nexport function vectors2Pixel(worldPoints: Array<number> | Array<THREE.Vector3>, size: maptalks.Size,\r\n    camera: THREE.Camera, altitude = 0, layer: ThreeLayer): Array<{\r\n        x: number;\r\n        y: number;\r\n    }> {\r\n    if (!(worldPoints[0] instanceof THREE.Vector3)) {\r\n        worldPoints = positionsConvert(worldPoints as Array<number>, altitude, layer);\r\n    }\r\n    const pixels = (worldPoints as Array<THREE.Vector3>).map(worldPoint => {\r\n        return vector2Pixel(worldPoint, size, camera);\r\n    });\r\n    return pixels;\r\n\r\n}\r\n\r\n// eslint-disable-next-line camelcase\r\nexport function vector2Pixel(world_vector: THREE.Vector3, size: maptalks.Size, camera: THREE.Camera): {\r\n    x: number;\r\n    y: number;\r\n} {\r\n    // eslint-disable-next-line camelcase\r\n    const vector = world_vector.project(camera);\r\n    const halfWidth = size.width / 2;\r\n    const halfHeight = size.height / 2;\r\n    const result = {\r\n        x: Math.round(vector.x * halfWidth + halfWidth),\r\n        y: Math.round(-vector.y * halfHeight + halfHeight)\r\n    };\r\n    return result;\r\n}","import * as maptalks from 'maptalks';\r\nimport { ThreeLayer } from './index';\r\nimport * as THREE from 'three';\r\nimport BaseObject from './BaseObject';\r\nimport { PointOptionType } from './type';\r\nimport { vector2Pixel } from './util/IdentifyUtil';\r\nimport { addAttribute } from './util/ThreeAdaptUtil';\r\n\r\nconst OPTIONS = {\r\n    altitude: 0,\r\n    height: 0,\r\n    color: null\r\n};\r\n\r\nconst vector = new THREE.Vector3();\r\n\r\nclass Point extends BaseObject {\r\n    constructor(coordinate: maptalks.Coordinate, options: PointOptionType, material: THREE.PointsMaterial, layer: ThreeLayer) {\r\n        options = maptalks.Util.extend({}, OPTIONS, options, { layer, coordinate });\r\n        super();\r\n        let { height, altitude, color, size } = options;\r\n        const vs = [], colors = [];\r\n        if (color) {\r\n            color = (color instanceof THREE.Color ? color : new THREE.Color(color));\r\n            colors.push(color.r, color.g, color.b);\r\n        }\r\n        const z = layer.distanceToVector3(height, height).x;\r\n        const v = layer.coordinateToVector3(coordinate, z);\r\n        vs.push(0, 0, v.z);\r\n        const geometry = new THREE.BufferGeometry();\r\n        addAttribute(geometry, 'position', new THREE.Float32BufferAttribute(vs, 3, true));\r\n        if (colors.length) {\r\n            addAttribute(geometry, 'color', new THREE.Float32BufferAttribute(colors, 3, true));\r\n        }\r\n        if (size !== undefined) {\r\n            addAttribute(geometry, 'size', new THREE.Float32BufferAttribute([size], 1, true));\r\n        }\r\n\r\n        (options as any).positions = v;\r\n        this._initOptions(options);\r\n        this._createPoints(geometry, material);\r\n        const z1 = layer.distanceToVector3(altitude, altitude).x;\r\n        const v1 = new THREE.Vector3(v.x, v.y, z1);\r\n        this.getObject3d().position.copy(v1);\r\n        this.type = 'Point';\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {maptalks.Coordinate} coordinate\r\n     */\r\n    identify(coordinate: maptalks.Coordinate) {\r\n        const layer = this.getLayer(), size = this.getMap().getSize(),\r\n            camera = this.getLayer().getCamera(), positions = (this.getOptions() as any).positions, altitude = this.getOptions().altitude;\r\n        //Size of points\r\n        let pointSize = (this.getObject3d() as any).material.size;\r\n        if (pointSize === undefined) {\r\n            pointSize = (this.options as any).size || 1;\r\n        }\r\n        const pixel = this.getMap().coordToContainerPoint(coordinate);\r\n\r\n        const z = layer.distanceToVector3(altitude, altitude).x;\r\n        vector.x = positions.x;\r\n        vector.y = positions.y;\r\n        vector.z = positions.z + z;\r\n        //3D vector to screen coordinates\r\n        const p = vector2Pixel(vector, size, camera);\r\n        //Distance between two points\r\n        const distance = Math.sqrt(Math.pow(pixel.x - p.x, 2) + Math.pow(pixel.y - p.y, 2));\r\n        return (distance <= pointSize / 2);\r\n    }\r\n}\r\n\r\nexport default Point;\r\n","\r\nimport * as maptalks from 'maptalks';\r\ntype Grids = {\r\n    grids: BBox[],\r\n    averageX: number,\r\n    averageY: number,\r\n    ROWS: number,\r\n    COLS: number\r\n};\r\n\r\nconst ROW: number = 30, COL: number = 30;\r\n\r\n\r\nfunction contains(b: BBox, p: Array<number>) {\r\n    const { minx, miny, maxx, maxy } = b;\r\n    const [x, y] = p;\r\n    if (minx <= x && x <= maxx && miny <= y && y <= maxy) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nclass BBox {\r\n    minlng: number;\r\n    minlat: number;\r\n    maxlng: number;\r\n    maxlat: number;\r\n    minx: number;\r\n    miny: number;\r\n    maxx: number;\r\n    maxy: number;\r\n    coordinates: Array<Array<number>>;\r\n    positions: Array<THREE.Vector3>;\r\n    indexs: Array<number>;\r\n    key: string;\r\n\r\n    constructor(minlng: number, minlat: number, maxlng: number, maxlat: number) {\r\n        this.minlng = minlng;\r\n        this.minlat = minlat;\r\n        this.maxlng = maxlng;\r\n        this.maxlat = maxlat;\r\n        this.minx = Infinity;\r\n        this.miny = Infinity;\r\n        this.maxx = -Infinity;\r\n        this.maxy = -Infinity;\r\n        this.coordinates = [];\r\n        this.positions = [];\r\n        this.indexs = [];\r\n        this.key = null;\r\n    }\r\n\r\n\r\n    /**\r\n     *\r\n     * @param {*} map\r\n     */\r\n    updateBBoxPixel(map: maptalks.Map) {\r\n        let minx = Infinity, miny = Infinity, maxx = -Infinity, maxy = -Infinity;\r\n        const { minlng, minlat, maxlng, maxlat } = this;\r\n        [\r\n            [minlng, minlat],\r\n            [minlng, maxlat],\r\n            [maxlng, minlat],\r\n            [maxlng, maxlat]\r\n        ].map(lnglat => {\r\n            return new maptalks.Coordinate(lnglat);\r\n        }).map(coordinate => {\r\n            return map.coordToContainerPoint(coordinate);\r\n        }).forEach(pixel => {\r\n            minx = Math.min(minx, pixel.x);\r\n            miny = Math.min(miny, pixel.y);\r\n            maxx = Math.max(maxx, pixel.x);\r\n            maxy = Math.max(maxy, pixel.y);\r\n        });\r\n        this.minx = minx;\r\n        this.miny = miny;\r\n        this.maxx = maxx;\r\n        this.maxy = maxy;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     *Determine whether a point is included\r\n     * @param {*} c\r\n     */\r\n    containsCoordinate(c: Array<number> | maptalks.Coordinate) {\r\n        let lng, lat;\r\n        if (Array.isArray(c)) {\r\n            lng = c[0];\r\n            lat = c[1];\r\n        } else if (c instanceof maptalks.Coordinate) {\r\n            lng = c.x;\r\n            lat = c.y;\r\n        }\r\n        const { minlng, minlat, maxlng, maxlat } = this;\r\n        return (minlng <= lng && lng <= maxlng && minlat <= lat && lat <= maxlat);\r\n    }\r\n\r\n    /**\r\n     *Judge rectangle intersection\r\n     * @param {*} pixel\r\n     * @param {*} size\r\n     */\r\n    isRecCross(pixel: maptalks.Point, size: number): boolean {\r\n        const { x, y } = pixel;\r\n        const rec = {\r\n            minx: x - size / 2,\r\n            miny: y - size / 2,\r\n            maxx: x + size / 2,\r\n            maxy: y + size / 2\r\n        };\r\n        const { minx, miny, maxx, maxy } = rec;\r\n        if (contains(this, [minx, miny]) ||\r\n            contains(this, [minx, maxy]) ||\r\n            contains(this, [maxx, miny]) ||\r\n            contains(this, [maxx, maxy]) ||\r\n            contains(rec as BBox, [this.minx, this.miny]) ||\r\n            contains(rec as BBox, [this.minx, this.maxy]) ||\r\n            contains(rec as BBox, [this.maxx, this.miny]) ||\r\n            contains(rec as BBox, [this.maxx, this.maxy])) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     *generate grids\r\n     * @param {*} minlng\r\n     * @param {*} minlat\r\n     * @param {*} maxlng\r\n     * @param {*} maxlat\r\n     */\r\n    static initGrids(minlng: number, minlat: number, maxlng: number, maxlat: number): Grids {\r\n        const grids: BBox[] = [], offsetX = maxlng - minlng, offsetY = maxlat - minlat;\r\n        const averageX = offsetX / COL, averageY = offsetY / ROW;\r\n        let x = minlng, y = minlat;\r\n        for (let i = 0; i < COL; i++) {\r\n            x = minlng + i * averageX;\r\n            for (let j = 0; j < ROW; j++) {\r\n                y = minlat + j * averageY;\r\n                const bounds = new BBox(x, y, x + averageX, y + averageY);\r\n                bounds.key = j + '-' + i;\r\n                grids.push(bounds);\r\n            }\r\n        }\r\n        return { grids, averageX, averageY, ROWS: ROW, COLS: COL };\r\n    }\r\n\r\n}\r\n\r\nexport default BBox;\r\n","import * as maptalks from 'maptalks';\r\nimport * as THREE from 'three';\r\nimport BaseObject from './BaseObject';\r\nimport Point from './Point';\r\nimport { vector2Pixel } from './util/IdentifyUtil';\r\nimport MergedMixin from './MergedMixin';\r\nimport BBox from './util/BBox';\r\nimport { addAttribute } from './util/ThreeAdaptUtil';\r\nimport { distanceToVector3 } from './util';\r\nimport { PointOptionType } from './type';\r\nimport { ThreeLayer } from './index';\r\n\r\nconst OPTIONS = {\r\n    altitude: 0\r\n};\r\n\r\nconst vector = new THREE.Vector3();\r\n\r\nfunction roundFun(value: number, n: number) {\r\n    const tempValue = Math.pow(10, n);\r\n    return Math.round(value * tempValue) / tempValue;\r\n}\r\n\r\n/**\r\n *points\r\n */\r\nclass Points extends MergedMixin(BaseObject) {\r\n    constructor(points: Array<PointOptionType>, options: PointOptionType, material: THREE.PointsMaterial, layer: ThreeLayer) {\r\n        if (!Array.isArray(points)) {\r\n            points = [points];\r\n        }\r\n        options = maptalks.Util.extend({}, OPTIONS, options, { layer, points });\r\n        let minX = Infinity, minY = Infinity, maxX = -Infinity, maxY = -Infinity;\r\n        for (let i = 0, len = points.length; i < len; i++) {\r\n            const { coordinate } = points[i];\r\n            let x, y;\r\n            if (Array.isArray(coordinate)) {\r\n                x = coordinate[0];\r\n                y = coordinate[1];\r\n            } else if (coordinate instanceof maptalks.Coordinate) {\r\n                x = coordinate.x;\r\n                y = coordinate.y;\r\n            }\r\n            points[i].coords = [x, y];\r\n            minX = Math.min(minX, x);\r\n            minY = Math.min(minY, y);\r\n            maxX = Math.max(maxX, x);\r\n            maxY = Math.max(maxY, y);\r\n        }\r\n        const centerPt = layer.coordinateToVector3([(minX + maxX) / 2, (minY + maxY) / 2]);\r\n        const { grids, averageX, averageY, ROWS, COLS } = BBox.initGrids(minX, minY, maxX, maxY);\r\n        const gridslen = grids.length;\r\n\r\n        const vs = new Float32Array(points.length * 3), vectors = [],\r\n            colors = new Float32Array(points.length * 3), sizes = new Float32Array(points.length),\r\n            pointMeshes = [], geometriesAttributes = [];\r\n        const cache = {};\r\n        let maxSize = 0;\r\n        let hasColor = false, hasSize = false;\r\n        const TEMP_VECTOR = new THREE.Vector3(0, 0, 0);\r\n        for (let i = 0, len = points.length; i < len; i++) {\r\n            let { coordinate, height, color, size, coords } = points[i];\r\n            const idx = i * 3;\r\n            if (color) {\r\n                hasColor = true;\r\n                color = (color instanceof THREE.Color ? color : new THREE.Color(color));\r\n                colors[idx] = color.r;\r\n                colors[idx + 1] = color.g;\r\n                colors[idx + 2] = color.b;\r\n            }\r\n            if (size) {\r\n                hasSize = true;\r\n                sizes[i] = size;\r\n                maxSize = Math.max(maxSize, size);\r\n            }\r\n            const z = distanceToVector3(height, layer, cache);\r\n            const v = layer.coordinateToVector3(coordinate, z);\r\n            TEMP_VECTOR.x = v.x;\r\n            TEMP_VECTOR.y = v.y;\r\n            TEMP_VECTOR.z = v.z;\r\n            TEMP_VECTOR.sub(centerPt);\r\n            // const v1 = v.clone().sub(centerPt);\r\n            vs[idx] = TEMP_VECTOR.x;\r\n            vs[idx + 1] = TEMP_VECTOR.y;\r\n            vs[idx + 2] = TEMP_VECTOR.z;\r\n\r\n            vectors.push(v);\r\n\r\n            geometriesAttributes[i] = {\r\n                position: {\r\n                    count: 1,\r\n                    start: i * 3,\r\n                    end: i * 3 + 3\r\n                },\r\n                hide: false\r\n            };\r\n            let row = roundFun(((coords[1] - minY) / averageY), 4);\r\n            let col = roundFun(((coords[0] - minX) / averageX), 4);\r\n            row -= 1;\r\n            col -= 1;\r\n            row = Math.max(0, row);\r\n            col = Math.max(0, col);\r\n            row = Math.ceil(row);\r\n            col = Math.ceil(col);\r\n            const gridIndex = col * ROWS + row;\r\n            if (grids[gridIndex]) {\r\n                grids[gridIndex].positions.push(v);\r\n                grids[gridIndex].indexs.push(i);\r\n            }\r\n            // for (let j = 0; j < gridslen; j++) {\r\n            //     if (grids[j].containsCoordinate(coordinate)) {\r\n            //         // grids[j].coordinates.push(coordinate);\r\n            //         grids[j].positions.push(v);\r\n            //         grids[j].indexs.push(i);\r\n            //         console.log(j, gridIndex);\r\n            //         break;\r\n            //     }\r\n            // }\r\n        }\r\n        const geometry = new THREE.BufferGeometry();\r\n        addAttribute(geometry, 'position', new THREE.BufferAttribute(vs, 3, true));\r\n        if (hasColor) {\r\n            addAttribute(geometry, 'color', new THREE.BufferAttribute(colors, 3, true));\r\n        }\r\n        if (hasSize) {\r\n            addAttribute(geometry, 'size', new THREE.BufferAttribute(sizes, 1, true));\r\n        }\r\n\r\n        //for identify\r\n        (options as any).positions = vectors;\r\n        super();\r\n        this._initOptions(options);\r\n        this._createPoints(geometry, material);\r\n        const altitude = options.altitude;\r\n        const z = layer.distanceToVector3(altitude, altitude).x;\r\n        const v = centerPt.clone();\r\n        v.z = z;\r\n        this.getObject3d().position.copy(v);\r\n\r\n        this._baseObjects = pointMeshes;\r\n        this._datas = points;\r\n        this.faceIndex = null;\r\n        this._geometriesAttributes = geometriesAttributes;\r\n        this._geometryCache = geometry.clone();\r\n        this.isHide = false;\r\n        this._initBaseObjectsEvent(pointMeshes);\r\n        this._grids = grids;\r\n        this._bindMapEvents();\r\n        this.type = 'Points';\r\n        this.maxSize = maxSize;\r\n    }\r\n\r\n    _bindMapEvents() {\r\n        const map = this.getMap();\r\n        const events = 'zoomstart zooming zoomend movestart moving moveend pitch rotate';\r\n        this.on('add', () => {\r\n            this._updateGrids();\r\n            map.on(events, this._updateGrids, this);\r\n        });\r\n        this.on('remove', () => {\r\n            map.off(events, this._updateGrids, this);\r\n        });\r\n    }\r\n\r\n    _updateGrids() {\r\n        const map = this.getMap();\r\n        this._grids.forEach(b => {\r\n            if (b.indexs.length) {\r\n                b.updateBBoxPixel(map);\r\n            }\r\n        });\r\n    }\r\n\r\n    // eslint-disable-next-line consistent-return\r\n    getSelectMesh() {\r\n        const index = this.faceIndex;\r\n        if (index != null) {\r\n            if (!this._baseObjects[index]) {\r\n                const data = this._datas[index];\r\n                const { coordinate, height, color, size } = data;\r\n                this._baseObjects[index] = new Point(coordinate, { height, index, color, size } as any, (this.getObject3d() as any).material, this.getLayer());\r\n                this._proxyEvent(this._baseObjects[index]);\r\n            }\r\n            return {\r\n                data: this._datas[index],\r\n                baseObject: this._baseObjects[index]\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n   *\r\n   * @param {maptalks.Coordinate} coordinate\r\n   */\r\n    identify(coordinate: maptalks.Coordinate) {\r\n        const layer = this.getLayer(), size = this.getMap().getSize(),\r\n            camera = this.getLayer().getCamera(), altitude = this.getOptions().altitude, map = this.getMap();\r\n        const z = layer.distanceToVector3(altitude, altitude).x;\r\n        let pointSize = (this.getObject3d() as any).material.size;\r\n        const isDynamicSize = pointSize === undefined;\r\n        const pixel = map.coordToContainerPoint(coordinate);\r\n        const bs = [];\r\n        this._grids.forEach(b => {\r\n            if (b.indexs.length) {\r\n                if (b.isRecCross(pixel, isDynamicSize ? this.maxSize : pointSize)) {\r\n                    bs.push(b);\r\n                }\r\n            }\r\n        });\r\n        if (bs.length < 1) {\r\n            return false;\r\n        }\r\n\r\n        for (let i = 0, len = bs.length; i < len; i++) {\r\n            for (let len1 = bs[i].positions.length, j = len1 - 1; j >= 0; j--) {\r\n                if (isDynamicSize) {\r\n                    pointSize = this._datas[bs[i].indexs[j]].size || 1;\r\n                }\r\n                const v = bs[i].positions[j];\r\n                vector.x = v.x;\r\n                vector.y = v.y;\r\n                vector.z = v.z + z;\r\n                const p = vector2Pixel(vector, size, camera);\r\n                const distance = Math.sqrt(Math.pow(pixel.x - p.x, 2) + Math.pow(pixel.y - p.y, 2));\r\n                if (distance <= pointSize / 2) {\r\n                    this.faceIndex = bs[i].indexs[j];\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\nexport default Points;\r\n","import * as maptalks from 'maptalks';\r\nimport BaseObject from './BaseObject';\r\nimport { getGeometry, initVertexColors, mergeBarGeometry } from './util/BarUtil';\r\nimport Bar from './Bar';\r\nimport MergedMixin from './MergedMixin';\r\nimport { distanceToVector3, getCenterOfPoints } from './util/index';\r\nimport { getVertexColors } from './util/ThreeAdaptUtil';\r\nimport { BarOptionType } from './type/index';\r\nimport { ThreeLayer } from './index';\r\n\r\n\r\nconst OPTIONS = {\r\n    coordinate: '',\r\n    radius: 10,\r\n    height: 100,\r\n    radialSegments: 6,\r\n    altitude: 0,\r\n    topColor: '',\r\n    bottomColor: '#2d2f61',\r\n};\r\n\r\n/**\r\n * merged bars\r\n */\r\nclass Bars extends MergedMixin(BaseObject) {\r\n    constructor(points: Array<BarOptionType>, options: BarOptionType, material: THREE.Material, layer: ThreeLayer) {\r\n        if (!Array.isArray(points)) {\r\n            points = [points];\r\n        }\r\n        const len = points.length;\r\n        const center = getCenterOfPoints(points);\r\n        const centerPt = layer.coordinateToVector3(center);\r\n        const geometries = [], bars = [], geometriesAttributes = [], faceMap = [];\r\n        let faceIndex = 0, psIndex = 0, normalIndex = 0, uvIndex = 0;\r\n        const cache = {};\r\n        for (let i = 0; i < len; i++) {\r\n            const opts = maptalks.Util.extend({ index: i }, OPTIONS, points[i]);\r\n            const { radius, radialSegments, altitude, topColor, bottomColor, height, coordinate } = opts;\r\n            const r = distanceToVector3(radius, layer, cache);\r\n            const h = distanceToVector3(height, layer, cache);\r\n            const alt = distanceToVector3(altitude, layer, cache);\r\n            const buffGeom = getGeometry({ radius: r, height: h, radialSegments });\r\n            if (topColor) {\r\n                initVertexColors(buffGeom, bottomColor, topColor, 'z', h / 2);\r\n                (material as any).vertexColors = getVertexColors();\r\n            }\r\n            // buffGeom.rotateX(Math.PI / 2);\r\n            const v = layer.coordinateToVector3(coordinate).sub(centerPt);\r\n            const parray = buffGeom.attributes.position.array as any;\r\n            for (let j = 0, len1 = parray.length; j < len1; j += 3) {\r\n                parray[j + 2] += alt;\r\n                parray[j] += v.x;\r\n                parray[j + 1] += v.y;\r\n                parray[j + 2] += v.z;\r\n            }\r\n            geometries.push(buffGeom);\r\n            const bar = new Bar(coordinate, opts, material, layer);\r\n            bars.push(bar);\r\n\r\n            const faceLen = buffGeom.index.count / 3;\r\n            faceMap[i] = [faceIndex + 1, faceIndex + faceLen];\r\n            faceIndex += faceLen;\r\n\r\n            const psCount = buffGeom.attributes.position.count,\r\n                //  colorCount = buffGeom.attributes.color.count,\r\n                normalCount = buffGeom.attributes.normal.count, uvCount = buffGeom.attributes.uv.count;\r\n            geometriesAttributes[i] = {\r\n                position: {\r\n                    count: psCount,\r\n                    start: psIndex,\r\n                    end: psIndex + psCount * 3,\r\n                },\r\n                normal: {\r\n                    count: normalCount,\r\n                    start: normalIndex,\r\n                    end: normalIndex + normalCount * 3,\r\n                },\r\n                // color: {\r\n                //     count: colorCount,\r\n                //     start: colorIndex,\r\n                //     end: colorIndex + colorCount * 3,\r\n                // },\r\n                uv: {\r\n                    count: uvCount,\r\n                    start: uvIndex,\r\n                    end: uvIndex + uvCount * 2,\r\n                },\r\n                hide: false\r\n            };\r\n            psIndex += psCount * 3;\r\n            normalIndex += normalCount * 3;\r\n            // colorIndex += colorCount * 3;\r\n            uvIndex += uvCount * 2;\r\n        }\r\n        super();\r\n        options = maptalks.Util.extend({}, { altitude: 0, layer, points }, options);\r\n        this._initOptions(options);\r\n        const geometry = mergeBarGeometry(geometries);\r\n        this._createMesh(geometry, material);\r\n        const altitude = options.altitude;\r\n        const z = layer.distanceToVector3(altitude, altitude).x;\r\n        const v = centerPt.clone();\r\n        v.z = z;\r\n        this.getObject3d().position.copy(v);\r\n        this._faceMap = faceMap;\r\n        this._baseObjects = bars;\r\n        this._datas = points;\r\n        this._geometriesAttributes = geometriesAttributes;\r\n        this.faceIndex = null;\r\n        this._geometryCache = geometry.clone();\r\n        this.isHide = false;\r\n        this._colorMap = {};\r\n        this._initBaseObjectsEvent(bars);\r\n        this._setPickObject3d();\r\n        this._init();\r\n        this.type = 'Bars';\r\n    }\r\n\r\n    // eslint-disable-next-line no-unused-vars\r\n    identify() {\r\n        return this.picked;\r\n    }\r\n}\r\n\r\nexport default Bars;\r\n","import * as maptalks from 'maptalks';\r\nimport * as THREE from 'three';\r\nimport MergedMixin from './MergedMixin';\r\nimport BaseObject from './BaseObject';\r\nimport { initVertexColors } from './util/ExtrudeUtil';\r\nimport { getExtrudeLineParams, LineStringSplit } from './util/LineUtil';\r\nimport ExtrudeLine from './ExtrudeLine';\r\nimport { isGeoJSON, isGeoJSONLine } from './util/GeoJSONUtil';\r\nimport { generateBufferGeometry, generatePickBufferGeometry, getDefaultBufferGeometry, mergeBufferGeometries, mergeBufferGeometriesAttribute } from './util/MergeGeometryUtil';\r\nimport { distanceToVector3, getCenterOfPoints, setBottomHeight } from './util/index';\r\nimport { getActor } from './worker/MeshActor';\r\nimport { ExtrudeLineOptionType, LineStringType, MergeAttributeType, SingleLineStringType } from './type/index';\r\nimport { ThreeLayer } from './index';\r\nimport { getVertexColors } from './util/ThreeAdaptUtil';\r\n\r\nconst OPTIONS = {\r\n    width: 3,\r\n    height: 1,\r\n    altitude: 0,\r\n    topColor: null,\r\n    bottomColor: '#2d2f61'\r\n};\r\n\r\nclass ExtrudeLines extends MergedMixin(BaseObject) {\r\n    constructor(lineStrings: Array<LineStringType>, options: ExtrudeLineOptionType, material: THREE.Material, layer: ThreeLayer) {\r\n        if (!Array.isArray(lineStrings)) {\r\n            lineStrings = [lineStrings];\r\n        }\r\n        const centers: maptalks.Coordinate[] = [], lineStringList: Array<Array<SingleLineStringType>> = [];\r\n        const len = lineStrings.length;\r\n        for (let i = 0; i < len; i++) {\r\n            const lineString = lineStrings[i];\r\n            const result = LineStringSplit(lineString);\r\n            centers.push(result.center);\r\n            lineStringList.push(result.lineStrings);\r\n        }\r\n        // Get the center point of the point set\r\n        const center = getCenterOfPoints(centers);\r\n        options = maptalks.Util.extend({}, OPTIONS, options, { layer, lineStrings, coordinate: center });\r\n        const { altitude, topColor, bottomColor, asynchronous } = options;\r\n        let bufferGeometry: THREE.BufferGeometry;\r\n        const faceMap = [], extrudeLines = [], geometriesAttributes = [];\r\n        if (asynchronous) {\r\n            var actor = getActor();\r\n            bufferGeometry = getDefaultBufferGeometry();\r\n            (actor as any).pushQueue({\r\n                type: 'LineString',\r\n                layer,\r\n                key: options.key,\r\n                center,\r\n                data: lineStringList,\r\n                lineStrings,\r\n                callback: (e) => {\r\n                    const { faceMap, geometriesAttributes } = e;\r\n                    this._faceMap = faceMap;\r\n                    this._geometriesAttributes = geometriesAttributes;\r\n                    const bufferGeometry = generateBufferGeometry(e);\r\n                    this._geometryCache = generatePickBufferGeometry(bufferGeometry);\r\n                    if (topColor) {\r\n                        initVertexColors(bufferGeometry, bottomColor, topColor, geometriesAttributes);\r\n                        (material as any).vertexColors = getVertexColors();\r\n                    }\r\n                    (this.getObject3d() as any).geometry = bufferGeometry;\r\n                    (this.getObject3d() as any).material.needsUpdate = true;\r\n                    this._setPickObject3d();\r\n                    this._init();\r\n                    if (this.isAdd) {\r\n                        const pick = this.getLayer().getPick();\r\n                        pick.add(this.pickObject3d);\r\n                    }\r\n                    this._fire('workerload', { target: this });\r\n                }\r\n            });\r\n        } else {\r\n            const geometries: MergeAttributeType[] = [];\r\n            let faceIndex = 0, faceMap = [],\r\n                psIndex = 0, normalIndex = 0;\r\n            const cache = {};\r\n            for (let i = 0; i < len; i++) {\r\n                const lineString = lineStrings[i];\r\n                const opts = maptalks.Util.extend({}, OPTIONS, isGeoJSON(lineString as any) ? lineString['properties'] : (lineString as any).getProperties(), { index: i });\r\n                const { height, width, bottomHeight } = opts;\r\n                const w = distanceToVector3(width, layer, cache);\r\n                const h = distanceToVector3(height, layer, cache);\r\n                const lls = lineStringList[i];\r\n                const extrudeParams: MergeAttributeType[] = [];\r\n                let minZ = 0;\r\n                for (let m = 0, le = lls.length; m < le; m++) {\r\n                    const attribute = getExtrudeLineParams(lls[m], w, h, layer, center);\r\n                    minZ = setBottomHeight(attribute, bottomHeight, layer, cache);\r\n                    extrudeParams.push(attribute);\r\n                }\r\n                const buffGeom = mergeBufferGeometriesAttribute(extrudeParams);\r\n                geometries.push(buffGeom);\r\n\r\n                // const extrudeLine = new ExtrudeLine(lineString, opts, material, layer);\r\n                // extrudeLines.push(extrudeLine);\r\n\r\n                const { position, normal, indices } = buffGeom;\r\n                const faceLen = indices.length / 3;\r\n                faceMap[i] = [faceIndex + 1, faceIndex + faceLen];\r\n                faceIndex += faceLen;\r\n                const psCount = position.length / 3,\r\n                    //  colorCount = buffGeom.attributes.color.count,\r\n                    normalCount = normal.length / 3;\r\n                geometriesAttributes[i] = {\r\n                    position: {\r\n                        middleZ: minZ + h / 2,\r\n                        count: psCount,\r\n                        start: psIndex,\r\n                        end: psIndex + psCount * 3,\r\n                    },\r\n                    normal: {\r\n                        count: normalCount,\r\n                        start: normalIndex,\r\n                        end: normalIndex + normalCount * 3,\r\n                    },\r\n                    // color: {\r\n                    //     count: colorCount,\r\n                    //     start: colorIndex,\r\n                    //     end: colorIndex + colorCount * 3,\r\n                    // },\r\n                    // uv: {\r\n                    //     count: uvCount,\r\n                    //     start: uvIndex,\r\n                    //     end: uvIndex + uvCount * 2,\r\n                    // },\r\n                    hide: false\r\n                };\r\n                psIndex += psCount * 3;\r\n                normalIndex += normalCount * 3;\r\n                // colorIndex += colorCount * 3;\r\n                // uvIndex += uvCount * 2;\r\n            }\r\n            bufferGeometry = mergeBufferGeometries(geometries);\r\n\r\n            if (topColor) {\r\n                initVertexColors(bufferGeometry, bottomColor, topColor, geometriesAttributes);\r\n                (material as any).vertexColors = getVertexColors();\r\n            }\r\n        }\r\n\r\n        super();\r\n        this._initOptions(options);\r\n\r\n        this._createMesh(bufferGeometry, material);\r\n        const z = layer.distanceToVector3(altitude, altitude).x;\r\n        const v = layer.coordinateToVector3(center, z);\r\n        this.getObject3d().position.copy(v);\r\n\r\n        //Face corresponding to monomer\r\n        this._faceMap = faceMap;\r\n        this._baseObjects = extrudeLines;\r\n        this._datas = lineStrings;\r\n        this._geometriesAttributes = geometriesAttributes;\r\n        this.faceIndex = null;\r\n        this._geometryCache = bufferGeometry.clone();\r\n        this.isHide = false;\r\n        this._colorMap = {};\r\n        this._initBaseObjectsEvent(extrudeLines);\r\n        if (!asynchronous) {\r\n            this._setPickObject3d();\r\n            this._init();\r\n        }\r\n        this.type = 'ExtrudeLines';\r\n    }\r\n\r\n    // eslint-disable-next-line consistent-return\r\n    getSelectMesh() {\r\n        const index = this._getIndex();\r\n        if (index != null) {\r\n            if (!this._baseObjects[index]) {\r\n                const lineString = this._datas[index];\r\n                const opts = Object.assign({}, this.options, isGeoJSONLine(lineString) ? lineString.properties : lineString.getProperties(), { index });\r\n                this._baseObjects[index] = new ExtrudeLine(lineString, opts, (this.getObject3d() as any).material, this.getLayer());\r\n                this._proxyEvent(this._baseObjects[index]);\r\n            }\r\n            return {\r\n                data: this._datas[index],\r\n                baseObject: this._baseObjects[index]\r\n            };\r\n        }\r\n    }\r\n\r\n    // eslint-disable-next-line no-unused-vars\r\n    identify(coordinate): boolean {\r\n        return this.picked;\r\n    }\r\n}\r\n\r\nexport default ExtrudeLines;\r\n","import * as maptalks from 'maptalks';\r\nimport * as THREE from 'three';\r\nimport BaseObject from './BaseObject';\r\nimport { getLinePosition, LineStringSplit, setLineSegmentPosition } from './util/LineUtil';\r\nimport MergedMixin from './MergedMixin';\r\nimport Line from './Line';\r\nimport { isGeoJSONLine } from './util/GeoJSONUtil';\r\nimport { addAttribute, getVertexColors } from './util/ThreeAdaptUtil';\r\nimport { getCenterOfPoints, getGeometriesColorArray, setBottomHeight } from './util/index';\r\nimport { LineMaterialType, LineOptionType, LineStringType } from './type/index';\r\nimport { ThreeLayer } from './index';\r\n\r\nconst OPTIONS = {\r\n    altitude: 0,\r\n    colors: null\r\n};\r\n\r\n/**\r\n *\r\n */\r\nclass Lines extends MergedMixin(BaseObject) {\r\n    constructor(lineStrings: Array<LineStringType>, options: LineOptionType, material: LineMaterialType, layer: ThreeLayer) {\r\n        if (!Array.isArray(lineStrings)) {\r\n            lineStrings = [lineStrings];\r\n        }\r\n\r\n        const centers = [], lineStringList = [];\r\n        const len = lineStrings.length;\r\n        for (let i = 0; i < len; i++) {\r\n            const lineString = lineStrings[i];\r\n            const result = LineStringSplit(lineString);\r\n            centers.push(result.center);\r\n            lineStringList.push(result.lineStrings);\r\n        }\r\n        // Get the center point of the point set\r\n        const center = getCenterOfPoints(centers);\r\n        options = maptalks.Util.extend({}, OPTIONS, options, { layer, lineStrings, coordinate: center });\r\n\r\n        const lines = [], cache = {};\r\n        let faceIndex = 0, faceMap = [], geometriesAttributes = [],\r\n            psIndex = 0, ps = [];\r\n        for (let i = 0; i < len; i++) {\r\n            const lls = lineStringList[i];\r\n            let psCount = 0;\r\n            for (let m = 0, le = lls.length; m < le; m++) {\r\n                const properties = (isGeoJSONLine(lls[m] as any) ? lls[m]['properties'] : (lls[m] as any).getProperties() || {});\r\n                const { positionsV } = getLinePosition(lls[m], layer, center);\r\n                setBottomHeight(positionsV, properties.bottomHeight, layer, cache);\r\n                psCount += (positionsV.length * 2 - 2);\r\n                setLineSegmentPosition(ps, positionsV);\r\n            }\r\n\r\n\r\n            // const line = new Line(lineString, opts, material, layer);\r\n            // lines.push(line);\r\n\r\n            // const psCount = positionsV.length + positionsV.length - 2;\r\n            const faceLen = psCount;\r\n            faceMap[i] = [faceIndex, faceIndex + faceLen];\r\n            faceIndex += faceLen;\r\n\r\n            geometriesAttributes[i] = {\r\n                position: {\r\n                    count: psCount,\r\n                    start: psIndex,\r\n                    end: psIndex + psCount * 3,\r\n                },\r\n                hide: false\r\n            };\r\n            psIndex += psCount * 3;\r\n        }\r\n\r\n        const geometry = new THREE.BufferGeometry();\r\n        addAttribute(geometry, 'position', new THREE.Float32BufferAttribute(ps, 3));\r\n        super();\r\n        this._initOptions(options);\r\n\r\n        this._createLineSegments(geometry, material);\r\n\r\n        const { altitude } = options;\r\n        const z = layer.distanceToVector3(altitude, altitude).x;\r\n        const v = layer.coordinateToVector3(center, z);\r\n        this.getObject3d().position.copy(v);\r\n\r\n        this._faceMap = faceMap;\r\n        this._baseObjects = lines;\r\n        this._datas = lineStrings;\r\n        this._geometriesAttributes = geometriesAttributes;\r\n        this.faceIndex = null;\r\n        this.index = null;\r\n        this._geometryCache = geometry.clone();\r\n        this.isHide = false;\r\n        this._colorMap = {};\r\n        this._initBaseObjectsEvent(lines);\r\n        this._setPickObject3d();\r\n        this._init();\r\n        this.type = 'Lines';\r\n    }\r\n\r\n    // eslint-disable-next-line consistent-return\r\n    getSelectMesh() {\r\n        const index = this._getIndex();\r\n        if (index != null) {\r\n            if (!this._baseObjects[index]) {\r\n                const lineString = this._datas[index];\r\n                const opts = maptalks.Util.extend({}, this.getOptions(), { index },\r\n                    isGeoJSONLine(lineString) ? lineString.properties : lineString.getProperties());\r\n                this._baseObjects[index] = new Line(lineString, opts, (this.getObject3d() as any).material, this.getLayer());\r\n                this._proxyEvent(this._baseObjects[index]);\r\n            }\r\n            return {\r\n                data: this._datas[index],\r\n                baseObject: this._baseObjects[index]\r\n            };\r\n        }\r\n    }\r\n\r\n    _setPickObject3d() {\r\n        const geometry = this._geometryCache || (this.getObject3d() as any).geometry.clone();\r\n        const pick = this.getLayer().getPick();\r\n        const { _geometriesAttributes } = this;\r\n        const len = _geometriesAttributes.length;\r\n        const colors = getGeometriesColorArray(_geometriesAttributes);\r\n        let cIndex = 0;\r\n        for (let i = 0; i < len; i++) {\r\n            const color = pick.getColor();\r\n            const colorIndex = color.getHex();\r\n            this._colorMap[colorIndex] = i;\r\n            const { count } = _geometriesAttributes[i].position;\r\n            this._datas[i].colorIndex = colorIndex;\r\n            for (let j = 0; j < count; j++) {\r\n                colors[cIndex] = color.r;\r\n                colors[cIndex + 1] = color.g;\r\n                colors[cIndex + 2] = color.b;\r\n                cIndex += 3;\r\n            }\r\n        }\r\n        addAttribute(geometry, 'color', new THREE.BufferAttribute(colors, 3, true));\r\n        const material = (this.getObject3d() as any).material.clone();\r\n        material.color.set('#fff');\r\n        material.vertexColors = getVertexColors();\r\n        const color = pick.getColor();\r\n        const colorIndex = color.getHex();\r\n        const mesh = new THREE.LineSegments(geometry, material);\r\n        mesh.position.copy(this.getObject3d().position);\r\n        mesh['_colorIndex'] = colorIndex;\r\n        this.setPickObject3d(mesh);\r\n    }\r\n\r\n    // eslint-disable-next-line no-unused-vars\r\n    identify(coordinate) {\r\n        return this.picked;\r\n    }\r\n}\r\n\r\nexport default Lines;\r\n","/*\r\n\r\nGlobal sharing\r\n\r\n*/\r\n\r\nimport { Queue } from \"./../type\";\r\n\r\n//Maximum concurrent\r\nconst MAX: number = 10;\r\nconst waitingQueue: Array<Queue> = [];\r\nconst currentQueue: Array<Queue> = [];\r\n\r\nexport function getQueues(): {\r\n    waitingQueue: Queue[];\r\n    currentQueue: Queue[];\r\n} {\r\n    return {\r\n        waitingQueue,\r\n        currentQueue\r\n    };\r\n}\r\n\r\n/**\r\n *\r\n * @param {*} key\r\n * @param {*} url\r\n * @param {*} callback\r\n * @param {*} img\r\n * @param {*} vt\r\n */\r\nexport function pushQueue(key: string, url: string, callback: Function, img: any, vt: any): void {\r\n    // url += `?key=${key}`;\r\n    const q = {\r\n        key,\r\n        url,\r\n        callback,\r\n        img,\r\n        vt\r\n    };\r\n    if (currentQueue.length < MAX) {\r\n        currentQueue.push(q);\r\n        vt.loopMessage(q);\r\n    } else {\r\n        waitingQueue.push(q);\r\n    }\r\n}\r\n\r\n/**\r\n *\r\n * @param {*} index\r\n */\r\nexport function outQueue(index: string): void {\r\n    const callback = deleteQueueItem(waitingQueue, index);\r\n    if (callback) {\r\n        callback(index);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param {*} queArray\r\n * @param {*} index\r\n */\r\nexport function deleteQueueItem(queArray: Queue[], index: string): Function {\r\n    for (let i = 0, len = queArray.length; i < len; i++) {\r\n        const q = queArray[i];\r\n        if (q) {\r\n            const { key, callback } = q;\r\n            if (index === key) {\r\n                queArray.splice(i, 1);\r\n                return callback;\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/**\r\n *\r\n * @param {*} key\r\n * @param {*} vt\r\n */\r\nexport function nextLoop(key: string, vt: any): void {\r\n    deleteQueueItem(currentQueue, key);\r\n    if (waitingQueue.length) {\r\n        currentQueue.push(waitingQueue[0]);\r\n        waitingQueue.splice(0, 1);\r\n        const last = currentQueue[currentQueue.length - 1];\r\n        vt.loopMessage(last);\r\n    }\r\n}","\r\nconst canvas: HTMLCanvasElement = document.createElement('canvas');\r\nconst SIZE: number = 256;\r\ncanvas.width = canvas.height = SIZE;\r\n\r\n\r\nexport function generateImage(key: string, debug: boolean = false): string {\r\n    const ctx = canvas.getContext('2d');\r\n    ctx.clearRect(0, 0, SIZE, SIZE);\r\n    ctx.save();\r\n    if (debug) {\r\n        ctx.fillStyle = 'red';\r\n        ctx.strokeStyle = 'rgba(255,0,0,0.4)';\r\n        ctx.lineWidth = 0.2;\r\n        const text = key || 'tile';\r\n        ctx.font = '18px sans-serif';\r\n        ctx.rect(0, 0, SIZE, SIZE);\r\n        ctx.stroke();\r\n        ctx.fillText(text, 15, SIZE / 2);\r\n    }\r\n    return canvas.toDataURL();\r\n}\r\n\r\n\r\nexport function createCanvas(width: number = 1, height: number = 1): HTMLCanvasElement {\r\n    let canvas;\r\n    if (typeof document === 'undefined') {\r\n        // var Canvas = require('canvas');\r\n        // canvas = new Canvas(width, height);\r\n    } else {\r\n        canvas = document.createElement('canvas');\r\n        if (width) {\r\n            canvas.width = width;\r\n        }\r\n        if (height) {\r\n            canvas.height = height;\r\n        }\r\n    }\r\n    return canvas;\r\n}\r\n","import * as maptalks from 'maptalks';\r\nimport BaseObject from './BaseObject';\r\nimport { ThreeLayer } from './index';\r\nimport { getBaseObjectMaterialType, Queue } from './type';\r\nimport { generateImage } from './util/CanvasUtil';\r\n\r\n/**\r\n *\r\n */\r\nclass BaseVectorTileLayer extends maptalks.TileLayer {\r\n    _opts: any;\r\n    _layer: ThreeLayer;\r\n    material: THREE.Material;\r\n    getMaterial: getBaseObjectMaterialType;\r\n    _baseObjectKeys: { [key: string]: Array<BaseObject> };\r\n    _loadTiles: { [key: string]: any };\r\n    _add: boolean;\r\n    _layerLaodTime: number;\r\n    intervalId: any;\r\n    constructor(url, options = {}) {\r\n        super(maptalks.Util.GUID(), maptalks.Util.extend({ urlTemplate: url }, options));\r\n        this._opts = null;\r\n        this._layer = null;\r\n        this.material = null;\r\n        this.getMaterial = null;\r\n        this._baseObjectKeys = {};\r\n        this._loadTiles = {};\r\n        this._add = null;\r\n        this._layerLaodTime = new Date().getTime();\r\n    }\r\n\r\n\r\n    isAsynchronous(): boolean {\r\n        return this._opts.worker;\r\n    }\r\n\r\n\r\n    /**\r\n     *get current all baseobject\r\n     */\r\n    getBaseObjects(): BaseObject[] {\r\n        const loadTiles = this._loadTiles;\r\n        const baseos = [];\r\n        for (let key in loadTiles) {\r\n            const baseobjects = this._baseObjectKeys[key];\r\n            if (baseobjects && Array.isArray(baseobjects) && baseobjects.length) {\r\n                for (let i = 0, len = baseobjects.length; i < len; i++) {\r\n                    baseos.push(baseobjects[i]);\r\n                }\r\n            }\r\n        }\r\n        return baseos;\r\n    }\r\n\r\n    /**\r\n   * This method should be overridden for event handling\r\n   * @param {*} type\r\n   * @param {*} e\r\n   */\r\n    // eslint-disable-next-line no-unused-vars\r\n    onSelectMesh(type: string, e: any): void {\r\n\r\n    }\r\n\r\n\r\n    /**\r\n   * this is can override\r\n   * @param {*} index\r\n   * @param {*} json\r\n   */\r\n    // eslint-disable-next-line no-unused-vars\r\n    formatBaseObjects(index: string, json: any): BaseObject[] {\r\n        return [];\r\n    }\r\n\r\n    //queue loop\r\n    // eslint-disable-next-line no-unused-vars\r\n    loopMessage(q: Queue): void {\r\n\r\n    }\r\n\r\n\r\n    /**\r\n    *\r\n    * @param {*} q\r\n    */\r\n    getTileData(q: Queue): void {\r\n        const { key, url, callback, img } = q;\r\n        maptalks.Ajax.getJSON(url, {}, function (error, res) {\r\n            if (error) {\r\n                console.error(error);\r\n                callback(key, null, img);\r\n            } else {\r\n                callback(key, res, img);\r\n            }\r\n        });\r\n    }\r\n\r\n    _getCurentTileKeys() {\r\n        const tileGrids = this.getTiles().tileGrids || [];\r\n        const keys: Array<string> = [], keysMap: { [key: string]: boolean } = {};\r\n        for (let i = 0, len = tileGrids.length; i < len; i++) {\r\n            const d = tileGrids[i];\r\n            const tiles = d.tiles || [];\r\n            for (let j = 0, len1 = tiles.length; j < len1; j++) {\r\n                const { id } = tiles[j];\r\n                keys.push(id);\r\n                keysMap[id] = true;\r\n            }\r\n\r\n        }\r\n        return { keys, keysMap };\r\n    }\r\n\r\n\r\n    _isLoad(): boolean {\r\n        const { keys } = this._getCurentTileKeys();\r\n        const keys1 = Object.keys(this._renderer.tilesInView);\r\n        if (keys.length === keys1.length) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    _layerOnLoad(): void {\r\n        // This event will be triggered multiple times per unit time\r\n        const time = new Date().getTime();\r\n        const offsetTime = time - this._layerLaodTime;\r\n        if (offsetTime < 20) {\r\n            return;\r\n        }\r\n        this._layerLaodTime = time;\r\n        const tilesInView = this._renderer.tilesInView, loadTiles = this._loadTiles, threeLayer = this._layer, keys = this._baseObjectKeys;\r\n        const tilesInViewLen = Object.keys(tilesInView).length, loadTilesLen = Object.keys(loadTiles).length;\r\n        const needsRemoveBaseObjects: BaseObject[] = [];\r\n        if (tilesInViewLen && loadTilesLen) {\r\n            for (let index in loadTiles) {\r\n                if (!tilesInView[index]) {\r\n                    if (keys[index]) {\r\n                        (keys[index] || []).forEach(baseobject => {\r\n                            needsRemoveBaseObjects.push(baseobject);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (needsRemoveBaseObjects.length) {\r\n            threeLayer.removeMesh(needsRemoveBaseObjects, false);\r\n        }\r\n        if (tilesInViewLen && loadTilesLen) {\r\n            for (let index in tilesInView) {\r\n                if (!loadTiles[index]) {\r\n                    if (keys[index]) {\r\n                        const baseobject = keys[index];\r\n                        threeLayer.addMesh(baseobject);\r\n                    } else {\r\n                        const { x, y, z } = this._getXYZOfIndex(index);\r\n                        this.getTileUrl(x, y, z);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this._loadTiles = Object.assign({}, tilesInView);\r\n        this._diffCache();\r\n    }\r\n\r\n\r\n    _init(): void {\r\n\r\n    }\r\n\r\n\r\n    _workerLoad(e: any) {\r\n        const baseobject = e.target;\r\n        const img = baseobject._img;\r\n        img.currentCount++;\r\n        if (img.currentCount === img.needCount) {\r\n            img.src = generateImage(img._key, this._opts.debug);\r\n        }\r\n    }\r\n\r\n\r\n    _generateBaseObjects(index: string, res: any, img: any) {\r\n        if (res && img) {\r\n            const { keysMap } = this._getCurentTileKeys();\r\n            //not in current ,ignore\r\n            if (!keysMap[index]) {\r\n                img.src = generateImage(index, this._opts.debug);\r\n                return;\r\n            }\r\n            const baseobjects = this.formatBaseObjects(index, res);\r\n            if (baseobjects.length) {\r\n                img.needCount = baseobjects.length;\r\n                img.currentCount = 0;\r\n                for (let i = 0, len = baseobjects.length; i < len; i++) {\r\n                    const baseobject = baseobjects[i];\r\n                    baseobject._img = img;\r\n                    baseobject._vt = this;\r\n                    if (!this.isVisible()) {\r\n                        baseobject.hide();\r\n                    }\r\n                    this._cachetile(index, baseobject);\r\n                    if (!baseobject.isAsynchronous()) {\r\n                        img.currentCount++;\r\n                    }\r\n                }\r\n\r\n                this._layer.addMesh(baseobjects, false);\r\n                if (img.needCount === img.currentCount) {\r\n                    img.src = generateImage(index, this._opts.debug);\r\n                }\r\n                if (this.isAsynchronous()) {\r\n                    baseobjects.filter(baseobject => {\r\n                        return baseobject.isAsynchronous();\r\n                    }).forEach(baseobject => {\r\n                        baseobject.on('workerload', this._workerLoad, this);\r\n                    });\r\n                } else {\r\n                    img.src = generateImage(index, this._opts.debug);\r\n                }\r\n            } else {\r\n                img.src = generateImage(index, this._opts.debug);\r\n            }\r\n            this._loadTiles[index] = true;\r\n        } else if (img) {\r\n            img.src = generateImage(index, this._opts.debug);\r\n        }\r\n    }\r\n\r\n    _diffCache(): void {\r\n        // if (this._layer.getMap().isInteracting()) {\r\n        //     return;\r\n        // }\r\n        if (Object.keys(this._baseObjectKeys).length > this._renderer.tileCache.max) {\r\n            const tileCache = this._renderer.tileCache.data;\r\n            const tilesInView = this._renderer.tilesInView;\r\n            const needsRemoveBaseObjects: BaseObject[] = [];\r\n            for (let index in this._baseObjectKeys) {\r\n                if (!tileCache[index] && !tilesInView[index]) {\r\n                    (this._baseObjectKeys[index] || []).forEach(baseobject => {\r\n                        if (baseobject.isAdd) {\r\n                            needsRemoveBaseObjects.push(baseobject);\r\n                        }\r\n                    });\r\n                    this._diposeBaseObject(index);\r\n                    delete this._baseObjectKeys[index];\r\n                }\r\n            }\r\n            // Batch deletion can have better performance\r\n            if (needsRemoveBaseObjects.length) {\r\n                this._layer.removeMesh(needsRemoveBaseObjects, false);\r\n            }\r\n        }\r\n    }\r\n\r\n    _diposeBaseObject(index: string): void {\r\n        const baseobjects = this._baseObjectKeys[index];\r\n        if (baseobjects && baseobjects.length) {\r\n            baseobjects.forEach(baseobject => {\r\n                (baseobject.getObject3d() as any).geometry.dispose();\r\n                if (baseobject._geometryCache) {\r\n                    baseobject._geometryCache.dispose();\r\n                }\r\n                const bos = baseobject._baseObjects;\r\n                if (bos && bos.length) {\r\n                    bos.forEach(bo => {\r\n                        (bo.getObject3d() as any).geometry.dispose();\r\n                        bo = null;\r\n                    });\r\n                }\r\n                baseobject._datas = null;\r\n                baseobject._geometriesAttributes = null;\r\n                baseobject._faceMap = null;\r\n                baseobject._colorMap = null;\r\n                if (baseobject.pickObject3d) {\r\n                    (baseobject.pickObject3d as any).geometry.dispose();\r\n                    // baseobject.pickObject3d.material.dispose();\r\n                }\r\n                baseobject = null;\r\n            });\r\n        }\r\n    }\r\n\r\n    _cachetile(index: string, baseobject: BaseObject): void {\r\n        if (!this._baseObjectKeys[index]) {\r\n            this._baseObjectKeys[index] = [];\r\n        }\r\n        this._baseObjectKeys[index].push(baseobject);\r\n\r\n    }\r\n\r\n    _getXYZOfIndex(index: string) {\r\n        const splitstr = index.indexOf('_') > -1 ? '_' : '-';\r\n        let [y, x, z] = index.split(splitstr).slice(1, 4);\r\n        const x1 = parseInt(x);\r\n        const y1 = parseInt(y);\r\n        const z1 = parseInt(z);\r\n        return { x: x1, y: y1, z: z1 };\r\n    }\r\n\r\n\r\n    _getTileExtent(x: number, y: number, z: number): maptalks.Extent {\r\n        const map = this.getMap(),\r\n            res = map._getResolution(z),\r\n            tileConfig = this._getTileConfig(),\r\n            tileExtent = tileConfig.getTilePrjExtent(x, y, res);\r\n        return tileExtent;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {} x\r\n     * @param {*} y\r\n     * @param {*} z\r\n     */\r\n    _getTileLngLatExtent(x: number, y: number, z: number): maptalks.Extent {\r\n        const tileExtent = this._getTileExtent(x, y, z);\r\n        let max = tileExtent.getMax(),\r\n            min = tileExtent.getMin();\r\n        const map = this.getMap();\r\n        const projection = map.getProjection();\r\n        min = projection.unproject(min);\r\n        max = projection.unproject(max);\r\n        return new maptalks.Extent(min, max);\r\n    }\r\n}\r\n\r\nexport default BaseVectorTileLayer;\r\n\r\n","import * as maptalks from 'maptalks';\r\nimport * as THREE from 'three';\r\nimport { pushQueue, outQueue, getQueues, nextLoop } from './queue/TileDataQueue';\r\nimport { isGeoJSONPolygon, isGeoJSONLine, spliteGeoJSONMulti, isGeoJSONPoint, getGeoJSONCoordinates } from './util/GeoJSONUtil';\r\nimport BaseVectorTileLayer from './BaseVectorTileLayer';\r\nimport { ThreeLayer } from './index';\r\nimport BaseObject from './BaseObject';\r\nimport { Queue } from './type';\r\nimport { getBaseObjectMaterialType } from './type/Material';\r\n\r\nconst OPTIONS = {\r\n    worker: false\r\n};\r\n/**\r\n *Provide a simple data loading layer with large amount of data\r\n */\r\nclass ThreeVectorTileLayer extends BaseVectorTileLayer {\r\n    constructor(url: string, options: any = {}, getMaterial: getBaseObjectMaterialType, layer: ThreeLayer) {\r\n        super(maptalks.Util.GUID(), maptalks.Util.extend({ urlTemplate: url }, OPTIONS, options));\r\n        this._opts = options;\r\n        this._layer = layer;\r\n        this.getMaterial = getMaterial;\r\n        this._baseObjectKeys = {};\r\n        this._loadTiles = {};\r\n        this._add = null;\r\n        this._layerLaodTime = new Date().getTime();\r\n        this._init();\r\n    }\r\n\r\n    /**\r\n     * this is can override\r\n     * @param {*} index\r\n     * @param {*} json\r\n     */\r\n    formatBaseObjects(index: string, json: any): BaseObject[] {\r\n        const opts = this._opts, baseobjects: BaseObject[] = [];\r\n        const asynchronous = this.isAsynchronous();\r\n        for (let layerName in json) {\r\n            const geojson = json[layerName] || {};\r\n            let features;\r\n            if (Array.isArray(geojson)) {\r\n                features = geojson;\r\n            } else if (geojson.type === 'FeatureCollection') {\r\n                features = geojson.features;\r\n            }\r\n            if (features && features.length) {\r\n                const polygons = [], lineStrings = [], points = [];\r\n                for (let i = 0, len = features.length; i < len; i++) {\r\n                    const feature = features[i];\r\n                    if (isGeoJSONPolygon(feature)) {\r\n                        polygons.push(feature);\r\n                    } else if (isGeoJSONLine(feature)) {\r\n                        const fs = spliteGeoJSONMulti(feature);\r\n                        for (let j = 0, len1 = fs.length; j < len1; j++) {\r\n                            lineStrings.push(fs[j]);\r\n                        }\r\n                    } else if (isGeoJSONPoint(feature)) {\r\n                        const fs = spliteGeoJSONMulti(feature);\r\n                        for (let j = 0, len1 = fs.length; j < len1; j++) {\r\n                            points.push(maptalks.Util.extend({}, fs[j].properties, fs[j], { coordinate: getGeoJSONCoordinates(fs[j]) }));\r\n                        }\r\n                    }\r\n                }\r\n                if (polygons.length) {\r\n                    const material = this._getMaterial(layerName, polygons, index, geojson);\r\n                    if (material) {\r\n                        const extrudepolygons = this._layer.toExtrudePolygons(polygons,\r\n                            maptalks.Util.extend({}, { topColor: '#fff', layerName, asynchronous, key: index }, opts), material);\r\n                        baseobjects.push(extrudepolygons);\r\n                    }\r\n                }\r\n\r\n                if (lineStrings.length) {\r\n                    const material = this._getMaterial(layerName, lineStrings, index, geojson);\r\n                    if (material && (material instanceof THREE.LineBasicMaterial || material instanceof THREE.LineDashedMaterial)) {\r\n                        const lines = this._layer.toLines(lineStrings, maptalks.Util.extend({}, { layerName }, opts), material);\r\n                        baseobjects.push(lines);\r\n                    }\r\n                }\r\n                if (points.length) {\r\n                    const material = this._getMaterial(layerName, points, index, geojson);\r\n                    if (material && material instanceof THREE.PointsMaterial) {\r\n                        const ps = this._layer.toPoints(points, maptalks.Util.extend({}, { layerName }, opts), material);\r\n                        baseobjects.push(ps);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return baseobjects;\r\n    }\r\n\r\n    //queue loop\r\n    loopMessage(q: Queue): void {\r\n        const { currentQueue } = getQueues();\r\n        if (currentQueue.length > 0) {\r\n            this.getTileData(q);\r\n        }\r\n    }\r\n\r\n    _init(): void {\r\n        this.on('layerload', this._layerOnLoad);\r\n        this.on('add', () => {\r\n            if (this._add === false) {\r\n                const baseobjects = this.getBaseObjects();\r\n                this._layer.addMesh(baseobjects);\r\n            }\r\n            this._add = true;\r\n            /**\r\n             * layerload have a bug ,Sometimes it doesn't trigger,I don't know why\r\n             * Add heartbeat detection mechanism\r\n             */\r\n            this.intervalId = setInterval(() => {\r\n                if (this._isLoad() && (!this._layer.getMap().isInteracting())) {\r\n                    this.fire('layerload');\r\n                }\r\n            }, 1000);\r\n        });\r\n        this.on('remove', () => {\r\n            this._add = false;\r\n            const baseobjects = this.getBaseObjects();\r\n            this._layer.removeMesh(baseobjects);\r\n            clearInterval(this.intervalId);\r\n        });\r\n        this.on('show', () => {\r\n            const baseobjects = this.getBaseObjects();\r\n            baseobjects.forEach(baseobject => {\r\n                baseobject.show();\r\n            });\r\n            for (let key in this._baseObjectKeys) {\r\n                const baseobjects = this._baseObjectKeys[key] || [];\r\n                baseobjects.forEach(baseobject => {\r\n                    baseobject.show();\r\n                });\r\n            }\r\n        });\r\n        this.on('hide', () => {\r\n            const baseobjects = this.getBaseObjects();\r\n            baseobjects.forEach(baseobject => {\r\n                baseobject.hide();\r\n            });\r\n            for (let key in this._baseObjectKeys) {\r\n                const baseobjects = this._baseObjectKeys[key] || [];\r\n                baseobjects.forEach(baseobject => {\r\n                    baseobject.hide();\r\n                });\r\n            }\r\n        });\r\n        this.on('renderercreate', (e) => {\r\n            e.renderer.loadTile = function loadTile(tile) {\r\n                var tileSize = this.layer.getTileSize();\r\n                var tileImage = new Image();\r\n                tileImage.width = tileSize['width'];\r\n                tileImage.height = tileSize['height'];\r\n                tileImage.onload = this.onTileLoad.bind(this, tileImage, tile);\r\n                tileImage.onerror = this.onTileError.bind(this, tileImage, tile);\r\n                this.loadTileImage(tileImage, tile['url'], tile.id);\r\n                return tileImage;\r\n            };\r\n\r\n            e.renderer.deleteTile = function (tile) {\r\n                if (!tile || !tile.image) {\r\n                    return;\r\n                }\r\n                tile.image.onload = null;\r\n                tile.image.onerror = null;\r\n                const tileinfo = tile.info || {};\r\n                outQueue(tileinfo.id);\r\n            };\r\n\r\n            e.renderer.loadTileImage = (img, url, key) => {\r\n                img._key = key;\r\n                pushQueue(key, url, (index, json, image) => {\r\n                    // img.src = generateImage(key, this._opts.debug);\r\n                    this._generateBaseObjects(index, json, image);\r\n                    nextLoop(index, this);\r\n                }, img, this);\r\n            };\r\n        });\r\n    }\r\n\r\n    _getMaterial(layerName: string, data: any, index: string, geojson: any): THREE.Material {\r\n        if (this.getMaterial && maptalks.Util.isFunction(this.getMaterial)) {\r\n            return this.getMaterial(layerName, data, index, geojson);\r\n        }\r\n        return null;\r\n    }\r\n\r\n}\r\n\r\nexport default ThreeVectorTileLayer;\r\n","import * as THREE from 'three';\r\nimport { addAttribute } from './ThreeAdaptUtil';\r\n\r\nexport function getPlaneGeometryAttribute(width: number, height: number, devideW: number, devideH: number) {\r\n    const dx = width / devideW, dy = height / devideH;\r\n    const minX = -width / 2, maxY = height / 2, minY = -height / 2;\r\n    const len = (devideW + 1) * (devideH + 1);\r\n    const position = new Float32Array(len * 3), uv = new Float32Array(len * 2), normal = new Float32Array(len * 3), tempIndex = new Uint32Array(len * 10);\r\n    let index = 0, uIndex = 0, iIndex = 0;\r\n    for (let j = 0; j <= devideH; j++) {\r\n        for (let i = 0; i <= devideW; i++) {\r\n            const x = minX + dx * i;\r\n            const y = maxY - dy * j;\r\n            position[index] = x;\r\n            position[index + 1] = y;\r\n            position[index + 2] = 0;\r\n\r\n            normal[index] = 0;\r\n            normal[index + 1] = 0;\r\n            normal[index + 2] = 1;\r\n            const uvx = (x - minX) / width, uvy = (y - minY) / height;\r\n            uv[uIndex] = uvx;\r\n            uv[uIndex + 1] = uvy;\r\n\r\n            index += 3;\r\n            uIndex += 2;\r\n            if (i < devideW && j < devideH) {\r\n                const a = j * (devideW + 1) + i, b = a + 1, c = (devideW + 1) * (j + 1) + i, d = c + 1;\r\n                tempIndex[iIndex] = a;\r\n                tempIndex[iIndex + 1] = c;\r\n                tempIndex[iIndex + 2] = b;\r\n                tempIndex[iIndex + 3] = c;\r\n                tempIndex[iIndex + 4] = d;\r\n                tempIndex[iIndex + 5] = b;\r\n                iIndex += 6;\r\n            }\r\n        }\r\n    }\r\n    const indexArray = new Uint32Array(iIndex);\r\n    for (let i = 0, len = indexArray.length; i < len; i++) {\r\n        indexArray[i] = tempIndex[i];\r\n    }\r\n    return {\r\n        position,\r\n        uv,\r\n        normal,\r\n        indexs: indexArray\r\n    };\r\n}\r\n\r\nexport function getPlaneGeometry(width: number, height: number, devideW: number, devideH: number) {\r\n    const { position, uv, normal, indexs } = getPlaneGeometryAttribute(width, height, devideW, devideH);\r\n    const geometry = new THREE.BufferGeometry();\r\n    addAttribute(geometry, 'position', new THREE.BufferAttribute(position, 3))\r\n    addAttribute(geometry, 'normal', new THREE.BufferAttribute(normal, 3))\r\n    addAttribute(geometry, 'uv', new THREE.BufferAttribute(uv, 2))\r\n    geometry.setIndex(new THREE.BufferAttribute(indexs, 1));\r\n    return geometry;\r\n}","import * as maptalks from 'maptalks';\r\nimport { ThreeLayer } from './index';\r\nimport * as THREE from 'three';\r\nimport BaseObject from './BaseObject';\r\nimport { ImageType, TerrainOptionType } from './type';\r\nimport { distanceToVector3 } from './util';\r\nimport { getPlaneGeometry } from './util/GeometryUtil';\r\n// import { addAttribute } from './util/ThreeAdaptUtil';\r\nconst textureLoader = new THREE.TextureLoader();\r\nconst canvas = document.createElement('canvas'), tileSize = 256;\r\n\r\nfunction getRGBData(image: HTMLImageElement, width = tileSize, height = tileSize): Uint8ClampedArray {\r\n    canvas.width = width;\r\n    canvas.height = height;\r\n    const ctx = canvas.getContext('2d');\r\n    ctx.drawImage(image, 0, 0, width, height);\r\n    return ctx.getImageData(0, 0, width, height).data;\r\n}\r\n\r\nfunction generateImage(image: ImageType): HTMLImageElement {\r\n    if (!image) {\r\n        return null;\r\n    }\r\n    let img;\r\n    if (typeof image === 'string') {\r\n        img = new Image();\r\n        img.src = image;\r\n    } else if (image instanceof HTMLCanvasElement) {\r\n        img = new Image();\r\n        img.src = image.toDataURL();\r\n    } else if (image instanceof Image) {\r\n        img = new Image();\r\n        img.src = image.src;\r\n        img.crossOrigin = image.crossOrigin;\r\n    }\r\n    if (img && !img.crossOrigin) {\r\n        img.crossOrigin = 'Anonymous';\r\n    }\r\n    return img;\r\n}\r\n\r\nconst OPTIONS = {\r\n    interactive: false,\r\n    altitude: 0,\r\n    image: null,\r\n    imageWidth: 256,\r\n    imageHeight: 256,\r\n    texture: null\r\n};\r\n\r\n/**\r\n *\r\n */\r\nclass Terrain extends BaseObject {\r\n    constructor(extent: maptalks.Extent, options: TerrainOptionType, material: THREE.Material, layer: ThreeLayer) {\r\n        options = maptalks.Util.extend({}, OPTIONS, options, { layer, extent });\r\n        const { texture, image, altitude, imageHeight, imageWidth } = options;\r\n        if (!image) {\r\n            console.error('not find image');\r\n        }\r\n        if (!(extent instanceof maptalks.Extent)) {\r\n            extent = new maptalks.Extent(extent);\r\n        }\r\n        const { xmin, ymin, xmax, ymax } = extent;\r\n        const coords = [\r\n            [xmin, ymin],\r\n            [xmin, ymax],\r\n            [xmax, ymax],\r\n            [xmax, ymin]\r\n        ];\r\n        let vxmin = Infinity, vymin = Infinity, vxmax = -Infinity, vymax = -Infinity;\r\n        coords.forEach(coord => {\r\n            const v = layer.coordinateToVector3(coord);\r\n            const { x, y } = v;\r\n            vxmin = Math.min(x, vxmin);\r\n            vymin = Math.min(y, vymin);\r\n            vxmax = Math.max(x, vxmax);\r\n            vymax = Math.max(y, vymax);\r\n        });\r\n        const w = Math.abs(vxmax - vxmin), h = Math.abs(vymax - vymin);\r\n        const rgbImg = generateImage(image), img = generateImage(texture);\r\n        // const geometry = new THREE.PlaneBufferGeometry(w, h, imageWidth - 1, imageHeight - 1);\r\n        const geometry = getPlaneGeometry(w, h, imageWidth - 1, imageHeight - 1);\r\n        super();\r\n        this._initOptions(options);\r\n        this._createMesh(geometry, material);\r\n        const z = layer.distanceToVector3(altitude, altitude).x;\r\n        const v = layer.coordinateToVector3(extent.getCenter(), z);\r\n        this.getObject3d().position.copy(v);\r\n        material.transparent = true;\r\n        if (rgbImg) {\r\n            material.opacity = 0;\r\n            rgbImg.onload = () => {\r\n                const width = imageWidth, height = imageHeight;\r\n                const imgdata = getRGBData(rgbImg, width, height);\r\n                let idx = 0;\r\n                const cache = {};\r\n                //rgb to height  https://docs.mapbox.com/help/troubleshooting/access-elevation-data/\r\n                for (let i = 0, len = imgdata.length; i < len; i += 4) {\r\n                    const R = imgdata[i], G = imgdata[i + 1], B = imgdata[i + 2];\r\n                    const height = -10000 + ((R * 256 * 256 + G * 256 + B) * 0.1);\r\n                    const z = distanceToVector3(height, layer, cache);\r\n                    (geometry.attributes.position.array as any)[idx * 3 + 2] = z;\r\n                    idx++;\r\n                }\r\n                geometry.attributes.position.needsUpdate = true;\r\n                if (img) {\r\n                    textureLoader.load(img.src, (texture) => {\r\n                        (material as any).map = texture;\r\n                        material.opacity = 1;\r\n                        material.needsUpdate = true;\r\n                    });\r\n                } else {\r\n                    material.opacity = 1;\r\n                }\r\n            };\r\n            rgbImg.onerror = function () {\r\n                console.error(`not load ${rgbImg.src}`);\r\n            };\r\n        }\r\n        this.type = 'Terrain';\r\n    }\r\n}\r\n\r\nexport default Terrain;\r\n","import * as maptalks from 'maptalks';\r\nimport Terrain from './Terrain';\r\nimport BaseVectorTileLayer from './BaseVectorTileLayer';\r\nimport { ThreeLayer } from './index';\r\nimport BaseObject from './BaseObject';\r\nimport { ImageType, Queue } from './type';\r\n\r\nconst OPTIONS = {\r\n    // worker: false\r\n    scale: 1,\r\n    tileDivisor: 4\r\n};\r\n/**\r\n *\r\n */\r\nclass TerrainVectorTileLayer extends BaseVectorTileLayer {\r\n    _imgQueue: { [key: string]: HTMLImageElement };\r\n    constructor(url: string, options: any = {}, material: THREE.Material, layer: ThreeLayer) {\r\n        super(maptalks.Util.GUID(), maptalks.Util.extend({ urlTemplate: url }, OPTIONS, options));\r\n        this._opts = options;\r\n        this._layer = layer;\r\n        this.material = material;\r\n        this._baseObjectKeys = {};\r\n        this._loadTiles = {};\r\n        this._add = null;\r\n        this._imgQueue = {};\r\n        this._layerLaodTime = new Date().getTime();\r\n        this._init();\r\n    }\r\n\r\n    isAsynchronous(): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * this is can override\r\n     * @param {*} index\r\n     * @param {*} json\r\n     */\r\n    formatBaseObjects(index: string, image: ImageType): BaseObject[] {\r\n        const opts = this.options, baseobjects: BaseObject[] = [];\r\n        const { scale, tileDivisor } = opts;\r\n        const { x, y, z } = this._getXYZOfIndex(index);\r\n        const zoom = this.getMap().getZoom();\r\n        const texture = this.getTileUrl(x, y, z);\r\n        const [imageWidth, imageHeight] = this.options.tileSize;\r\n\r\n        const extent = this._getTileLngLatExtent(x, y, z);\r\n        const material = this.material.clone();\r\n        if ((z + 1) >= Math.round(zoom)) {\r\n            const terrain = new Terrain(extent, {\r\n                image,\r\n                imageWidth: imageWidth / tileDivisor,\r\n                imageHeight: imageHeight / tileDivisor,\r\n                texture\r\n            }, material, this._layer);\r\n            terrain.getObject3d().scale.set(scale, scale, 1);\r\n            baseobjects.push(terrain);\r\n        }\r\n        return baseobjects;\r\n    }\r\n\r\n    //queue loop\r\n    loopMessage(q: Queue): void {\r\n        this.getTileData(q);\r\n    }\r\n\r\n\r\n    _init() {\r\n        this.on('layerload', this._layerOnLoad);\r\n        this.on('add', () => {\r\n            if (this._add === false) {\r\n                const baseobjects = this.getBaseObjects();\r\n                this._layer.addMesh(baseobjects);\r\n            }\r\n            this._add = true;\r\n            /**\r\n             * layerload have a bug ,Sometimes it doesn't trigger,I don't know why\r\n             * Add heartbeat detection mechanism\r\n             */\r\n            this.intervalId = setInterval(() => {\r\n                if (this._isLoad() && (!this._layer.getMap().isInteracting())) {\r\n                    this.fire('layerload');\r\n                }\r\n            }, 1000);\r\n        });\r\n        this.on('remove', () => {\r\n            this._add = false;\r\n            const baseobjects = this.getBaseObjects();\r\n            this._layer.removeMesh(baseobjects);\r\n            clearInterval(this.intervalId);\r\n        });\r\n        this.on('show', () => {\r\n            const baseobjects = this.getBaseObjects();\r\n            baseobjects.forEach(baseobject => {\r\n                baseobject.show();\r\n            });\r\n            for (let key in this._baseObjectKeys) {\r\n                const baseobjects = this._baseObjectKeys[key] || [];\r\n                baseobjects.forEach(baseobject => {\r\n                    baseobject.show();\r\n                });\r\n            }\r\n        });\r\n        this.on('hide', () => {\r\n            const baseobjects = this.getBaseObjects();\r\n            baseobjects.forEach(baseobject => {\r\n                baseobject.hide();\r\n            });\r\n            for (let key in this._baseObjectKeys) {\r\n                const baseobjects = this._baseObjectKeys[key] || [];\r\n                baseobjects.forEach(baseobject => {\r\n                    baseobject.hide();\r\n                });\r\n            }\r\n        });\r\n        this.on('renderercreate', (e) => {\r\n            e.renderer.loadTile = function loadTile(tile) {\r\n                var tileSize = this.layer.getTileSize();\r\n                var tileImage = new Image();\r\n                tileImage.width = tileSize['width'];\r\n                tileImage.height = tileSize['height'];\r\n                tileImage.onload = this.onTileLoad.bind(this, tileImage, tile);\r\n                tileImage.onerror = this.onTileError.bind(this, tileImage, tile);\r\n                this.loadTileImage(tileImage, tile['url'], tile.id);\r\n                return tileImage;\r\n            };\r\n\r\n            e.renderer.deleteTile = (tile) => {\r\n                if (!tile || !tile.image) {\r\n                    return;\r\n                }\r\n                tile.image.onload = null;\r\n                tile.image.onerror = null;\r\n                const tileinfo = tile.info || {};\r\n                const rgbImage = this._imgQueue[tileinfo.id];\r\n                if (rgbImage) {\r\n                    rgbImage.src = '';\r\n                    rgbImage.onload = null;\r\n                    rgbImage.onerror = null;\r\n                    delete this._imgQueue[tileinfo.id];\r\n                }\r\n            };\r\n            e.renderer.loadTileImage = (img, url, key) => {\r\n                img._key = key;\r\n                const rgbImage = new Image();\r\n                this._imgQueue[key] = rgbImage;\r\n                const q = {\r\n                    key,\r\n                    url,\r\n                    rgbImage,\r\n                    callback: (index, rgbImage, image) => {\r\n                        this._generateBaseObjects(index, rgbImage, image);\r\n                    },\r\n                    img,\r\n                    vt: this\r\n                };\r\n                this.loopMessage(q);\r\n            };\r\n        });\r\n    }\r\n}\r\n\r\nexport default TerrainVectorTileLayer;\r\n","/*!\r\n * Code from baidu mapv\r\n * License: BSD-3\r\n * https://github.com/huiyan-fe/mapv\r\n *\r\n */\r\n\r\n\r\n/* eslint-disable no-trailing-spaces */\r\n\r\n/**\r\n * https://github.com/huiyan-fe/mapv/blob/master/src/utils/data-range/Intensity.js\r\n * @author kyle / http://nikai.us/\r\n */\r\nimport { createCanvas } from './../CanvasUtil';\r\n\r\n/**\r\n * Category\r\n * @param {Object} [options]   Available options:\r\n *                             {Object} gradient: { 0.25: \"rgb(0,0,255)\", 0.55: \"rgb(0,255,0)\", 0.85: \"yellow\", 1.0: \"rgb(255,0,0)\"}\r\n */\r\nfunction Intensity(options) {\r\n\r\n    options = options || {};\r\n    this.gradient = options.gradient || {\r\n        0.25: 'rgba(0, 0, 255, 1)',\r\n        0.55: 'rgba(0, 255, 0, 1)',\r\n        0.85: 'rgba(255, 255, 0, 1)',\r\n        1.0: 'rgba(255, 0, 0, 1)'\r\n    };\r\n    this.maxSize = options.maxSize || 35;\r\n    this.minSize = options.minSize || 0;\r\n    this.max = options.max || 100;\r\n    this.min = options.min || 0;\r\n    this.initPalette();\r\n}\r\n\r\nIntensity.prototype.setMax = function (value) {\r\n    this.max = value || 100;\r\n};\r\n\r\nIntensity.prototype.setMin = function (value) {\r\n    this.min = value || 0;\r\n};\r\n\r\nIntensity.prototype.setMaxSize = function (maxSize) {\r\n    this.maxSize = maxSize || 35;\r\n};\r\n\r\nIntensity.prototype.setMinSize = function (minSize) {\r\n    this.minSize = minSize || 0;\r\n};\r\n\r\nIntensity.prototype.initPalette = function () {\r\n\r\n    var gradient = this.gradient;\r\n\r\n    var canvas = createCanvas(256, 1);\r\n\r\n    var paletteCtx = this.paletteCtx = canvas.getContext('2d');\r\n\r\n    var lineGradient = paletteCtx.createLinearGradient(0, 0, 256, 1);\r\n\r\n    for (var key in gradient) {\r\n        lineGradient.addColorStop(parseFloat(key), gradient[key]);\r\n    }\r\n\r\n    paletteCtx.fillStyle = lineGradient;\r\n    paletteCtx.fillRect(0, 0, 256, 1);\r\n\r\n};\r\n\r\nIntensity.prototype.getColor = function (value) {\r\n\r\n    var imageData = this.getImageData(value);\r\n\r\n    return 'rgba(' + imageData[0] + ', ' + imageData[1] + ', ' + imageData[2] + ', ' + imageData[3] / 256 + ')';\r\n\r\n};\r\n\r\nIntensity.prototype.getImageData = function (value) {\r\n\r\n    var imageData = this.paletteCtx.getImageData(0, 0, 256, 1).data;\r\n\r\n    if (value === undefined) {\r\n        return imageData;\r\n    }\r\n\r\n    var max = this.max;\r\n    var min = this.min;\r\n\r\n    if (value > max) {\r\n        value = max;\r\n    }\r\n\r\n    if (value < min) {\r\n        value = min;\r\n    }\r\n\r\n    var index = Math.floor((value - min) / (max - min) * (256 - 1)) * 4;\r\n\r\n    return [imageData[index], imageData[index + 1], imageData[index + 2], imageData[index + 3]];\r\n};\r\n\r\n/**\r\n * @param Number value \r\n * @param Number max of value\r\n * @param Number max of size\r\n * @param Object other options\r\n */\r\nIntensity.prototype.getSize = function (value) {\r\n\r\n    var size = 0;\r\n    var max = this.max;\r\n    var min = this.min;\r\n    var maxSize = this.maxSize;\r\n    var minSize = this.minSize;\r\n\r\n    if (value > max) {\r\n        value = max;\r\n    }\r\n\r\n    if (value < min) {\r\n        value = min;\r\n    }\r\n\r\n    if (max > min) {\r\n        size = minSize + (value - min) / (max - min) * (maxSize - minSize);\r\n    } else {\r\n        return maxSize;\r\n    }\r\n\r\n    return size;\r\n\r\n};\r\n\r\nIntensity.prototype.getLegend = function (options) {\r\n    var gradient = this.gradient;\r\n\r\n\r\n    var width = options.width || 20;\r\n    var height = options.height || 180;\r\n\r\n    var canvas = createCanvas(width, height);\r\n\r\n    var paletteCtx = canvas.getContext('2d');\r\n\r\n    var lineGradient = paletteCtx.createLinearGradient(0, height, 0, 0);\r\n\r\n    for (var key in gradient) {\r\n        lineGradient.addColorStop(parseFloat(key), gradient[key]);\r\n    }\r\n\r\n    paletteCtx.fillStyle = lineGradient;\r\n    paletteCtx.fillRect(0, 0, width, height);\r\n\r\n    return canvas;\r\n};\r\n\r\n\r\nexport default Intensity;\r\n","/*!\r\n * Code from baidu mapv\r\n * License: BSD-3\r\n * https://github.com/huiyan-fe/mapv\r\n *\r\n */\r\n\r\n/**\r\n * https://github.com/huiyan-fe/mapv/blob/master/src/canvas/draw/heatmap.js\r\n */\r\nimport { createCanvas } from './../CanvasUtil';\r\nimport Intensity from './Intensity';\r\n\r\nfunction createCircle(size) {\r\n    var shadowBlur = size / 2;\r\n    var r2 = size + shadowBlur;\r\n    var offsetDistance = 10000;\r\n\r\n    var circle = createCanvas(r2 * 2, r2 * 2);\r\n    var context = circle.getContext('2d');\r\n\r\n    context.shadowBlur = shadowBlur;\r\n    context.shadowColor = 'black';\r\n    context.shadowOffsetX = context.shadowOffsetY = offsetDistance;\r\n\r\n    context.beginPath();\r\n    context.arc(r2 - offsetDistance, r2 - offsetDistance, size, 0, Math.PI * 2, true);\r\n    context.closePath();\r\n    context.fill();\r\n    return circle;\r\n}\r\n\r\nfunction colorize(pixels, gradient, options) {\r\n    var max = getMax(options);\r\n    var min = getMin(options);\r\n    var diff = max - min;\r\n    var range = options.range || null;\r\n\r\n    var jMin = 0;\r\n    var jMax = 1024;\r\n    if (range && range.length === 2) {\r\n        jMin = (range[0] - min) / diff * 1024;\r\n    }\r\n\r\n    if (range && range.length === 2) {\r\n        jMax = (range[1] - min) / diff * 1024;\r\n    }\r\n\r\n    var maxOpacity = options.maxOpacity || 0.8;\r\n    var minOpacity = options.minOpacity || 0;\r\n    // var range = options.range;\r\n\r\n    for (var i = 3, len = pixels.length, j; i < len; i += 4) {\r\n        j = pixels[i] * 4; // get gradient color from opacity value\r\n\r\n        if (pixels[i] / 256 > maxOpacity) {\r\n            pixels[i] = 256 * maxOpacity;\r\n        }\r\n        if (pixels[i] / 256 < minOpacity) {\r\n            pixels[i] = 256 * minOpacity;\r\n        }\r\n\r\n        if (j && j >= jMin && j <= jMax) {\r\n            pixels[i - 3] = gradient[j];\r\n            pixels[i - 2] = gradient[j + 1];\r\n            pixels[i - 1] = gradient[j + 2];\r\n        } else {\r\n            pixels[i] = 0;\r\n        }\r\n    }\r\n}\r\n\r\nfunction getMax(options) {\r\n    var max = options.max || 100;\r\n    return max;\r\n}\r\n\r\nfunction getMin(options) {\r\n    var min = options.min || 0;\r\n    return min;\r\n}\r\n\r\nfunction drawGray(context, dataSet, options) {\r\n\r\n    var max = getMax(options);\r\n    // var min = getMin(options);\r\n    // console.log(max)\r\n    var size = options._size || options.size || 13;\r\n\r\n    var circle = createCircle(size);\r\n    var circleHalfWidth = circle.width / 2;\r\n    var circleHalfHeight = circle.height / 2;\r\n\r\n    var data = dataSet;\r\n\r\n    var dataOrderByAlpha = {};\r\n\r\n    data.forEach(function (item) {\r\n        var count = item.count === undefined ? 1 : item.count;\r\n        var alpha = Math.min(1, count / max).toFixed(2);\r\n        dataOrderByAlpha[alpha] = dataOrderByAlpha[alpha] || [];\r\n        dataOrderByAlpha[alpha].push(item);\r\n    });\r\n\r\n    for (var i in dataOrderByAlpha) {\r\n        if (isNaN(i as any)) continue;\r\n        var _data = dataOrderByAlpha[i];\r\n        context.beginPath();\r\n        if (!options.withoutAlpha) {\r\n            context.globalAlpha = i;\r\n        }\r\n        // context.strokeStyle = intensity.getColor(i * max);\r\n        _data.forEach(function (item) {\r\n            var coordinates = item.coordinate;\r\n            var count = item.count === undefined ? 1 : item.count;\r\n            context.globalAlpha = count / max;\r\n            context.drawImage(circle, coordinates[0] - circleHalfWidth, coordinates[1] - circleHalfHeight);\r\n        });\r\n\r\n    }\r\n}\r\n\r\nfunction draw(context, data, options) {\r\n    if (context.canvas.width <= 0 || context.canvas.height <= 0) {\r\n        return;\r\n    }\r\n\r\n    var strength = options.strength || 0.3;\r\n    context.strokeStyle = 'rgba(0,0,0,' + strength + ')';\r\n\r\n    // var shadowCanvas = new Canvas(context.canvas.width, context.canvas.height);\r\n    var shadowCanvas = createCanvas(context.canvas.width, context.canvas.height);\r\n    var shadowContext = shadowCanvas.getContext('2d');\r\n    shadowContext.scale(devicePixelRatio, devicePixelRatio);\r\n\r\n    options = options || {};\r\n\r\n    // var data = dataSet instanceof DataSet ? dataSet.get() : dataSet;\r\n\r\n    context.save();\r\n\r\n    var intensity = new Intensity({\r\n        gradient: options.gradient\r\n    });\r\n\r\n    drawGray(shadowContext, data, options);\r\n    // return false;\r\n    if (!options.absolute) {\r\n        var colored = shadowContext.getImageData(0, 0, context.canvas.width, context.canvas.height);\r\n        colorize(colored.data, intensity.getImageData(), options);\r\n        context.putImageData(colored, 0, 0);\r\n\r\n        context.restore();\r\n    }\r\n\r\n    intensity = null;\r\n    shadowCanvas = null;\r\n}\r\n\r\nexport default {\r\n    draw,\r\n    drawGray,\r\n    colorize\r\n};\r\n","import * as maptalks from 'maptalks';\r\nimport * as THREE from 'three';\r\nimport BaseObject from './BaseObject';\r\nimport HeatMapUitl from './util/heatmap/HeatMapUtil';\r\nimport { createCanvas } from './util/CanvasUtil';\r\nimport Intensity from './util/heatmap/Intensity';\r\nimport { addAttribute, getVertexColors } from './util/ThreeAdaptUtil';\r\nimport { HeatMapDataType, HeatMapOptionType } from './type';\r\nimport { ThreeLayer } from './index';\r\nimport { getPlaneGeometry } from './util/GeometryUtil';\r\n\r\nconst OPTIONS = {\r\n    altitude: 0,\r\n    interactive: false,\r\n    min: 0,\r\n    max: 100,\r\n    size: 13,\r\n    gradient: { 0.25: 'rgb(0,0,255)', 0.55: 'rgb(0,255,0)', 0.85: 'yellow', 1.0: 'rgb(255,0,0)' },\r\n    gridScale: 0.5\r\n};\r\n\r\nconst CANVAS_MAX_SIZE = 2048;\r\n\r\n/**\r\n *\r\n */\r\nclass HeatMap extends BaseObject {\r\n    constructor(data: Array<HeatMapDataType>, options: HeatMapOptionType, material: THREE.Material, layer: ThreeLayer) {\r\n        if (!Array.isArray(data)) {\r\n            data = [data];\r\n        }\r\n        let minX = Infinity, minY = Infinity, maxX = -Infinity, maxY = -Infinity;\r\n        const vs = [];\r\n        //Calculate bbox\r\n        for (let i = 0, len = data.length; i < len; i++) {\r\n            const { coordinate, lnglat, xy } = data[i];\r\n            const coord = coordinate || lnglat || xy;\r\n            if (!coord) {\r\n                console.warn('not find coordinate');\r\n                continue;\r\n            }\r\n            const v = layer.coordinateToVector3(coord);\r\n            vs.push(v);\r\n            const { x, y } = v;\r\n            minX = Math.min(minX, x);\r\n            minY = Math.min(minY, y);\r\n            maxX = Math.max(maxX, x);\r\n            maxY = Math.max(maxY, y);\r\n        }\r\n        options = maptalks.Util.extend({}, OPTIONS, options, { layer, points: data });\r\n\r\n        // Calculate canvas width and height\r\n        let { gridScale, altitude } = options;\r\n        const offsetX = Math.abs(maxX - minX), offsetY = Math.abs(maxY - minY);\r\n        const maxOffset = Math.max((offsetX * gridScale), (offsetY * gridScale));\r\n        if (maxOffset > CANVAS_MAX_SIZE) {\r\n            console.warn(`gridScale: ${gridScale} it's too big. I hope it's a smaller value,canvas max size is ${CANVAS_MAX_SIZE}* ${CANVAS_MAX_SIZE}`);\r\n            const offset = maxOffset / gridScale;\r\n            gridScale = CANVAS_MAX_SIZE / offset;\r\n        }\r\n        const canvasWidth = Math.ceil(offsetX * gridScale), canvasHeight = Math.ceil(offsetY * gridScale);\r\n        const scaleX = canvasWidth / offsetX, scaleY = canvasHeight / offsetY;\r\n        const pixels = [];\r\n        for (let i = 0, len = vs.length; i < len; i++) {\r\n            const v = vs[i];\r\n            v.x -= minX;\r\n            v.y -= minY;\r\n            v.x *= scaleX;\r\n            v.y *= scaleY;\r\n            v.y = canvasHeight - v.y;\r\n            //for heat draw data\r\n            pixels.push({\r\n                coordinate: [v.x, v.y],\r\n                count: data[i].count\r\n            });\r\n        }\r\n        let shadowCanvas = createCanvas(canvasWidth, canvasHeight);\r\n        let shadowContext = shadowCanvas.getContext('2d');\r\n        // shadowContext.scale(devicePixelRatio, devicePixelRatio);\r\n        HeatMapUitl.drawGray(shadowContext, pixels, options);\r\n        const colored = shadowContext.getImageData(0, 0, shadowContext.canvas.width, shadowContext.canvas.height);\r\n\r\n        let maxAlpha = -Infinity;\r\n        const blackps = new Float32Array(colored.data.length / 4), alphas = new Float32Array(colored.data.length / 4);\r\n        for (let i = 3, len = colored.data.length, j = 0; i < len; i += 4) {\r\n            const alpha = colored.data[i];\r\n            maxAlpha = Math.max(maxAlpha, alpha);\r\n            alphas[j] = alpha;\r\n            //Points that do not need to be drawn\r\n            if (alpha <= 0) {\r\n                blackps[j] = 1;\r\n            }\r\n            j++;\r\n        }\r\n        const intensity = new Intensity({\r\n            gradient: options.gradient\r\n        });\r\n        HeatMapUitl.colorize(colored.data, intensity.getImageData(), options);\r\n        shadowCanvas = null;\r\n        shadowContext = null;\r\n\r\n        // const geometry = new THREE.PlaneBufferGeometry(offsetX, offsetY, canvasWidth - 1, canvasHeight - 1);\r\n        const geometry = getPlaneGeometry(offsetX, offsetY, canvasWidth - 1, canvasHeight - 1);\r\n        const index = geometry.getIndex().array;\r\n        const position = geometry.attributes.position.array as any;\r\n        // Index of the points that really need to be drawn\r\n        const colors = new Float32Array(position.length);\r\n        const tempIndex = new Uint32Array(position.length * 6);\r\n        const color = new THREE.Color();\r\n        let iIndex = 0;\r\n        for (let i = 0, len = position.length, j = 0, len1 = index.length, m = 0, len2 = colored.data.length, n = 0; i < Math.max(len, len1, len2); i += 3) {\r\n            if (i < len) {\r\n                const alpha = alphas[n];\r\n                if (alpha > 0) {\r\n                    position[i + 2] = alpha / maxAlpha;\r\n                }\r\n            }\r\n            if (j < len1) {\r\n                const a = index[j], b = index[j + 1], c = index[j + 2];\r\n                if ((!blackps[a]) || (!blackps[b]) || (!blackps[c])) {\r\n                    tempIndex[iIndex] = a;\r\n                    tempIndex[iIndex + 1] = b;\r\n                    tempIndex[iIndex + 2] = c;\r\n                    iIndex += 3;\r\n                }\r\n            }\r\n            if (m < len2) {\r\n                const r = colored.data[m], g = colored.data[m + 1], b = colored.data[m + 2];// a = colored.data[i + 3];\r\n                const rgb = `rgb(${r},${g},${b})`;\r\n                color.setStyle(rgb);\r\n                colors[j] = color.r;\r\n                colors[j + 1] = color.g;\r\n                colors[j + 2] = color.b;\r\n            }\r\n            j += 3;\r\n            m += 4;\r\n            n++;\r\n        }\r\n        const filterIndex = new Uint32Array(iIndex);\r\n        for (let i = 0; i < iIndex; i++) {\r\n            filterIndex[i] = tempIndex[i];\r\n        }\r\n        geometry.setIndex(new THREE.BufferAttribute(filterIndex, 1));\r\n        addAttribute(geometry, 'color', new THREE.BufferAttribute(colors, 3, true));\r\n        (material as any).vertexColors = getVertexColors();\r\n        super();\r\n        this._initOptions(options);\r\n        this._createMesh(geometry, material);\r\n        const z = layer.distanceToVector3(altitude, altitude).x;\r\n        this.getObject3d().position.copy(new THREE.Vector3((minX + maxX) / 2, (minY + maxY) / 2, z));\r\n        this.type = 'HeatMap';\r\n\r\n    }\r\n}\r\n\r\nexport default HeatMap;\r\n","\r\nimport * as THREE from 'three';\r\nimport * as maptalks from 'maptalks';\r\n\r\nconst color: THREE.Color = new THREE.Color();\r\nlet colorIndex = 1;\r\n/**\r\n *https://github.com/mrdoob/three.js/blob/master/examples/webgl_interactive_cubes_gpu.html\r\n */\r\nclass GPUPick {\r\n    object3ds: THREE.Object3D[];\r\n    layer: any;\r\n    camera: THREE.Camera;\r\n    renderer: THREE.WebGLRenderer;\r\n    pickingTexture: THREE.WebGLRenderTarget;\r\n    pickingScene: THREE.Scene;\r\n\r\n    constructor(layer: any) {\r\n        this.object3ds = [];\r\n        this.layer = layer;\r\n        this.camera = layer.getCamera();\r\n        this.renderer = layer.getThreeRenderer();\r\n        this.pickingTexture = new THREE.WebGLRenderTarget(1, 1);\r\n        this.pickingScene = new THREE.Scene();\r\n    }\r\n\r\n    getColor(): THREE.Color {\r\n        color.setHex(colorIndex);\r\n        colorIndex++;\r\n        return color;\r\n    }\r\n\r\n    add(object3d: THREE.Object3D) {\r\n        if (object3d) {\r\n            const colorIndex = object3d['_colorIndex'];\r\n            if (colorIndex) {\r\n                this.object3ds[colorIndex] = object3d;\r\n                this.pickingScene.add(object3d);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    remove(object3d: THREE.Object3D) {\r\n        if (object3d) {\r\n            const colorIndex = object3d['_colorIndex'];\r\n            if (colorIndex) {\r\n                this.object3ds[colorIndex] = null;\r\n                this.pickingScene.remove(object3d);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    isEmpty(): boolean {\r\n        if (this.pickingScene.children.length === 0) {\r\n            return true;\r\n        }\r\n        for (let i = 0, len = this.pickingScene.children.length; i < len; i++) {\r\n            const mesh = this.pickingScene.children[i];\r\n            if (mesh) {\r\n                const object3d = mesh['__parent'];\r\n                if (object3d && object3d.getOptions().interactive === true) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    pick(pixel: maptalks.Point) {\r\n        if (!pixel) {\r\n            return;\r\n        }\r\n        if (this.isEmpty()) {\r\n            return;\r\n        }\r\n        const { camera, renderer, pickingTexture, pickingScene, object3ds, layer } = this;\r\n        const len = this.pickingScene.children.length;\r\n        // reset all object3d picked\r\n        for (let i = 0; i < len; i++) {\r\n            const object3d = this.pickingScene.children[i];\r\n            if (object3d && object3d['__parent']) {\r\n                object3d['__parent'].picked = false;\r\n            }\r\n        }\r\n        //resize size\r\n        const { width, height } = layer._getRenderer().canvas;\r\n        const pw = pickingTexture.width, ph = pickingTexture.height;\r\n        if (width !== pw || height !== ph) {\r\n            pickingTexture.setSize(width, height);\r\n        }\r\n\r\n        //render the picking scene off-screen\r\n\r\n        // set the view offset to represent just a single pixel under the mouse\r\n\r\n        // camera.setViewOffset(width, height, mouse.x, mouse.y, 1, 1);\r\n\r\n        // render the scene\r\n        renderer.setRenderTarget(pickingTexture);\r\n        renderer.clear();\r\n        renderer.render(pickingScene, camera);\r\n\r\n        // clear the view offset so rendering returns to normal\r\n\r\n        // camera.clearViewOffset();\r\n\r\n        //create buffer for reading single pixel\r\n\r\n        const pixelBuffer = new Uint8Array(4);\r\n\r\n        //read the pixel\r\n        const { x, y } = pixel;\r\n        const devicePixelRatio = window.devicePixelRatio;\r\n        const offsetX = (x * devicePixelRatio), offsetY = (pickingTexture.height - y * devicePixelRatio);\r\n        renderer.readRenderTargetPixels(pickingTexture, Math.round(offsetX), Math.round(offsetY), 1, 1, pixelBuffer);\r\n\r\n        //interpret the pixel as an ID\r\n\r\n\r\n        const id = (pixelBuffer[0] << 16) | (pixelBuffer[1] << 8) | (pixelBuffer[2]);\r\n        const object3d = object3ds[id];\r\n        if (object3d) {\r\n            if (object3d['__parent']) {\r\n                object3ds[id]['__parent'].picked = true;\r\n            }\r\n        } else {\r\n            //for merged mesh\r\n            for (let i = 0; i < len; i++) {\r\n                const object3d = this.pickingScene.children[i];\r\n                if (object3d && object3d['__parent']) {\r\n                    const parent = object3d['__parent'];\r\n                    if (parent._colorMap && parent._colorMap[id] != null) {\r\n                        parent.picked = true;\r\n                        parent.index = parent._colorMap[id];\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        renderer.setRenderTarget(null);\r\n    }\r\n}\r\nexport default GPUPick;\r\n","import * as maptalks from 'maptalks';\r\nimport * as THREE from 'three';\r\nimport BaseObject from './BaseObject';\r\nimport { getLinePosition, LineStringSplit, setLineSegmentPosition } from './util/LineUtil';\r\nimport LineGeometry from './util/fatline/LineGeometry';\r\nimport Line2 from './util/fatline/Line2';\r\nimport LineMaterial from './util/fatline/LineMaterial';\r\nimport { FatLineMaterialType, LineOptionType, LineStringType } from './type';\r\nimport { ThreeLayer } from './index';\r\nimport { getVertexColors } from './util/ThreeAdaptUtil';\r\nimport { setBottomHeight } from './util';\r\n\r\nconst OPTIONS = {\r\n    bottomHeight: 0,\r\n    altitude: 0\r\n};\r\n\r\nclass FatLine extends BaseObject {\r\n    constructor(lineString: LineStringType, options: LineOptionType, material: FatLineMaterialType, layer: ThreeLayer) {\r\n        options = maptalks.Util.extend({}, OPTIONS, options, { layer, lineString });\r\n        super();\r\n        this._initOptions(options);\r\n        const { lineStrings, center } = LineStringSplit(lineString);\r\n        const ps = [], cache = {};\r\n        for (let m = 0, le = lineStrings.length; m < le; m++) {\r\n            const positionsV = getLinePosition(lineStrings[m], layer, center).positionsV;\r\n            setBottomHeight(positionsV, options.bottomHeight, layer, cache);\r\n            setLineSegmentPosition(ps, positionsV);\r\n        }\r\n        const geometry = new LineGeometry();\r\n        geometry.setPositions(ps);\r\n        this._setMaterialRes(layer, material);\r\n        this._createLine2(geometry, material);\r\n        const { altitude } = options;\r\n        const z = layer.distanceToVector3(altitude, altitude).x;\r\n        const v = layer.coordinateToVector3(center, z);\r\n        this.getObject3d().position.copy(v);\r\n        this._setPickObject3d(ps, material.linewidth);\r\n        this._init();\r\n        this.type = 'FatLine';\r\n    }\r\n\r\n    _init() {\r\n        const pick = this.getLayer().getPick();\r\n        this.on('add', () => {\r\n            pick.add(this.pickObject3d);\r\n        });\r\n        this.on('remove', () => {\r\n            pick.remove(this.pickObject3d);\r\n        });\r\n    }\r\n\r\n    _setMaterialRes(layer, material) {\r\n        const map = layer.getMap();\r\n        const size = map.getSize();\r\n        const width = size.width,\r\n            height = size.height;\r\n        material.resolution.set(width, height);\r\n    }\r\n\r\n    _setPickObject3d(ps, linewidth) {\r\n        const geometry = new LineGeometry();\r\n        geometry.setPositions(ps);\r\n        const pick = this.getLayer().getPick();\r\n        const color = pick.getColor();\r\n        const colors = [];\r\n        for (let i = 0, len = ps.length / 3; i < len; i++) {\r\n            colors.push(color.r, color.g, color.b);\r\n        }\r\n        geometry.setColors(colors);\r\n        const material = new LineMaterial({\r\n            color: '#fff',\r\n            // side: THREE.BackSide,\r\n            linewidth,\r\n            vertexColors: getVertexColors()\r\n        });\r\n        this._setMaterialRes(this.getLayer(), material);\r\n        const colorIndex = color.getHex();\r\n        const mesh = new Line2(geometry, material);\r\n        mesh.position.copy(this.getObject3d().position);\r\n        mesh._colorIndex = colorIndex;\r\n        this.setPickObject3d(mesh);\r\n    }\r\n\r\n    // eslint-disable-next-line no-unused-vars\r\n    identify(coordinate) {\r\n        return this.picked;\r\n    }\r\n\r\n    setSymbol(material) {\r\n        if (material && material instanceof THREE.Material) {\r\n            material.needsUpdate = true;\r\n            const size = this.getMap().getSize();\r\n            const width = size.width,\r\n                height = size.height;\r\n            (material as any).resolution.set(width, height);\r\n            (this.getObject3d() as any).material = material;\r\n        }\r\n        return this;\r\n    }\r\n\r\n}\r\nexport default FatLine;\r\n","import * as maptalks from 'maptalks';\r\nimport * as THREE from 'three';\r\nimport BaseObject from './BaseObject';\r\nimport { getLinePosition, LineStringSplit, setLineSegmentPosition } from './util/LineUtil';\r\nimport MergedMixin from './MergedMixin';\r\nimport FatLine from './FatLine';\r\nimport { isGeoJSONLine } from './util/GeoJSONUtil';\r\nimport LineGeometry from './util/fatline/LineGeometry';\r\nimport Line2 from './util/fatline/Line2';\r\nimport LineMaterial from './util/fatline/LineMaterial';\r\nimport { getCenterOfPoints, getGeometriesColorArray, setBottomHeight } from './util';\r\nimport { FatLineMaterialType, LineOptionType, LineStringType } from './type';\r\nimport { ThreeLayer } from './index';\r\nimport { getVertexColors } from './util/ThreeAdaptUtil';\r\n\r\nconst OPTIONS = {\r\n    altitude: 0,\r\n    colors: null\r\n};\r\n\r\n/**\r\n *\r\n */\r\nclass FatLines extends MergedMixin(BaseObject) {\r\n    constructor(lineStrings: Array<LineStringType>, options: LineOptionType, material: FatLineMaterialType, layer: ThreeLayer) {\r\n        if (!Array.isArray(lineStrings)) {\r\n            lineStrings = [lineStrings];\r\n        }\r\n\r\n        const centers = [], lineStringList = [];\r\n        const len = lineStrings.length;\r\n        for (let i = 0; i < len; i++) {\r\n            const lineString = lineStrings[i];\r\n            const result = LineStringSplit(lineString);\r\n            centers.push(result.center);\r\n            lineStringList.push(result.lineStrings);\r\n        }\r\n        // Get the center point of the point set\r\n        const center = getCenterOfPoints(centers);\r\n        options = maptalks.Util.extend({}, OPTIONS, options, { layer, lineStrings, coordinate: center });\r\n\r\n        const lines = [], cache = {};\r\n        let faceIndex = 0, faceMap = [], geometriesAttributes = [],\r\n            psIndex = 0, ps = [];\r\n        //LineSegmentsGeometry\r\n        for (let i = 0; i < len; i++) {\r\n            const lls = lineStringList[i];\r\n            let psCount = 0;\r\n            for (let m = 0, le = lls.length; m < le; m++) {\r\n                const properties = (isGeoJSONLine(lls[m] as any) ? lls[m]['properties'] : (lls[m] as any).getProperties() || {});\r\n                const { positionsV } = getLinePosition(lls[m], layer, center);\r\n                setBottomHeight(positionsV, properties.bottomHeight, layer, cache);\r\n                psCount += (positionsV.length * 2 - 2);\r\n                setLineSegmentPosition(ps, positionsV);\r\n            }\r\n            // const psCount = positionsV.length + positionsV.length - 2;\r\n            const faceLen = psCount;\r\n            faceMap[i] = [faceIndex, faceIndex + faceLen];\r\n            faceIndex += faceLen;\r\n\r\n            geometriesAttributes[i] = {\r\n                position: {\r\n                    count: psCount,\r\n                    start: psIndex,\r\n                    end: psIndex + psCount * 3,\r\n                },\r\n                instanceStart: {\r\n                    count: psCount,\r\n                    start: psIndex,\r\n                    end: psIndex + psCount * 3,\r\n                },\r\n                instanceEnd: {\r\n                    count: psCount,\r\n                    start: psIndex,\r\n                    end: psIndex + psCount * 3,\r\n                },\r\n                hide: false\r\n            };\r\n            psIndex += psCount * 3;\r\n        }\r\n\r\n        super();\r\n        this._initOptions(options);\r\n\r\n        const geometry = new LineGeometry();\r\n        geometry.setPositions(ps);\r\n        this._setMaterialRes(layer, material);\r\n        this._createLine2(geometry, material);\r\n        const { altitude } = options;\r\n        const z = layer.distanceToVector3(altitude, altitude).x;\r\n        const v = layer.coordinateToVector3(center, z);\r\n        this.getObject3d().position.copy(v);\r\n\r\n        this._faceMap = faceMap;\r\n        this._baseObjects = lines;\r\n        this._datas = lineStrings;\r\n        this._geometriesAttributes = geometriesAttributes;\r\n        this.faceIndex = null;\r\n        this.index = null;\r\n        this._geometryCache = new LineGeometry();\r\n        (this._geometryCache as any).setPositions(ps);\r\n        this._colorMap = {};\r\n        this.isHide = false;\r\n        this._initBaseObjectsEvent(lines);\r\n        this._setPickObject3d(ps, material.linewidth);\r\n        this._init();\r\n        this.type = 'FatLines';\r\n    }\r\n\r\n    _setMaterialRes(layer, material) {\r\n        const map = layer.getMap();\r\n        const size = map.getSize();\r\n        const width = size.width,\r\n            height = size.height;\r\n        material.resolution.set(width, height);\r\n    }\r\n\r\n    _setPickObject3d(ps?, linewidth?) {\r\n        const geometry = this._geometryCache || new LineGeometry();\r\n        (geometry as LineGeometry).setPositions(ps);\r\n        const pick = this.getLayer().getPick();\r\n        const { _geometriesAttributes } = this;\r\n        const colors = getGeometriesColorArray(_geometriesAttributes);\r\n        let cIndex = 0;\r\n        for (let i = 0, len = _geometriesAttributes.length; i < len; i++) {\r\n            const color = pick.getColor();\r\n            const colorIndex = color.getHex();\r\n            this._colorMap[colorIndex] = i;\r\n            const { count } = _geometriesAttributes[i].position;\r\n            this._datas[i].colorIndex = colorIndex;\r\n            for (let j = 0; j < count; j++) {\r\n                colors[cIndex] = color.r;\r\n                colors[cIndex + 1] = color.g;\r\n                colors[cIndex + 2] = color.b;\r\n                cIndex += 3;\r\n            }\r\n        }\r\n        (geometry as LineGeometry).setColors(colors);\r\n        const material = new LineMaterial({\r\n            // color: color.getStyle(),\r\n            // side: THREE.BackSide,\r\n            color: '#fff',\r\n            linewidth,\r\n            vertexColors: getVertexColors()\r\n            // dashed: false\r\n        });\r\n        this._setMaterialRes(this.getLayer(), material);\r\n        const color = pick.getColor();\r\n        const colorIndex = color.getHex();\r\n        const mesh = new Line2(geometry, material);\r\n        mesh.position.copy(this.getObject3d().position);\r\n        mesh._colorIndex = colorIndex;\r\n        this.setPickObject3d(mesh);\r\n    }\r\n\r\n    // eslint-disable-next-line no-unused-vars\r\n    identify(coordinate) {\r\n        return this.picked;\r\n    }\r\n\r\n    setSymbol(material) {\r\n        if (material && material instanceof THREE.Material) {\r\n            material.needsUpdate = true;\r\n            const size = this.getMap().getSize();\r\n            const width = size.width,\r\n                height = size.height;\r\n            (material as any).resolution.set(width, height);\r\n            (this.getObject3d() as any).material = material;\r\n        }\r\n        return this;\r\n    }\r\n\r\n\r\n    // eslint-disable-next-line consistent-return\r\n    getSelectMesh() {\r\n        const index = this._getIndex();\r\n        if (index != null) {\r\n            if (!this._baseObjects[index]) {\r\n                const lineString = this._datas[index];\r\n                const opts = maptalks.Util.extend({}, this.getOptions(), { index },\r\n                    isGeoJSONLine(lineString) ? lineString.properties : lineString.getProperties());\r\n                this._baseObjects[index] = new FatLine(lineString, opts, (this.getObject3d() as any).material, this.getLayer());\r\n                this._proxyEvent(this._baseObjects[index]);\r\n            }\r\n            return {\r\n                data: this._datas[index],\r\n                baseObject: this._baseObjects[index]\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n       * update geometry attributes\r\n       * @param {*} bufferAttribute\r\n       * @param {*} attribute\r\n       */\r\n    _updateAttribute(bufferAttribute, attribute) {\r\n        const { indexs } = this._getHideGeometryIndex(attribute);\r\n        const array = this._geometryCache.attributes[attribute].array;\r\n        const len = array.length;\r\n        for (let i = 0; i < len; i++) {\r\n            bufferAttribute.array[i] = array[i];\r\n        }\r\n        let value = -100000;\r\n        for (let j = 0; j < indexs.length; j++) {\r\n            const index = indexs[j];\r\n            const { start, end } = this._geometriesAttributes[index][attribute];\r\n            for (let i = start; i < end; i++) {\r\n                bufferAttribute.array[i] = value;\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    _showGeometry(baseObject, isHide) {\r\n        let index;\r\n        if (baseObject) {\r\n            index = baseObject.getOptions().index;\r\n        }\r\n        if (index != null) {\r\n            const geometryAttributes = this._geometriesAttributes[index];\r\n            const { hide } = geometryAttributes;\r\n            if (hide === isHide) {\r\n                return this;\r\n            }\r\n            geometryAttributes.hide = isHide;\r\n            const buffGeom = (this.getObject3d() as any).geometry;\r\n            this._updateAttribute(buffGeom.attributes.instanceStart, 'instanceStart');\r\n            this._updateAttribute(buffGeom.attributes.instanceEnd, 'instanceEnd');\r\n            // this._updateAttribute(buffGeom.attributes.instanceDistanceStart, 'instanceDistanceStart');\r\n            // this._updateAttribute(buffGeom.attributes.instanceDistanceEnd, 'instanceDistanceEnd');\r\n            buffGeom.attributes.instanceStart.data.needsUpdate = true;\r\n            buffGeom.attributes.instanceEnd.data.needsUpdate = true;\r\n            // buffGeom.attributes.instanceDistanceStart.data.needsUpdate = true;\r\n            // buffGeom.attributes.instanceDistanceEnd.data.needsUpdate = true;\r\n            this.isHide = isHide;\r\n        }\r\n        return this;\r\n    }\r\n}\r\n\r\nexport default FatLines;\r\n","\r\nimport * as maptalks from 'maptalks';\r\nimport * as THREE from 'three';\r\nimport BaseObject from './BaseObject';\r\nimport { ThreeLayer } from './index';\r\nimport { BarOptionType } from './type/index';\r\nimport { getDefaultBoxGeometry, initVertexColors } from './util/BarUtil';\r\nimport { getVertexColors } from './util/ThreeAdaptUtil';\r\n\r\nconst OPTIONS = {\r\n    radius: 10,\r\n    height: 100,\r\n    altitude: 0,\r\n    topColor: '',\r\n    bottomColor: '#2d2f61',\r\n};\r\n\r\nclass Box extends BaseObject {\r\n    constructor(coordinate: maptalks.Coordinate, options: BarOptionType, material: THREE.Material, layer: ThreeLayer) {\r\n        options = maptalks.Util.extend({}, OPTIONS, options, { layer, coordinate });\r\n        super();\r\n        this._initOptions(options);\r\n        const { height, radius, topColor, bottomColor, altitude } = options;\r\n        const h = layer.distanceToVector3(height, height).x;\r\n        const r = layer.distanceToVector3(radius, radius).x;\r\n        const geometry = getDefaultBoxGeometry().clone();\r\n        geometry.scale(r * 2, r * 2, h);\r\n        if (topColor) {\r\n            initVertexColors(geometry, bottomColor, topColor, 'z', h / 2);\r\n            (material as any).vertexColors = getVertexColors();\r\n        }\r\n        this._createMesh(geometry, material);\r\n        const z = layer.distanceToVector3(altitude, altitude).x;\r\n        const position = layer.coordinateToVector3(coordinate, z);\r\n        this.getObject3d().position.copy(position);\r\n        this.type = 'Box';\r\n    }\r\n}\r\nexport default Box;\r\n","\r\nimport * as maptalks from 'maptalks';\r\nimport * as THREE from 'three';\r\nimport BaseObject from './BaseObject';\r\nimport Box from './Box';\r\nimport MergedMixin from './MergedMixin';\r\nimport { distanceToVector3, getCenterOfPoints } from './util/index';\r\nimport { getDefaultBoxGeometry, initVertexColors, mergeBarGeometry } from './util/BarUtil';\r\nimport { BarOptionType } from './type/index';\r\nimport { ThreeLayer } from './index';\r\nimport { getVertexColors } from './util/ThreeAdaptUtil';\r\n\r\nconst OPTIONS = {\r\n    radius: 10,\r\n    height: 100,\r\n    altitude: 0,\r\n    topColor: null,\r\n    bottomColor: '#2d2f61',\r\n};\r\n\r\nclass Boxs extends MergedMixin(BaseObject) {\r\n    constructor(points: Array<BarOptionType>, options: BarOptionType, material: THREE.Material, layer: ThreeLayer) {\r\n        if (!Array.isArray(points)) {\r\n            points = [points];\r\n        }\r\n        const len = points.length;\r\n        const center = getCenterOfPoints(points);\r\n        const centerPt = layer.coordinateToVector3(center);\r\n        const geometries = [], bars = [], geometriesAttributes = [], faceMap = [];\r\n        let faceIndex = 0, psIndex = 0, normalIndex = 0, uvIndex = 0;\r\n        const cache = {};\r\n        for (let i = 0; i < len; i++) {\r\n            const opts = maptalks.Util.extend({ index: i }, OPTIONS, points[i]);\r\n            const { radius, altitude, topColor, bottomColor, height, coordinate } = opts;\r\n            const r = distanceToVector3(radius, layer, cache);\r\n            const h = distanceToVector3(height, layer, cache);\r\n            const alt = distanceToVector3(altitude, layer, cache);\r\n            const buffGeom = getDefaultBoxGeometry().clone();\r\n            buffGeom.scale(r * 2, r * 2, h);\r\n            if (topColor) {\r\n                initVertexColors(buffGeom, bottomColor, topColor, 'z', h / 2);\r\n                (material as any).vertexColors = getVertexColors();\r\n            }\r\n            const v = layer.coordinateToVector3(coordinate).sub(centerPt);\r\n            const parray = buffGeom.attributes.position.array as any;\r\n            for (let j = 0, len1 = parray.length; j < len1; j += 3) {\r\n                parray[j + 2] += alt;\r\n                parray[j] += v.x;\r\n                parray[j + 1] += v.y;\r\n                parray[j + 2] += v.z;\r\n            }\r\n            geometries.push(buffGeom);\r\n            const bar = new Box(coordinate, opts, material, layer);\r\n            bars.push(bar);\r\n\r\n            const faceLen = buffGeom.index.count / 3;\r\n            faceMap[i] = [faceIndex + 1, faceIndex + faceLen];\r\n            faceIndex += faceLen;\r\n\r\n            const psCount = buffGeom.attributes.position.count,\r\n                //  colorCount = buffGeom.attributes.color.count,\r\n                normalCount = buffGeom.attributes.normal.count, uvCount = buffGeom.attributes.uv.count;\r\n            geometriesAttributes[i] = {\r\n                position: {\r\n                    count: psCount,\r\n                    start: psIndex,\r\n                    end: psIndex + psCount * 3,\r\n                },\r\n                normal: {\r\n                    count: normalCount,\r\n                    start: normalIndex,\r\n                    end: normalIndex + normalCount * 3,\r\n                },\r\n                // color: {\r\n                //     count: colorCount,\r\n                //     start: colorIndex,\r\n                //     end: colorIndex + colorCount * 3,\r\n                // },\r\n                uv: {\r\n                    count: uvCount,\r\n                    start: uvIndex,\r\n                    end: uvIndex + uvCount * 2,\r\n                },\r\n                hide: false\r\n            };\r\n            psIndex += psCount * 3;\r\n            normalIndex += normalCount * 3;\r\n            // colorIndex += colorCount * 3;\r\n            uvIndex += uvCount * 2;\r\n        }\r\n        super();\r\n        options = maptalks.Util.extend({}, { altitude: 0, layer, points }, options);\r\n        this._initOptions(options);\r\n        const geometry = mergeBarGeometry(geometries);\r\n        this._createMesh(geometry, material);\r\n        const altitude = options.altitude;\r\n        const z = layer.distanceToVector3(altitude, altitude).x;\r\n        const v = centerPt.clone();\r\n        v.z = z;\r\n        this.getObject3d().position.copy(v);\r\n\r\n        this._faceMap = faceMap;\r\n        this._baseObjects = bars;\r\n        this._datas = points;\r\n        this._geometriesAttributes = geometriesAttributes;\r\n        this.faceIndex = null;\r\n        this._geometryCache = geometry.clone();\r\n        this.isHide = false;\r\n        this._colorMap = {};\r\n        this._initBaseObjectsEvent(bars);\r\n        this._setPickObject3d();\r\n        this._init();\r\n        this.type = 'Boxs';\r\n    }\r\n\r\n    // eslint-disable-next-line no-unused-vars\r\n    identify(coordinate) {\r\n        return this.picked;\r\n    }\r\n}\r\nexport default Boxs;\r\n","// eslint-disable-next-line quotes\r\nconst workerCode = `function(e){\"use strict\";var d=n,t=n;function n(e,t,n){n=n||2;var r,i,o,a,v,h=t&&t.length,l=h?t[0]*n:e.length,u=p(e,0,l,n,!0),x=[];if(!u||u.next===u.prev)return x;if(h&&(u=function(e,t,n,r){var i,o,a,v,h=[];for(i=0,o=t.length;i<o;i++)a=t[i]*r,v=i<o-1?t[i+1]*r:e.length,(v=p(e,a,v,r,!1))===v.next&&(v.steiner=!0),h.push(function(e){var t=e,n=e;for(;(t.x<n.x||t.x===n.x&&t.y<n.y)&&(n=t),t=t.next,t!==e;);return n}(v));for(h.sort(m),i=0;i<h.length;i++)!function(e,t){(t=function(e,t){var n,r=t,i=e.x,o=e.y,a=-1/0;do{if(o<=r.y&&o>=r.next.y&&r.next.y!==r.y){var v=r.x+(o-r.y)*(r.next.x-r.x)/(r.next.y-r.y);if(v<=i&&a<v){if((a=v)===i){if(o===r.y)return r;if(o===r.next.y)return r.next}n=r.x<r.next.x?r:r.next}}}while(r=r.next,r!==t);if(!n)return null;if(i===a)return n;var h,l=n,u=n.x,x=n.y,f=1/0;r=n;for(;i>=r.x&&r.x>=u&&i!==r.x&&M(o<x?i:a,o,u,x,o<x?a:i,o,r.x,r.y)&&(h=Math.abs(o-r.y)/(i-r.x),Z(r,e)&&(h<f||h===f&&(r.x>n.x||r.x===n.x&&function(e,t){return w(e.prev,e,t.prev)<0&&w(t.next,e,e.next)<0}(n,r)))&&(n=r,f=h)),r=r.next,r!==l;);return n}(e,t))&&(e=S(t,e),g(t,t.next),g(e,e.next))}(h[i],n),n=g(n,n.next);return n}(e,t,u,n)),e.length>80*n){for(var f=r=e[0],s=i=e[1],c=n;c<l;c+=n)(o=e[c])<f&&(f=o),(a=e[c+1])<s&&(s=a),r<o&&(r=o),i<a&&(i=a);v=0!==(v=Math.max(r-f,i-s))?1/v:0}return y(u,x,n,f,s,v),x}function p(e,t,n,r,i){var o,a;if(i===0<z(e,t,n,r))for(o=t;o<n;o+=r)a=v(o,e[o],e[o+1],a);else for(o=n-r;t<=o;o-=r)a=v(o,e[o],e[o+1],a);return a&&u(a,a.next)&&(f(a),a=a.next),a}function g(e,t){if(!e)return e;t=t||e;var n,r=e;do{if(n=!1,r.steiner||!u(r,r.next)&&0!==w(r.prev,r,r.next))r=r.next;else{if(f(r),(r=t=r.prev)===r.next)break;n=!0}}while(n||r!==t);return t}function y(e,t,n,r,i,o,a){if(e){!a&&o&&function(e,t,n,r){for(var i=e;null===i.z&&(i.z=b(i.x,i.y,t,n,r)),i.prevZ=i.prev,i.nextZ=i.next,i=i.next,i!==e;);i.prevZ.nextZ=null,i.prevZ=null,function(e){var t,n,r,i,o,a,v,h,l=1;do{for(n=e,o=e=null,a=0;n;){for(a++,r=n,t=v=0;t<l&&(v++,r=r.nextZ);t++);for(h=l;0<v||0<h&&r;)0!==v&&(0===h||!r||n.z<=r.z)?(n=(i=n).nextZ,v--):(r=(i=r).nextZ,h--),o?o.nextZ=i:e=i,i.prevZ=o,o=i;n=r}}while(o.nextZ=null,l*=2,1<a)}(i)}(e,r,i,o);for(var v,h,l=e;e.prev!==e.next;)if(v=e.prev,h=e.next,o?function(e,t,n,r){var i=e.prev,o=e,a=e.next;if(0<=w(i,o,a))return!1;var v=(i.x<o.x?i.x<a.x?i:a:o.x<a.x?o:a).x,h=(i.y<o.y?i.y<a.y?i:a:o.y<a.y?o:a).y,l=(i.x>o.x?i.x>a.x?i:a:o.x>a.x?o:a).x,u=(i.y>o.y?i.y>a.y?i:a:o.y>a.y?o:a).y,x=b(v,h,t,n,r),f=b(l,u,t,n,r),s=e.prevZ,c=e.nextZ;for(;s&&s.z>=x&&c&&c.z<=f;){if(s!==e.prev&&s!==e.next&&M(i.x,i.y,o.x,o.y,a.x,a.y,s.x,s.y)&&0<=w(s.prev,s,s.next))return!1;if(s=s.prevZ,c!==e.prev&&c!==e.next&&M(i.x,i.y,o.x,o.y,a.x,a.y,c.x,c.y)&&0<=w(c.prev,c,c.next))return!1;c=c.nextZ}for(;s&&s.z>=x;){if(s!==e.prev&&s!==e.next&&M(i.x,i.y,o.x,o.y,a.x,a.y,s.x,s.y)&&0<=w(s.prev,s,s.next))return!1;s=s.prevZ}for(;c&&c.z<=f;){if(c!==e.prev&&c!==e.next&&M(i.x,i.y,o.x,o.y,a.x,a.y,c.x,c.y)&&0<=w(c.prev,c,c.next))return!1;c=c.nextZ}return!0}(e,r,i,o):function(e){var t=e.prev,n=e,r=e.next;if(0<=w(t,n,r))return!1;var i=e.next.next;for(;i!==e.prev;){if(M(t.x,t.y,n.x,n.y,r.x,r.y,i.x,i.y)&&0<=w(i.prev,i,i.next))return!1;i=i.next}return!0}(e))t.push(v.i/n),t.push(e.i/n),t.push(h.i/n),f(e),e=h.next,l=h.next;else if((e=h)===l){a?1===a?y(e=function(e,t,n){var r=e;do{var i=r.prev,o=r.next.next}while(!u(i,o)&&x(i,r,r.next,o)&&Z(i,o)&&Z(o,i)&&(t.push(i.i/n),t.push(r.i/n),t.push(o.i/n),f(r),f(r.next),r=e=o),r=r.next,r!==e);return g(r)}(g(e),t,n),t,n,r,i,o,2):2===a&&function(e,t,n,r,i,o){var a=e;do{for(var v=a.next.next;v!==a.prev;){if(a.i!==v.i&&function(e,t){return e.next.i!==t.i&&e.prev.i!==t.i&&!function(e,t){var n=e;do{if(n.i!==e.i&&n.next.i!==e.i&&n.i!==t.i&&n.next.i!==t.i&&x(n,n.next,e,t))return!0}while(n=n.next,n!==e);return!1}(e,t)&&(Z(e,t)&&Z(t,e)&&function(e,t){var n=e,r=!1,i=(e.x+t.x)/2,o=(e.y+t.y)/2;for(;n.y>o!=n.next.y>o&&n.next.y!==n.y&&i<(n.next.x-n.x)*(o-n.y)/(n.next.y-n.y)+n.x&&(r=!r),n=n.next,n!==e;);return r}(e,t)&&(w(e.prev,e,t.prev)||w(e,t.prev,t))||u(e,t)&&0<w(e.prev,e,e.next)&&0<w(t.prev,t,t.next))}(a,v)){var h=S(a,v);return a=g(a,a.next),h=g(h,h.next),y(a,t,n,r,i,o),y(h,t,n,r,i,o)}v=v.next}}while((a=a.next)!==e)}(e,t,n,r,i,o):y(g(e),t,n,r,i,o,1);break}}}function m(e,t){return e.x-t.x}function b(e,t,n,r,i){return(e=1431655765&((e=858993459&((e=252645135&((e=16711935&((e=32767*(e-n)*i)|e<<8))|e<<4))|e<<2))|e<<1))|(t=1431655765&((t=858993459&((t=252645135&((t=16711935&((t=32767*(t-r)*i)|t<<8))|t<<4))|t<<2))|t<<1))<<1}function M(e,t,n,r,i,o,a,v){return 0<=(i-a)*(t-v)-(e-a)*(o-v)&&0<=(e-a)*(r-v)-(n-a)*(t-v)&&0<=(n-a)*(o-v)-(i-a)*(r-v)}function w(e,t,n){return(t.y-e.y)*(n.x-t.x)-(t.x-e.x)*(n.y-t.y)}function u(e,t){return e.x===t.x&&e.y===t.y}function x(e,t,n,r){var i=l(w(e,t,n)),o=l(w(e,t,r)),a=l(w(n,r,e)),v=l(w(n,r,t));return i!==o&&a!==v||(0===i&&h(e,n,t)||(0===o&&h(e,r,t)||(0===a&&h(n,e,r)||!(0!==v||!h(n,t,r)))))}function h(e,t,n){return t.x<=Math.max(e.x,n.x)&&t.x>=Math.min(e.x,n.x)&&t.y<=Math.max(e.y,n.y)&&t.y>=Math.min(e.y,n.y)}function l(e){return 0<e?1:e<0?-1:0}function Z(e,t){return w(e.prev,e,e.next)<0?0<=w(e,t,e.next)&&0<=w(e,e.prev,t):w(e,t,e.prev)<0||w(e,e.next,t)<0}function S(e,t){var n=new a(e.i,e.x,e.y),r=new a(t.i,t.x,t.y),i=e.next,o=t.prev;return(e.next=t).prev=e,(n.next=i).prev=n,(r.next=n).prev=r,(o.next=r).prev=o,r}function v(e,t,n,r){n=new a(e,t,n);return r?(n.next=r.next,(n.prev=r).next.prev=n,r.next=n):(n.prev=n).next=n,n}function f(e){e.next.prev=e.prev,e.prev.next=e.next,e.prevZ&&(e.prevZ.nextZ=e.nextZ),e.nextZ&&(e.nextZ.prevZ=e.prevZ)}function a(e,t,n){this.i=e,this.x=t,this.y=n,this.prev=null,this.next=null,this.z=null,this.prevZ=null,this.nextZ=null,this.steiner=!1}function z(e,t,n,r){for(var i=0,o=t,a=n-r;o<n;o+=r)i+=(e[a]-e[o])*(e[o+1]+e[a+1]),a=o;return i}function r(e,t){var n=e.length-1,r=[e[0]];return function e(t,n,r,i,o){for(var a,v,h,l,u,x,f,s=i,c=n+1;c<r;c++){var p=(v=t[c],h=t[n],l=t[r],p=f=x=u=void 0,u=h[0],x=h[1],f=l[0]-u,p=l[1]-x,0===f&&0===p||(1<(h=((v[0]-u)*f+(v[1]-x)*p)/(f*f+p*p))?(u=l[0],x=l[1]):0<h&&(u+=f*h,x+=p*h)),(f=v[0]-u)*f+(p=v[1]-x)*p);s<p&&(a=c,s=p)}i<s&&(1<a-n&&e(t,n,a,i,o),o.push(t[a]),1<r-a&&e(t,a,r,i,o))}(e,0,n,t,r),r.push(e[n]),r}function A(e,t,n){if(e.length<=2)return e;t=void 0!==t?t*t:1;return e=r(e=n?e:function(e,t){for(var n,r,i,o,a=e[0],v=[a],h=1,l=e.length;h<l;h++)n=e[h],i=a,o=void 0,o=(r=n)[0]-i[0],i=r[1]-i[1],t<o*o+i*i&&(v.push(n),a=n);return a!==n&&v.push(n),v}(e,t),t)}function R(e,t){var n=t[0],r=t[1],t=Math.sqrt(n*n+r*r);return e[0]=n/t,e[1]=r/t,e}function s(e,t,n,r){return e[0]=t[0]+n[0]*r,e[1]=t[1]+n[1]*r,e[2]=t[2]+n[2]*r,e}function F(e,t,n){return e[0]=t[0]-n[0],e[1]=t[1]-n[1],e[2]=t[2]-n[2],e}n.deviation=function(e,t,n,r){var i=t&&t.length,o=i?t[0]*n:e.length,a=Math.abs(z(e,0,o,n));if(i)for(var v=0,h=t.length;v<h;v++){var l=t[v]*n,u=v<h-1?t[v+1]*n:e.length;a-=Math.abs(z(e,l,u,n))}for(var x=0,v=0;v<r.length;v+=3){var f=r[v]*n,s=r[v+1]*n,c=r[v+2]*n;x+=Math.abs((e[f]-e[c])*(e[1+s]-e[1+f])-(e[f]-e[s])*(e[1+c]-e[1+f]))}return 0===a&&0===x?0:Math.abs((x-a)/a)},n.flatten=function(e){for(var t=e[0][0].length,n={vertices:[],holes:[],dimensions:t},r=0,i=0;i<e.length;i++){for(var o=0;o<e[i].length;o++)for(var a=0;a<t;a++)n.vertices.push(e[i][o][a]);0<i&&(r+=e[i-1].length,n.holes.push(r))}return n},d.default=t;var c=[];function ee(e,t,n,r){var i,o,a=(o=n,(i=t)[0]*o[0]+i[1]*o[1]+i[2]*o[2]),v=Math.acos(a)*r;return s(c,n,t,-a),r=(o=i=c)[0],n=o[1],a=o[2],o=Math.sqrt(r*r+n*n+a*a),i[0]=r/o,i[1]=n/o,i[2]=a/o,a=e,o=t,t=Math.cos(v),a[0]=o[0]*t,a[1]=o[1]*t,a[2]=o[2]*t,s(e,e,c,Math.sin(v)),e}function q(e,t,n){if(n-t<3)return 0;for(var r=0,i=2*(n-1),o=2*t;o<2*n;){var a=e[i],v=e[i+1],h=e[o],l=e[o+1],i=o;o+=2,r+=a*l-h*v}return r}var B=[],U=[],L=[];function O(e,t,n,r,i,o,a,v){var h=null!=a,l=i,u=null;h&&(u=new Uint32Array(r-n));for(var x=n;x<r;x++){var f=x===r-1?n:x+1,s=x===n?r-1:x-1,c=e[2*s],p=e[2*s+1],g=e[2*x],d=e[2*x+1],s=e[2*f],f=e[2*f+1];B[0]=g-c,B[1]=d-p,U[0]=s-g,U[1]=f-d,R(B,B),R(U,U),h&&(u[x]=l),v||x!==n?v||x!==r-1?(c=U,p=B,(s=L)[0]=c[0]+p[0],s[1]=c[1]+p[1],f=L[1],L[1]=-L[0],L[0]=f,R(L,L),s=U,p=(c=L)[0]*s[0]+c[1]*s[1],f=Math.sqrt(1-p*p),c=o*Math.min(10,1/f),h&&a<1/f&&o*p<0?(s=g+L[0]*o,p=d+L[1]*o,f=Math.acos(f)/2,f=Math.tan(f)*Math.abs(o),t[2*l]=s+L[1]*f,t[2*l+1]=p-L[0]*f,t[2*++l]=s-L[1]*f,t[2*l+1]=p+L[0]*f):(t[2*l]=g+L[0]*c,t[2*l+1]=d+L[1]*c)):(L[0]=B[1],L[1]=-B[0],R(L,L),t[2*l]=g+L[0]*o,t[2*l+1]=d+L[1]*o):(L[0]=U[1],L[1]=-U[0],R(L,L),t[2*l]=g+L[0]*o,t[2*l+1]=d+L[1]*o),l++}return u}function P(e,t,n,r,i){var o=null!=r?[]:new Float32Array(e.length);if(O(e,o,0,t&&t.length?t[0]:e.length/2,0,n,r,i),t)for(var a=0;a<t.length;a++){var v=t[a];O(e,o,v,t[a+1]||e.length/2,null!=r?o.length/2:v,n,r,i)}return o}function V(e,t,n,r){for(var i=0;i<Math.floor((r-n)/2);i++)for(var o=0;o<t;o++){var a=(i+n)*t+o,v=(r-i-1)*t+o,h=e[a];e[a]=e[v],e[v]=h}return e}function W(e){e.depth=e.depth||1,e.bevelSize=e.bevelSize||0,e.bevelSegments=null==e.bevelSegments?2:e.bevelSegments,e.smoothSide=e.smoothSide||!1,e.smoothBevel=e.smoothBevel||!1,e.simplify=e.simplify||0,\"number\"==typeof e.depth&&(e.bevelSize=Math.min(0<e.bevelSegments?e.bevelSize:0,e.depth/2)),0<e.bevelSize||(e.bevelSegments=0),e.bevelSegments=Math.round(e.bevelSegments);var t,n,r,i,o=e.boundingRect;e.translate=e.translate||[0,0],e.scale=e.scale||[1,1],e.fitRect&&(t=null==e.fitRect.x?o.x||0:e.fitRect.x,n=null==e.fitRect.y?o.y||0:e.fitRect.y,r=e.fitRect.width,i=e.fitRect.height,null==r?null!=i?r=i/o.height*o.width:(r=o.width,i=o.height):null==i&&(i=r/o.width*o.height),e.scale=[r/o.width,i/o.height],e.translate=[(t-o.x)*e.scale[0],(n-o.y)*e.scale[1]])}function j(e,t){function n(e,t,n,r){e[0]=t,e[1]=n,e[2]=r}for(var r,i,o,a,v,h,l,u=[],x=[],f=[],s=[],c=[],p=[],g=e.length,d=new Float32Array(t.length),y=0;y<g;){var m=3*e[y++],b=3*e[y++],M=3*e[y++];n(u,t[m],t[1+m],t[2+m]),n(x,t[b],t[1+b],t[2+b]),n(f,t[M],t[1+M],t[2+M]),F(s,u,x),F(c,x,f),r=p,o=c,l=h=v=a=void 0,a=(i=s)[0],v=i[1],h=i[2],l=o[0],i=o[1],o=o[2],r[0]=v*o-h*i,r[1]=h*l-a*o,r[2]=a*i-v*l;for(var w=0;w<3;w++)d[m+w]=d[m+w]+p[w],d[b+w]=d[b+w]+p[w],d[M+w]=d[M+w]+p[w]}for(var Z,S,z,A,R,q=0;q<d.length;)n(p,d[q],d[q+1],d[q+2]),R=A=z=void 0,z=(S=Z=p)[0],A=S[1],R=S[2],S=Math.sqrt(z*z+A*A+R*R),Z[0]=z/S,Z[1]=A/S,Z[2]=R/S,d[q++]=p[0],d[q++]=p[1],d[q++]=p[2];return d}var te=[[0,0],[1,0],[1,1],[0,0],[1,1],[0,1]];function H(e,t,n,r,i,o){var a=t.vertices,v=t.topVertices,h=t.depth,t=t.rect,l=r-n,u=o.smoothSide?1:2,x=l*u,f=o.smoothBevel?1:2,s=Math.min(h/2,o.bevelSize),c=o.bevelSegments,p=i.vertex,g=Math.max(t.width,t.height,h);if(0<s)for(var d=[0,0,1],y=[],m=[0,0,-1],b=[],M=0,w=new Float32Array(l),Z=0;Z<2;Z++)for(var S=0===Z?h-s:s,z=0;z<=c*f;z++){for(var A=0,R=void 0,q=void 0,F=0;F<l;F++){for(var B=0;B<u;B++){var U=2*((F+B)%l+n);y[0]=a[U]-v[U],y[1]=a[1+U]-v[1+U],y[2]=0;var L=Math.sqrt(y[0]*y[0]+y[1]*y[1]);y[0]/=L,y[1]/=L;var O=(Math.floor(z/f)+z%f)/c;0===Z?ee(b,d,y,O):ee(b,y,m,O);var P=0===Z?O:1-O,V=s*Math.sin(P*Math.PI/2),W=L*Math.cos(P*Math.PI/2),O=s*L/Math.sqrt(V*V+W*W),P=b[0]*O+v[U],L=b[1]*O+v[1+U],V=b[2]*O+S;e.position[3*i.vertex]=P,e.position[3*i.vertex+1]=L,e.position[3*i.vertex+2]=V,(0<F||0<B)&&(A+=Math.sqrt((R-P)*(R-P)+(q-L)*(q-L))),(0<z||0<Z)&&(W=3*(i.vertex-x),U=e.position[W],O=e.position[1+W],W=e.position[2+W],w[F]+=Math.sqrt((U-P)*(U-P)+(O-L)*(O-L)+(W-V)*(W-V))),e.uv[2*i.vertex]=A/g,e.uv[2*i.vertex+1]=w[F]/g,R=P,q=L,i.vertex++}if(1<f&&z%f||1==f&&1<=z)for(var j=0;j<6;j++){var H=(te[j][0]+F*u)%x,k=te[j][1]+M;e.indices[i.index++]=(k-1)*x+H+p}}M++}else for(var I=0;I<2;I++)for(var _=0===I?h-s:s,D=0,E=void 0,C=void 0,G=0;G<l;G++)for(var J=0;J<u;J++){var K=2*((G+J)%l+n),N=a[K],K=a[1+K];e.position[3*i.vertex]=N,e.position[3*i.vertex+1]=K,e.position[3*i.vertex+2]=_,(0<G||0<J)&&(D+=Math.sqrt((E-N)*(E-N)+(C-K)*(C-K))),e.uv[2*i.vertex]=D/g,e.uv[2*i.vertex+1]=_/g,E=N,C=K,i.vertex++}for(var Q=0<s?c*f+1:1,T=0;T<l;T++)for(var X=0;X<6;X++){var Y=(te[X][0]+T*u)%x,$=te[X][1]+Q;e.indices[i.index++]=($-1)*x+Y+p}}function k(e,t){for(var n=0,r=0,i=0;i<e.length;i++){var o=e[i],a=o.indices,v=o.vertices,h=o.holes,o=o.depth,l=v.length/2,u=0<Math.min(o/2,t.bevelSize)?t.bevelSegments:0;n+=a.length*(t.excludeBottom?1:2),r+=l*(t.excludeBottom?1:2);for(var x=2+2*u,f=0,s=0,c=0;c<(h?h.length:0)+1;c++){n+=6*((s=0===c?h&&h.length?h[0]:l:(f=h[c-1],h[c]||l))-f)*(x-1);var p=(s-f)*(t.smoothSide?1:2);r+=p*x+(t.smoothBevel?0:u*p*2)}}for(var g={position:new Float32Array(3*r),indices:new(65535<r?Uint32Array:Uint16Array)(n),uv:new Float32Array(2*r)},d={vertex:0,index:0},y=0;y<e.length;y++)!function(e,t,n,r){var i=e.indices,o=e.vertices,a=e.topVertices,v=e.rect,h=e.depth;if(!(o.length<=4)){for(var l=n.vertex,u=i.length,x=0;x<u;x++)t.indices[n.index++]=l+i[x];for(var f=Math.max(v.width,v.height),s=0;s<(r.excludeBottom?1:2);s++)for(var c=0;c<a.length;c+=2){var p=a[c],g=a[c+1];t.position[3*n.vertex]=p,t.position[3*n.vertex+1]=g,t.position[3*n.vertex+2]=(1-s)*h,t.uv[2*n.vertex]=(p-v.x)/f,t.uv[2*n.vertex+1]=(g-v.y)/f,n.vertex++}if(!r.excludeBottom)for(var d=o.length/2,y=0;y<u;y+=3)for(var m=0;m<3;m++)t.indices[n.index++]=l+d+i[y+2-m]}}(e[y],g,d,t);for(var m=0;m<e.length;m++){var b,M=e[m],w=M.holes,Z=M.vertices.length/2,S=w&&w.length?w[0]:Z;if(H(g,e[m],0,S,d,t),w)for(var z=0;z<w.length;z++)b=w[z],S=w[z+1]||Z,H(g,e[m],b,S,d,t)}for(var A=0;A<g.uv.length;A++){var R=g.uv[A];0<R&&Math.round(R)===R?g.uv[A]=1:g.uv[A]=R%1}return g.normal=j(g.indices,g.position),g.boundingRect=e[0]&&e[0].rect,g}function I(e,t){t=Object.assign({},t);for(var n=[1/0,1/0],r=[-1/0,-1/0],i=0;i<e.length;i++)D(e[i][0],n,r);t.boundingRect=t.boundingRect||{x:n[0],y:n[1],width:r[0]-n[0],height:r[1]-n[1]},W(t);for(var o=[],a=t.translate||[0,0],v=t.scale||[1,1],h=t.boundingRect,l={x:h.x*v[0]+a[0],y:h.y*v[1]+a[1],width:h.width*v[0],height:h.height*v[1]},u=Math.min(h.width,h.height)/1e5,x=0;x<e.length;x++){var f=function(e,t){for(var n=[],r=0;r<e.length;r++){for(var i=e[r],o=[],a=i.length,v=i[a-1][0],h=i[a-1][1],l=0,u=0;u<a;u++){var x=i[u][0],f=i[u][1],s=x-v,c=f-h;t<(l+=Math.sqrt(s*s+c*c))&&(o.push(i[u]),l=0),v=x,h=f}3<=o.length&&n.push(o)}return 0<n.length?n:null}(e[x],u);if(f){var s=t.simplify/Math.max(v[0],v[1]);if(f=0<s?function(e,t){for(var n=[],r=0;r<e.length;r++){var i=e[r];3<=(i=A(i,t,!0)).length&&n.push(i)}return 0<n.length?n:null}(f,s):f){for(var c=d.flatten(f),p=c.vertices,s=c.holes,f=c.dimensions,g=0;g<p.length;)p[g]=p[g++]*v[0]+a[0],p[g]=p[g++]*v[1]+a[1];if(!function(e,t){var n=e.length/2,r=0,i=t&&t.length?t[0]:n;0<q(e,r,i)&&V(e,2,r,i);for(var o=1;o<(t?t.length:0)+1;o++)q(e,r=t[o-1],i=t[o]||n)<0&&V(e,2,r,i)}(p,s),2!==f)throw new Error(\"Only 2D polygon points are supported\");c=0<t.bevelSize?P(p,s,t.bevelSize,null,!0):p,f=d(c,s,f=void 0===(f=f)?2:f);o.push({indices:f,vertices:p,topVertices:c,holes:s,rect:l,depth:\"function\"==typeof t.depth?t.depth(x):t.depth})}}}return k(o,t)}function _(e,t){t=Object.assign({},t);for(var n=[1/0,1/0],r=[-1/0,-1/0],i=0;i<e.length;i++)D(e[i],n,r);t.boundingRect=t.boundingRect||{x:n[0],y:n[1],width:r[0]-n[0],height:r[1]-n[1]},W(t);var o=t.scale||[1,1];null==t.lineWidth&&(t.lineWidth=1),null==t.miterLimit&&(t.miterLimit=2);for(var a=[],v=0;v<e.length;v++){var h=e[v],l=t.simplify/Math.max(o[0],o[1]);0<l&&(h=A(h,l,!0)),a.push(function(e,t,n){for(var r=n.lineWidth,i=e.length,o=new Float32Array(2*i),a=n.translate||[0,0],v=n.scale||[1,1],h=0,l=0;h<i;h++)o[l++]=e[h][0]*v[0]+a[0],o[l++]=e[h][1]*v[1]+a[1];q(o,0,i)<0&&V(o,2,0,i);var u=[],x=[],f=n.miterLimit,s=O(o,x,0,i,0,-r/2,f,!1);V(o,2,0,i);for(var c=O(o,u,0,i,0,-r/2,f,!1),r=(u.length+x.length)/2,p=new Float32Array(2*r),g=0,d=x.length/2,y=0;y<x.length;y++)p[g++]=x[y];for(var m=0;m<u.length;m++)p[g++]=u[m];for(var b=new(65535<r?Uint32Array:Uint16Array)(3*(2*(i-1)+(r-2*i))),M=0,w=0;w<i-1;w++){var Z=w+1;b[M++]=d-1-s[w],b[M++]=d-1-s[w]-1,b[M++]=c[w]+1+d,b[M++]=d-1-s[w],b[M++]=c[w]+1+d,b[M++]=c[w]+d,c[Z]-c[w]==2?(b[M++]=c[w]+2+d,b[M++]=c[w]+1+d,b[M++]=d-s[Z]-1):s[Z]-s[w]==2&&(b[M++]=c[Z]+d,b[M++]=d-1-(s[w]+1),b[M++]=d-1-(s[w]+2))}return f=0<n.bevelSize?P(p,[],n.bevelSize,null,!0):p,r=n.boundingRect,{vertices:p,indices:b,topVertices:f,rect:{x:r.x*v[0]+a[0],y:r.y*v[1]+a[1],width:r.width*v[0],height:r.height*v[1]},depth:\"function\"==typeof n.depth?n.depth(t):n.depth,holes:[]}}(h,v,t))}return k(a,t)}function D(e,t,n){for(var r=0;r<e.length;r++)t[0]=Math.min(e[r][0],t[0]),t[1]=Math.min(e[r][1],t[1]),n[0]=Math.max(e[r][0],n[0]),n[1]=Math.max(e[r][1],n[1])}function E(e){for(var t=new Float32Array(e),n=[],r=0,i=t.length;r<i;r+=2){var o=t[r],a=t[r+1];n.push([o,a])}return n}function C(e,t){void 0===t&&(t=!1);for(var n,r,i,o,a=e.length,v=[],h=[],l=[],u=0,x=0,f=0,s=0,c=0;c<a;c++){var p=t?(p=e[c],r=i=n=o=i=r=n=void 0,n=p.data,r=p.height,i=p.width,o=p.bottomHeight,p=_(n,{lineWidth:i,depth:r}),n=p.position,i=p.normal,r=p.uv,p=p.indices,G(n,o),{position:n,normal:i,uv:r,indices:p}):(d=e[c],b=m=y=b=g=m=y=void 0,y=d.data,m=d.height,g=d.bottomHeight,b=I(y,{depth:m}),d=b.position,y=b.normal,m=b.uv,b=b.indices,G(d,g),{position:d,normal:y,uv:m,indices:b}),g=e[c].bottomHeight||0,d=p.position,y=p.normal,m=p.uv,b=p.indices;h.push(p);b=b.length/3;l[c]=[u+1,u+b],u+=b;d=d.length/3,y=y.length/3,m=m.length/2;v[c]={position:{middleZ:g+(e[c].height||0)/2,count:d,start:x,end:x+3*d},normal:{count:y,start:f,end:f+3*y},uv:{count:m,start:s,end:s+2*m},hide:!1},x+=3*d,f+=3*y,s+=2*m}var M=function(e){for(var t={},n={},r=0;r<e.length;++r){var i,o=e[r];for(i in o)void 0===t[i]&&(t[i]=[],n[i]=0),t[i].push(o[i]),n[i]+=o[i].length}var a,v={},h=0,l=[];for(a in t)if(\"indices\"===a)for(var u=t[a],x=0,f=u.length;x<f;x++){for(var s=u[x],c=0,p=s.length;c<p;c++)l.push(s[c]+h);h+=t.position[x].length/3}else{var g=function(e,t){for(var n=new Float32Array(t),r=0,i=0;i<e.length;++i)n.set(e[i],r),r+=e[i].length;return n}(t[a],n[a]);if(!g)return null;v[a]=g}return v.indices=new Uint32Array(l),v}(h),w=M.position,Z=M.normal,S=M.uv,M=M.indices;return{position:w.buffer,normal:Z.buffer,uv:S.buffer,indices:M.buffer,faceMap:l,geometriesAttributes:v}}function G(e,t){if(void 0!==t&&\"number\"==typeof t&&0!==t)for(var n=0,r=e.length;n<r;n+=3)e[n+2]+=t}e.initialize=function(){},e.onmessage=function(e,t){var n=e.data,e=n.type,r=n.datas;if(\"Polygon\"===e){!function(e){for(var t=e.length,n=0;n<t;n++)for(var r=e[n].data,i=0,o=r.length;i<o;i++)for(var a=r[i],v=0,h=a.length;v<h;v++)e[n].data[i][v]=E(a[v])}(r);n=C(r);t(null,n,[n.position,n.normal,n.uv,n.indices])}else if(\"LineString\"===e){for(var i=0,o=r.length;i<o;i++)for(var a=0,v=r[i].data.length;a<v;a++)r[i].data[a]=E(r[i].data[a]);e=C(r,!0);t(null,e,[e.position,e.normal,e.uv,e.indices])}},Object.defineProperty(e,\"__esModule\",{value:!0})}`;\r\nconst workerName = '__maptalks.three__';\r\n\r\nexport function getWorkerName() {\r\n    return workerName;\r\n}\r\n\r\nexport function getWorkerCode() {\r\n    return workerCode;\r\n}\r\n","import * as maptalks from 'maptalks';\r\nimport * as THREE from 'three';\r\nimport BaseObject from './BaseObject';\r\nimport Bar from './Bar';\r\nimport Line from './Line';\r\nimport ExtrudeLine from './ExtrudeLine';\r\nimport ExtrudePolygon from './ExtrudePolygon';\r\nimport Model from './Model';\r\nimport ExtrudeLineTrail from './ExtrudeLineTrail';\r\nimport ExtrudePolygons from './ExtrudePolygons';\r\nimport Point from './Point';\r\nimport Points from './Points';\r\nimport Bars from './Bars';\r\nimport ExtrudeLines from './ExtrudeLines';\r\nimport Lines from './Lines';\r\nimport ThreeVectorTileLayer from './ThreeVectorTileLayer';\r\nimport Terrain from './Terrain';\r\nimport TerrainVectorTileLayer from './TerrainVectorTileLayer';\r\nimport HeatMap from './HeatMap';\r\nimport { setRaycasterLinePrecision } from './util/ThreeAdaptUtil';\r\nimport GPUPick from './GPUPick';\r\nimport FatLine from './FatLine';\r\nimport FatLines from './FatLines';\r\nimport Box from './Box';\r\nimport Boxs from './Boxs';\r\nimport MergedMixin from './MergedMixin';\r\nimport * as GeoJSONUtil from './util/GeoJSONUtil';\r\nimport * as GeoUtil from './util/GeoUtil';\r\nimport * as MergeGeometryUtil from './util/MergeGeometryUtil';\r\nimport * as ExtrudeUtil from './util/ExtrudeUtil';\r\nimport * as LineUtil from './util/LineUtil';\r\nimport * as IdentifyUtil from './util/IdentifyUtil';\r\nimport * as geometryExtrude from 'deyihu-geometry-extrude';\r\nimport LineMaterial from './util/fatline/LineMaterial';\r\nimport { BarOptionType, BaseLayerOptionType, BaseObjectOptionType, ExtrudeLineOptionType, ExtrudeLineTrailOptionType, ExtrudePolygonOptionType, FatLineMaterialType, getBaseObjectMaterialType, HeatMapDataType, HeatMapOptionType, LineMaterialType, LineOptionType, LineStringType, PointOptionType, PolygonType, SingleLineStringType, TerrainOptionType } from './type/index';\r\nimport { getWorkerCode, getWorkerName } from './worker/getworker';\r\n\r\n\r\nconst options: BaseLayerOptionType = {\r\n    'renderer': 'gl',\r\n    'doubleBuffer': false,\r\n    'glOptions': null,\r\n    'geometryEvents': true,\r\n    'identifyCountOnEvent': 0,\r\n    'forceRenderOnZooming': true,\r\n    'loopRenderCount': 50\r\n};\r\n\r\nconst RADIAN = Math.PI / 180;\r\n\r\nconst LINEPRECISIONS = [\r\n    [4000, 220],\r\n    [2000, 100],\r\n    [1000, 30],\r\n    [500, 15],\r\n    [100, 5],\r\n    [50, 2],\r\n    [10, 1],\r\n    [5, 0.7],\r\n    [2, 0.1],\r\n    [1, 0.05],\r\n    [0.5, 0.02]\r\n];\r\n\r\nconst EVENTS = [\r\n    'mousemove',\r\n    'click',\r\n    'mousedown',\r\n    'mouseup',\r\n    'dblclick',\r\n    'contextmenu',\r\n    'touchstart',\r\n    'touchmove',\r\n    'touchend'\r\n];\r\nconst TEMP_COORD = new maptalks.Coordinate(0, 0);\r\nconst TEMP_POINT = new maptalks.Point(0, 0);\r\n\r\n\r\n// const MATRIX4 = new THREE.Matrix4();\r\n\r\n/**\r\n * A Layer to render with THREE.JS (http://threejs.org), the most popular library for WebGL. <br>\r\n *\r\n * @classdesc\r\n * A layer to render with THREE.JS\r\n * @example\r\n *  var layer = new maptalks.ThreeLayer('three');\r\n *\r\n *  layer.prepareToDraw = function (gl, scene, camera) {\r\n *      var size = map.getSize();\r\n *      return [size.width, size.height]\r\n *  };\r\n *\r\n *  layer.draw = function (gl, view, scene, camera, width,height) {\r\n *      //...\r\n *  };\r\n *  layer.addTo(map);\r\n * @class\r\n * @category layer\r\n * @extends {maptalks.CanvasLayer}\r\n * @param {String|Number} id - layer's id\r\n * @param {Object} options - options defined in [options]{@link maptalks.ThreeLayer#options}\r\n */\r\nclass ThreeLayer extends maptalks.CanvasLayer {\r\n    options: BaseLayerOptionType;\r\n    map: maptalks.Map;\r\n    type: string;\r\n    _animationBaseObjectMap: { [key: string]: BaseObject } = {};\r\n    _needsUpdate: boolean = true;\r\n    _raycaster: THREE.Raycaster;\r\n    _mouse: THREE.Vector2;\r\n    _containerPoint: maptalks.Point;\r\n    _mousemoveTimeOut: number = 0;\r\n    _baseObjects: Array<BaseObject> = [];\r\n    _delayMeshes: Array<BaseObject> = [];\r\n\r\n    constructor(id: string, options: BaseLayerOptionType) {\r\n        super(id, options);\r\n        this.type = 'ThreeLayer';\r\n    }\r\n\r\n    isRendering(): boolean {\r\n        const map = this.getMap();\r\n        if (!map) {\r\n            return false;\r\n        }\r\n        return map.isInteracting() || map.isAnimating();\r\n    }\r\n\r\n    prepareToDraw(...args) {\r\n\r\n    }\r\n    /**\r\n     * Draw method of ThreeLayer\r\n     * In default, it calls renderScene, refresh the camera and the scene\r\n     */\r\n    draw() {\r\n        this.renderScene();\r\n    }\r\n\r\n    /**\r\n     * Draw method of ThreeLayer when map is interacting\r\n     * In default, it calls renderScene, refresh the camera and the scene\r\n     */\r\n    drawOnInteracting() {\r\n        this.renderScene();\r\n    }\r\n    /**\r\n     * Convert a geographic coordinate to THREE Vector3\r\n     * @param  {maptalks.Coordinate} coordinate - coordinate\r\n     * @param {Number} [z=0] z value\r\n     * @return {THREE.Vector3}\r\n     */\r\n    coordinateToVector3(coordinate: maptalks.Coordinate | Array<number>, z: number = 0): THREE.Vector3 {\r\n        const map = this.getMap();\r\n        if (!map) {\r\n            return null;\r\n        }\r\n        const isArray = Array.isArray(coordinate);\r\n        if (isArray) {\r\n            TEMP_COORD.x = coordinate[0];\r\n            TEMP_COORD.y = coordinate[1];\r\n        }\r\n        if (!isArray) {\r\n            if (!(coordinate instanceof maptalks.Coordinate)) {\r\n                coordinate = new maptalks.Coordinate(coordinate);\r\n            }\r\n        }\r\n        const res = getGLRes(map);\r\n        const p = coordinateToPoint(map, isArray ? TEMP_COORD : coordinate, res, TEMP_POINT);\r\n        return new THREE.Vector3(p.x, p.y, z);\r\n    }\r\n\r\n    /**\r\n     * Convert geographic distance to THREE Vector3\r\n     * @param  {Number} w - width\r\n     * @param  {Number} h - height\r\n     * @return {THREE.Vector3}\r\n     */\r\n    distanceToVector3(w: number, h: number, coord?: maptalks.Coordinate | Array<number>): THREE.Vector3 {\r\n        if ((w === 0 && h === 0) || (!maptalks.Util.isNumber(w) || !maptalks.Util.isNumber(h))) {\r\n            return new THREE.Vector3(0, 0, 0);\r\n        }\r\n        const map = this.getMap();\r\n        const res = getGLRes(map);\r\n        let center = coord || map.getCenter();\r\n        if (!(center instanceof maptalks.Coordinate)) {\r\n            center = new maptalks.Coordinate(center);\r\n        }\r\n        const target = map.locate(center, w, h);\r\n        const p0 = coordinateToPoint(map, center, res),\r\n            p1 = coordinateToPoint(map, target, res);\r\n        const x = Math.abs(p1.x - p0.x) * maptalks.Util.sign(w);\r\n        const y = Math.abs(p1.y - p0.y) * maptalks.Util.sign(h);\r\n        return new THREE.Vector3(x, y, 0);\r\n    }\r\n\r\n    /**\r\n     * Convert a Polygon or a MultiPolygon to THREE shape\r\n     * @param  {maptalks.Polygon|maptalks.MultiPolygon} polygon - polygon or multipolygon\r\n     * @return {THREE.Shape}\r\n     */\r\n    toShape(polygon: maptalks.Polygon | maptalks.MultiPolygon): THREE.Shape | Array<THREE.Shape> {\r\n        if (!polygon) {\r\n            return null;\r\n        }\r\n        if (polygon instanceof maptalks.MultiPolygon) {\r\n            return polygon.getGeometries().map(c => this.toShape(c) as any);\r\n        }\r\n        const center = polygon.getCenter();\r\n        const centerPt = this.coordinateToVector3(center);\r\n        const shell = polygon.getShell();\r\n        const outer = shell.map(c => {\r\n            const vector = this.coordinateToVector3(c).sub(centerPt);\r\n            return new THREE.Vector2(vector.x, vector.y);\r\n        });\r\n        const shape = new THREE.Shape(outer);\r\n        const holes = polygon.getHoles();\r\n\r\n        if (holes && holes.length > 0) {\r\n            shape.holes = holes.map(item => {\r\n                const pts = item.map(c => {\r\n                    const vector = this.coordinateToVector3(c).sub(centerPt);\r\n                    return new THREE.Vector2(vector.x, vector.y);\r\n                });\r\n                return new THREE.Shape(pts);\r\n            });\r\n        }\r\n\r\n        return shape;\r\n    }\r\n\r\n\r\n    /**\r\n     * todo   This should also be extracted as a component\r\n     * @param {*} polygon\r\n     * @param {*} altitude\r\n     * @param {*} material\r\n     * @param {*} height\r\n     */\r\n    toExtrudeMesh(polygon: maptalks.Polygon | maptalks.MultiPolygon, altitude: number, material: THREE.Material, height: number): THREE.Mesh | Array<THREE.Mesh> {\r\n        if (!polygon) {\r\n            return null;\r\n        }\r\n        if (polygon instanceof maptalks.MultiPolygon) {\r\n            return polygon.getGeometries().map(c => this.toExtrudeMesh(c, altitude, material, height) as any);\r\n        }\r\n        const rings = polygon.getCoordinates();\r\n        rings.forEach(ring => {\r\n            const length = ring.length;\r\n            for (let i = length - 1; i >= 1; i--) {\r\n                if (ring[i].equals(ring[i - 1])) {\r\n                    ring.splice(i, 1);\r\n                }\r\n            }\r\n        });\r\n        polygon.setCoordinates(rings);\r\n        const shape = this.toShape(polygon);\r\n        const center = this.coordinateToVector3(polygon.getCenter());\r\n        height = maptalks.Util.isNumber(height) ? height : altitude;\r\n        height = this.distanceToVector3(height, height).x;\r\n        const amount = this.distanceToVector3(altitude, altitude).x;\r\n        //{ amount: extrudeH, bevelEnabled: true, bevelSegments: 2, steps: 2, bevelSize: 1, bevelThickness: 1 };\r\n        const config: { [key: string]: any } = { 'bevelEnabled': false, 'bevelSize': 1 };\r\n        const name = parseInt(THREE.REVISION) >= 93 ? 'depth' : 'amount';\r\n        config[name] = height;\r\n        const geom = new THREE.ExtrudeGeometry(shape, config);\r\n        let buffGeom = geom as any;\r\n        if ((THREE.BufferGeometry.prototype as any).fromGeometry) {\r\n            buffGeom = new THREE.BufferGeometry();\r\n            buffGeom.fromGeometry(geom);\r\n        }\r\n        const mesh = new THREE.Mesh(buffGeom, material);\r\n        mesh.position.set(center.x, center.y, amount - height);\r\n        return mesh;\r\n    }\r\n\r\n\r\n    /**\r\n     *\r\n     * @param {maptalks.Polygon|maptalks.MultiPolygon} polygon\r\n     * @param {Object} options\r\n     * @param {THREE.Material} material\r\n     */\r\n    toExtrudePolygon(polygon: PolygonType, options: ExtrudePolygonOptionType, material: THREE.Material): ExtrudePolygon {\r\n        return new ExtrudePolygon(polygon, options, material, this);\r\n    }\r\n\r\n\r\n    /**\r\n     *\r\n     * @param {maptalks.Coordinate} coordinate\r\n     * @param {Object} options\r\n     * @param {THREE.Material} material\r\n     */\r\n    toBar(coordinate: maptalks.Coordinate, options: BarOptionType, material: THREE.Material): Bar {\r\n        return new Bar(coordinate, options, material, this);\r\n    }\r\n\r\n\r\n    /**\r\n    *\r\n    * @param {maptalks.LineString} lineString\r\n    * @param {Object} options\r\n    * @param {THREE.LineMaterial} material\r\n    */\r\n    toLine(lineString: LineStringType, options: LineOptionType, material: LineMaterialType): Line {\r\n        return new Line(lineString, options, material, this);\r\n    }\r\n\r\n\r\n    /**\r\n     *\r\n     * @param {maptalks.LineString} lineString\r\n     * @param {Object} options\r\n     * @param {THREE.Material} material\r\n     */\r\n    toExtrudeLine(lineString: LineStringType, options: ExtrudeLineOptionType, material: THREE.Material): ExtrudeLine {\r\n        return new ExtrudeLine(lineString, options, material, this);\r\n    }\r\n\r\n\r\n    /**\r\n     *\r\n     * @param {THREE.Mesh|THREE.Group} model\r\n     * @param {Object} options\r\n     */\r\n    toModel(model: THREE.Object3D, options: BaseObjectOptionType): Model {\r\n        return new Model(model, options, this);\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     *\r\n     * @param {maptalks.LineString} lineString\r\n     * @param {*} options\r\n     * @param {THREE.Material} material\r\n     */\r\n    toExtrudeLineTrail(lineString: SingleLineStringType, options: ExtrudeLineTrailOptionType, material: THREE.Material): ExtrudeLineTrail {\r\n        return new ExtrudeLineTrail(lineString, options, material, this);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {*} polygons\r\n     * @param {*} options\r\n     * @param {*} material\r\n     */\r\n    toExtrudePolygons(polygons: Array<PolygonType>, options: ExtrudePolygonOptionType, material: THREE.Material): ExtrudePolygons {\r\n        return new ExtrudePolygons(polygons, options, material, this);\r\n    }\r\n\r\n\r\n    /**\r\n     *\r\n     * @param {maptalks.Coordinate} coordinate\r\n     * @param {*} options\r\n     * @param {*} material\r\n     */\r\n    toPoint(coordinate: maptalks.Coordinate, options: PointOptionType, material: THREE.PointsMaterial): Point {\r\n        return new Point(coordinate, options, material, this);\r\n    }\r\n\r\n\r\n    /**\r\n     *\r\n     * @param {Array} points\r\n     * @param {*} options\r\n     * @param {*} material\r\n     */\r\n    toPoints(points: Array<PointOptionType>, options: PointOptionType, material: THREE.PointsMaterial): Points {\r\n        return new Points(points, options, material, this);\r\n    }\r\n\r\n\r\n    /**\r\n     *\r\n     * @param {Array} points\r\n     * @param {*} options\r\n     * @param {*} material\r\n     */\r\n    toBars(points: Array<BarOptionType>, options: BarOptionType, material: THREE.Material): Bars {\r\n        return new Bars(points, options, material, this);\r\n    }\r\n\r\n\r\n    /**\r\n     *\r\n     * @param {Array[maptalks.LineString]} lineStrings\r\n     * @param {*} options\r\n     * @param {*} material\r\n     */\r\n    toExtrudeLines(lineStrings: Array<LineStringType>, options: ExtrudeLineOptionType, material: THREE.Material): ExtrudeLines {\r\n        return new ExtrudeLines(lineStrings, options, material, this);\r\n    }\r\n\r\n\r\n    /**\r\n     *\r\n     * @param {Array[maptalks.LineString]} lineStrings\r\n     * @param {*} options\r\n     * @param {*} material\r\n     */\r\n    toLines(lineStrings: Array<LineStringType>, options: LineOptionType, material: LineMaterialType): Lines {\r\n        return new Lines(lineStrings, options, material, this);\r\n    }\r\n\r\n\r\n    /**\r\n     *\r\n     * @param {*} url\r\n     * @param {*} options\r\n     * @param {*} getMaterial\r\n     * @param {*} worker\r\n     */\r\n    toThreeVectorTileLayer(url: string, options: any, getMaterial: getBaseObjectMaterialType): ThreeVectorTileLayer {\r\n        return new ThreeVectorTileLayer(url, options, getMaterial, this);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {*} extent\r\n     * @param {*} options\r\n     * @param {*} material\r\n     */\r\n    toTerrain(extent: maptalks.Extent, options: TerrainOptionType, material: THREE.Material): Terrain {\r\n        return new Terrain(extent, options, material, this);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {*} url\r\n     * @param {*} options\r\n     * @param {*} material\r\n     */\r\n    toTerrainVectorTileLayer(url: string, options: any, material: THREE.Material): TerrainVectorTileLayer {\r\n        return new TerrainVectorTileLayer(url, options, material, this);\r\n    }\r\n\r\n\r\n    /**\r\n     *\r\n     * @param {*} data\r\n     * @param {*} options\r\n     * @param {*} material\r\n     */\r\n    toHeatMap(data: Array<HeatMapDataType>, options: HeatMapOptionType, material: THREE.Material): HeatMap {\r\n        return new HeatMap(data, options, material, this);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {*} lineString\r\n     * @param {*} options\r\n     * @param {*} material\r\n     */\r\n    toFatLine(lineString: LineStringType, options: LineOptionType, material: FatLineMaterialType): FatLine {\r\n        return new FatLine(lineString, options, material, this);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {*} lineStrings\r\n     * @param {*} options\r\n     * @param {*} material\r\n     */\r\n    toFatLines(lineStrings: Array<LineStringType>, options, material: FatLineMaterialType): FatLines {\r\n        return new FatLines(lineStrings, options, material, this);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {*} coorindate\r\n     * @param {*} options\r\n     * @param {*} material\r\n     */\r\n    toBox(coorindate: maptalks.Coordinate, options: BarOptionType, material: THREE.Material): Box {\r\n        return new Box(coorindate, options, material, this);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {*} points\r\n     * @param {*} options\r\n     * @param {*} material\r\n     */\r\n    toBoxs(points: Array<BarOptionType>, options: BarOptionType, material: THREE.Material): Boxs {\r\n        return new Boxs(points, options, material, this);\r\n    }\r\n\r\n\r\n    getBaseObjects(): Array<BaseObject> {\r\n        return this.getMeshes().filter((mesh => {\r\n            return mesh instanceof BaseObject;\r\n        })) as any;\r\n    }\r\n\r\n\r\n    getMeshes(): Array<THREE.Object3D | BaseObject> {\r\n        const scene = this.getScene();\r\n        if (!scene) {\r\n            return [];\r\n        }\r\n        const meshes = [];\r\n        for (let i = 0, len = scene.children.length; i < len; i++) {\r\n            const child = scene.children[i];\r\n            if (child instanceof THREE.Object3D && !(child instanceof THREE.Camera)) {\r\n                meshes.push(child['__parent'] || child);\r\n            }\r\n        }\r\n        return meshes;\r\n    }\r\n\r\n\r\n    clear() {\r\n        return this.clearMesh();\r\n    }\r\n\r\n    clearMesh() {\r\n        const scene = this.getScene();\r\n        if (!scene) {\r\n            return this;\r\n        }\r\n        for (let i = scene.children.length - 1; i >= 0; i--) {\r\n            const child = scene.children[i];\r\n            if (child instanceof THREE.Object3D && !(child instanceof THREE.Camera)) {\r\n                scene.remove(child);\r\n                const parent = child['__parent'];\r\n                if (parent && parent instanceof BaseObject) {\r\n                    parent.isAdd = false;\r\n                    parent._fire('remove', { target: parent });\r\n                    delete this._animationBaseObjectMap[child.uuid];\r\n                }\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    lookAt(vector: THREE.Vector3) {\r\n        const renderer = this._getRenderer();\r\n        if (renderer) {\r\n            renderer.context.lookAt(vector);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    getCamera(): THREE.Camera {\r\n        const renderer = this._getRenderer();\r\n        if (renderer) {\r\n            return renderer.camera;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    getScene(): THREE.Scene {\r\n        const renderer = this._getRenderer();\r\n        if (renderer) {\r\n            return renderer.scene;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    renderScene() {\r\n        const renderer = this._getRenderer();\r\n        if (renderer) {\r\n            renderer.clearCanvas();\r\n            renderer.renderScene();\r\n        }\r\n        return this;\r\n    }\r\n\r\n    loop(render: boolean = false) {\r\n        const delayMeshes = this._delayMeshes;\r\n        if (!delayMeshes.length) {\r\n            return;\r\n        }\r\n        const map = this.getMap();\r\n        if (!map || map.isAnimating() || map.isInteracting()) {\r\n            return;\r\n        }\r\n        const loopRenderCount = this.options.loopRenderCount || 50;\r\n        const meshes = delayMeshes.slice(0, loopRenderCount);\r\n        if (meshes) {\r\n            this.addMesh(meshes, render);\r\n        }\r\n        delayMeshes.splice(0, loopRenderCount);\r\n    }\r\n\r\n    renderPickScene() {\r\n        const renderer = this._getRenderer();\r\n        if (renderer) {\r\n            const pick = renderer.pick;\r\n            if (pick) {\r\n                pick.pick(this._containerPoint);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    getThreeRenderer(): THREE.WebGLRenderer {\r\n        const renderer = this._getRenderer();\r\n        if (renderer) {\r\n            return renderer.context;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    getPick(): GPUPick {\r\n        const renderer = this._getRenderer();\r\n        if (renderer) {\r\n            return renderer.pick;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    delayAddMesh(meshes: Array<BaseObject>) {\r\n        if (!meshes) return this;\r\n        if (!Array.isArray(meshes)) {\r\n            meshes = [meshes];\r\n        }\r\n        for (let i = 0, len = meshes.length; i < len; i++) {\r\n            this._delayMeshes.push(meshes[i]);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * add object3ds\r\n     * @param {BaseObject} meshes\r\n     */\r\n    addMesh(meshes: Array<BaseObject | THREE.Object3D>, render: boolean = true) {\r\n        if (!meshes) return this;\r\n        if (!Array.isArray(meshes)) {\r\n            meshes = [meshes];\r\n        }\r\n        const scene = this.getScene();\r\n        meshes.forEach(mesh => {\r\n            if (mesh instanceof BaseObject) {\r\n                scene.add(mesh.getObject3d());\r\n                if (!mesh.isAdd) {\r\n                    mesh.isAdd = true;\r\n                    mesh._fire('add', { target: mesh });\r\n                }\r\n                if (mesh._animation && maptalks.Util.isFunction(mesh._animation)) {\r\n                    this._animationBaseObjectMap[mesh.getObject3d().uuid] = mesh;\r\n                }\r\n            } else if (mesh instanceof THREE.Object3D) {\r\n                scene.add(mesh);\r\n            }\r\n        });\r\n        this._zoomend();\r\n        if (render) {\r\n            this.renderScene();\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * remove object3ds\r\n     * @param {BaseObject} meshes\r\n     */\r\n    removeMesh(meshes: Array<BaseObject | THREE.Object3D>, render: boolean = true) {\r\n        if (!meshes) return this;\r\n        if (!Array.isArray(meshes)) {\r\n            meshes = [meshes];\r\n        }\r\n        const scene = this.getScene();\r\n        meshes.forEach(mesh => {\r\n            if (mesh instanceof BaseObject) {\r\n                scene.remove(mesh.getObject3d());\r\n                if (mesh.isAdd) {\r\n                    mesh.isAdd = false;\r\n                    mesh._fire('remove', { target: mesh });\r\n                }\r\n                if (mesh._animation && maptalks.Util.isFunction(mesh._animation)) {\r\n                    delete this._animationBaseObjectMap[mesh.getObject3d().uuid];\r\n                }\r\n                const delayMeshes = this._delayMeshes;\r\n                if (delayMeshes.length) {\r\n                    for (let i = 0, len = delayMeshes.length; i < len; i++) {\r\n                        if (delayMeshes[i] === mesh) {\r\n                            delayMeshes.splice(i, 1);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            } else if (mesh instanceof THREE.Object3D) {\r\n                scene.remove(mesh);\r\n            }\r\n        });\r\n        if (render) {\r\n            this.renderScene();\r\n        }\r\n        return this;\r\n    }\r\n\r\n    _initRaycaster() {\r\n        if (!this._raycaster) {\r\n            this._raycaster = new THREE.Raycaster();\r\n            this._mouse = new THREE.Vector2();\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {Coordinate} coordinate\r\n     * @param {Object} options\r\n     * @return {Array}\r\n     */\r\n    identify(coordinate: maptalks.Coordinate, options: object): Array<BaseObject | THREE.Object3D> {\r\n        if (!coordinate) {\r\n            console.error('coordinate is null,it should be Coordinate');\r\n            return [];\r\n        }\r\n        if (Array.isArray(coordinate)) {\r\n            coordinate = new maptalks.Coordinate(coordinate);\r\n        }\r\n        if (!(coordinate instanceof maptalks.Coordinate)) {\r\n            console.error('coordinate type is error,it should be Coordinate');\r\n            return [];\r\n        }\r\n        const p = this.getMap().coordToContainerPoint(coordinate);\r\n        this._containerPoint = p;\r\n        const { x, y } = p;\r\n        this._initRaycaster();\r\n        const raycaster = this._raycaster,\r\n            mouse = this._mouse,\r\n            camera = this.getCamera(),\r\n            scene = this.getScene(),\r\n            size = this.getMap().getSize();\r\n        //fix Errors will be reported when the layer is not initialized\r\n        if (!scene) {\r\n            return [];\r\n        }\r\n        const width = size.width,\r\n            height = size.height;\r\n        mouse.x = (x / width) * 2 - 1;\r\n        mouse.y = -(y / height) * 2 + 1;\r\n        raycaster.setFromCamera(mouse, camera);\r\n        //set linePrecision for THREE.Line\r\n        setRaycasterLinePrecision(raycaster, this._getLinePrecision(this.getMap().getResolution()));\r\n        const children: Array<THREE.Object3D> = [], hasidentifyChildren: Array<BaseObject> = [];\r\n        scene.children.forEach(mesh => {\r\n            const parent = mesh['__parent'];\r\n            if (parent && parent.getOptions) {\r\n                const baseObject = parent as BaseObject;\r\n                const interactive = baseObject.getOptions().interactive;\r\n                if (interactive && baseObject.isVisible()) {\r\n                    //If baseobject has its own hit detection\r\n                    if (baseObject.identify && maptalks.Util.isFunction(baseObject.identify)) {\r\n                        hasidentifyChildren.push(baseObject);\r\n                    } else {\r\n                        children.push(mesh);\r\n                    }\r\n                }\r\n            } else if (mesh instanceof THREE.Mesh || mesh instanceof THREE.Group) {\r\n                children.push(mesh);\r\n            }\r\n        });\r\n        let baseObjects: Array<THREE.Object3D | BaseObject> = [];\r\n        const intersects = raycaster.intersectObjects(children, true);\r\n        if (intersects && Array.isArray(intersects) && intersects.length) {\r\n            baseObjects = intersects.map(intersect => {\r\n                let object: any = intersect.object;\r\n                object = this._recursionMesh(object) || {};\r\n                const baseObject = object['__parent'] || object;\r\n                baseObject.faceIndex = intersect.faceIndex;\r\n                baseObject.index = intersect.index;\r\n                return baseObject;\r\n            });\r\n        }\r\n        this.renderPickScene();\r\n        if (hasidentifyChildren.length) {\r\n            hasidentifyChildren.forEach(baseObject => {\r\n                // baseObject identify\r\n                if (baseObject.identify(coordinate)) {\r\n                    baseObjects.push(baseObject);\r\n                }\r\n            });\r\n        }\r\n        const len = baseObjects.length;\r\n        for (let i = 0; i < len; i++) {\r\n            if (baseObjects[i]) {\r\n                for (let j = i + 1; j < len; j++) {\r\n                    if (baseObjects[i] === baseObjects[j]) {\r\n                        baseObjects.splice(j, 1);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        options = maptalks.Util.extend({}, options);\r\n        const count = options['count'];\r\n        return (maptalks.Util.isNumber(count) && count > 0 ? baseObjects.slice(0, count) : baseObjects);\r\n    }\r\n\r\n    /**\r\n    * Recursively finding the root node of mesh,Until it is scene node\r\n    * @param {*} mesh\r\n    */\r\n    _recursionMesh(mesh: THREE.Object3D): THREE.Object3D {\r\n        while (mesh && ((mesh.parent !== this.getScene()))) {\r\n            mesh = mesh.parent;\r\n        }\r\n        return mesh;\r\n    }\r\n\r\n    //get Line Precision by Resolution\r\n    _getLinePrecision(res = 10): number {\r\n        for (let i = 0, len = LINEPRECISIONS.length; i < len; i++) {\r\n            const [resLevel, precision] = LINEPRECISIONS[i];\r\n            if (res > resLevel) {\r\n                return precision;\r\n            }\r\n        }\r\n        return 0.01;\r\n    }\r\n\r\n    /**\r\n     * fire baseObject events\r\n     * @param {*} e\r\n     */\r\n    _identifyBaseObjectEvents(e: any) {\r\n        if (!this.options.geometryEvents) {\r\n            return this;\r\n        }\r\n        const map = this.map || this.getMap();\r\n        //When map interaction, do not carry out mouse movement detection, which can have better performance\r\n        if (map.isInteracting() || !map.options.geometryEvents) {\r\n            return this;\r\n        }\r\n        const { type, coordinate } = e;\r\n        const now = maptalks.Util.now();\r\n        if (this._mousemoveTimeOut && type === 'mousemove') {\r\n            if (now - this._mousemoveTimeOut < 64) {\r\n                return this;\r\n            }\r\n        }\r\n        this._mousemoveTimeOut = now;\r\n        map.resetCursor('default');\r\n        const identifyCountOnEvent = this.options['identifyCountOnEvent'];\r\n        let count = Math.max(0, maptalks.Util.isNumber(identifyCountOnEvent) ? identifyCountOnEvent : 0);\r\n        if (count === 0) {\r\n            count = Infinity;\r\n        }\r\n        const baseObjects = this.identify(coordinate, { count });\r\n        const scene = this.getScene();\r\n        if (baseObjects.length === 0 && scene) {\r\n            for (let i = 0, len = scene.children.length; i < len; i++) {\r\n                const child = scene.children[i] || {};\r\n                const parent = child['__parent'];\r\n                if (parent) {\r\n                    (parent as BaseObject).fire('empty', Object.assign({}, e, { target: parent }));\r\n                }\r\n            }\r\n        }\r\n        if (type === 'mousemove') {\r\n            if (baseObjects.length) {\r\n                map.setCursor('pointer');\r\n            }\r\n            // mouseout objects\r\n            const outBaseObjects: Array<THREE.Object3D | BaseObject> = [];\r\n            if (this._baseObjects) {\r\n                this._baseObjects.forEach(baseObject => {\r\n                    let isOut = true;\r\n                    baseObjects.forEach(baseO => {\r\n                        if (baseObject === baseO) {\r\n                            isOut = false;\r\n                        }\r\n                    });\r\n                    if (isOut) {\r\n                        outBaseObjects.push(baseObject);\r\n                    }\r\n                });\r\n            }\r\n            outBaseObjects.forEach(baseObject => {\r\n                if (baseObject && baseObject instanceof BaseObject) {\r\n                    // reset _mouseover status\r\n                    // Deal with the mergedmesh\r\n                    if (baseObject.getSelectMesh) {\r\n                        if (!baseObject.isHide) {\r\n                            baseObject._mouseover = false;\r\n                            baseObject.fire('mouseout', Object.assign({}, e, { target: baseObject, type: 'mouseout', selectMesh: null }));\r\n                            baseObject.closeToolTip();\r\n                        }\r\n                    } else {\r\n                        baseObject._mouseover = false;\r\n                        baseObject.fire('mouseout', Object.assign({}, e, { target: baseObject, type: 'mouseout' }));\r\n                        baseObject.closeToolTip();\r\n                    }\r\n                }\r\n            });\r\n            baseObjects.forEach(baseObject => {\r\n                if (baseObject instanceof BaseObject) {\r\n                    if (!baseObject._mouseover) {\r\n                        baseObject.fire('mouseover', Object.assign({}, e, { target: baseObject, type: 'mouseover', selectMesh: (baseObject.getSelectMesh ? baseObject.getSelectMesh() : null) }));\r\n                        baseObject._mouseover = true;\r\n                    }\r\n                    baseObject.fire(type, Object.assign({}, e, { target: baseObject, selectMesh: (baseObject.getSelectMesh ? baseObject.getSelectMesh() : null) }));\r\n                    // tooltip\r\n                    const tooltip = baseObject.getToolTip();\r\n                    if (tooltip && (!tooltip._owner)) {\r\n                        tooltip.addTo(baseObject);\r\n                    }\r\n                    baseObject.openToolTip(coordinate);\r\n                }\r\n            });\r\n            this._baseObjects = baseObjects as any;\r\n        } else {\r\n            baseObjects.forEach(baseObject => {\r\n                if (baseObject instanceof BaseObject) {\r\n                    baseObject.fire(type, Object.assign({}, e, { target: baseObject, selectMesh: (baseObject.getSelectMesh ? baseObject.getSelectMesh() : null) }));\r\n                    if (type === 'click') {\r\n                        const infoWindow = baseObject.getInfoWindow();\r\n                        if (infoWindow && (!infoWindow._owner)) {\r\n                            infoWindow.addTo(baseObject);\r\n                        }\r\n                        baseObject.openInfoWindow(coordinate);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     *map zoom event\r\n     */\r\n    _zoomend() {\r\n        const scene = this.getScene();\r\n        if (!scene) {\r\n            return;\r\n        }\r\n        const zoom = this.getMap().getZoom();\r\n        scene.children.forEach(mesh => {\r\n            const parent = mesh['__parent'];\r\n            if (parent && parent.getOptions) {\r\n                const baseObject = parent as BaseObject;\r\n                if (baseObject.zoomChange && maptalks.Util.isFunction(baseObject.zoomChange)) {\r\n                    baseObject.zoomChange(zoom);\r\n                }\r\n                const minZoom = baseObject.getMinZoom(), maxZoom = baseObject.getMaxZoom();\r\n                if (zoom < minZoom || zoom > maxZoom) {\r\n                    if (baseObject.isVisible()) {\r\n                        baseObject.getObject3d().visible = false;\r\n                    }\r\n                    baseObject._zoomVisible = false;\r\n                } else if (minZoom <= zoom && zoom <= maxZoom) {\r\n                    if (baseObject._visible) {\r\n                        baseObject.getObject3d().visible = true;\r\n                    }\r\n                    baseObject._zoomVisible = true;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    onAdd() {\r\n        super.onAdd();\r\n        const map = this.map || this.getMap();\r\n        if (!map) return this;\r\n        EVENTS.forEach(event => {\r\n            map.on(event, this._identifyBaseObjectEvents, this);\r\n        });\r\n        this._needsUpdate = true;\r\n        if (!this._animationBaseObjectMap) {\r\n            this._animationBaseObjectMap = {};\r\n        }\r\n        map.on('zooming zoomend', this._zoomend, this);\r\n        return this;\r\n    }\r\n\r\n    onRemove() {\r\n        super.onRemove();\r\n        const map = this.map || this.getMap();\r\n        if (!map) return this;\r\n        EVENTS.forEach(event => {\r\n            map.off(event, this._identifyBaseObjectEvents, this);\r\n        });\r\n        map.off('zooming zoomend', this._zoomend, this);\r\n        return this;\r\n    }\r\n\r\n    _callbackBaseObjectAnimation() {\r\n        const layer = this;\r\n        if (layer._animationBaseObjectMap) {\r\n            for (const uuid in layer._animationBaseObjectMap) {\r\n                const baseObject = layer._animationBaseObjectMap[uuid];\r\n                baseObject._animation();\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * To make map's 2d point's 1 pixel euqal with 1 pixel on XY plane in THREE's scene:\r\n     * 1. fov is 90 and camera's z is height / 2 * scale,\r\n     * 2. if fov is not 90, a ratio is caculated to transfer z to the equivalent when fov is 90\r\n     * @return {Number} fov ratio on z axis\r\n     */\r\n    _getFovRatio(): number {\r\n        const map = this.getMap();\r\n        const fov = map.getFov();\r\n        return Math.tan(fov / 2 * RADIAN);\r\n    }\r\n}\r\n\r\nThreeLayer.mergeOptions(options);\r\n\r\nclass ThreeRenderer extends maptalks.renderer.CanvasLayerRenderer {\r\n    scene: THREE.Scene;\r\n    camera: THREE.Camera;\r\n    canvas: any\r\n    layer: ThreeLayer;\r\n    gl: any\r\n    context: THREE.WebGLRenderer;\r\n    matrix4: THREE.Matrix4;\r\n    pick: GPUPick;\r\n    _renderTime: number = 0;\r\n\r\n    getPrepareParams(): Array<any> {\r\n        return [this.scene, this.camera];\r\n    }\r\n\r\n    getDrawParams(): Array<any> {\r\n        return [this.scene, this.camera];\r\n    }\r\n\r\n    _drawLayer() {\r\n        super._drawLayer.apply(this, arguments);\r\n        // this.renderScene();\r\n    }\r\n\r\n    hitDetect(): boolean {\r\n        return false;\r\n    }\r\n\r\n    createCanvas() {\r\n        super.createCanvas();\r\n        this.createContext();\r\n    }\r\n\r\n    createContext() {\r\n        if (this.canvas.gl && this.canvas.gl.wrap) {\r\n            this.gl = this.canvas.gl.wrap();\r\n        } else {\r\n            const layer = this.layer;\r\n            const attributes = layer.options.glOptions || {\r\n                alpha: true,\r\n                depth: true,\r\n                antialias: true,\r\n                stencil: true,\r\n                preserveDrawingBuffer: false\r\n            };\r\n            attributes.preserveDrawingBuffer = true;\r\n            this.gl = this.gl || this._createGLContext(this.canvas, attributes);\r\n        }\r\n        this._initThreeRenderer();\r\n        this.layer.onCanvasCreate(this.context, this.scene, this.camera);\r\n    }\r\n\r\n    _initThreeRenderer() {\r\n        this.matrix4 = new THREE.Matrix4();\r\n        const renderer = new THREE.WebGLRenderer({ 'context': this.gl, alpha: true });\r\n        renderer.autoClear = false;\r\n        renderer.setClearColor(new THREE.Color(1, 1, 1), 0);\r\n        renderer.setSize(this.canvas.width, this.canvas.height);\r\n        renderer.clear();\r\n        // renderer.canvas = this.canvas;\r\n        this.context = renderer;\r\n\r\n        const scene = this.scene = new THREE.Scene();\r\n        const map = this.layer.getMap();\r\n        const fov = map.getFov() * Math.PI / 180;\r\n        const camera = this.camera = new THREE.PerspectiveCamera(fov, map.width / map.height, map.cameraNear, map.cameraFar);\r\n        camera.matrixAutoUpdate = false;\r\n        this._syncCamera();\r\n        scene.add(camera);\r\n        this.pick = new GPUPick(this.layer);\r\n    }\r\n\r\n    onCanvasCreate() {\r\n        super.onCanvasCreate();\r\n\r\n    }\r\n\r\n    resizeCanvas(canvasSize: maptalks.Size) {\r\n        if (!this.canvas) {\r\n            return;\r\n        }\r\n        let size, map = this.getMap();\r\n        if (!canvasSize) {\r\n            size = map.getSize();\r\n        } else {\r\n            size = canvasSize;\r\n        }\r\n        // const r = maptalks.Browser.retina ? 2 : 1;\r\n        const r = map.getDevicePixelRatio ? map.getDevicePixelRatio() : (maptalks.Browser.retina ? 2 : 1);\r\n        const canvas = this.canvas;\r\n        //retina support\r\n        canvas.height = r * size['height'];\r\n        canvas.width = r * size['width'];\r\n        if (this.layer._canvas && canvas.style) {\r\n            canvas.style.width = size.width + 'px';\r\n            canvas.style.height = size.height + 'px';\r\n        }\r\n        this.context.setSize(canvas.width, canvas.height);\r\n    }\r\n\r\n    clearCanvas() {\r\n        if (!this.canvas) {\r\n            return;\r\n        }\r\n\r\n        this.context.clear();\r\n    }\r\n\r\n    prepareCanvas(): any {\r\n        if (!this.canvas) {\r\n            this.createCanvas();\r\n        } else {\r\n            this.clearCanvas();\r\n        }\r\n        this.layer.fire('renderstart', { 'context': this.context });\r\n        return null;\r\n    }\r\n\r\n    renderScene() {\r\n        const time = maptalks.Util.now();\r\n        // Make sure to execute only once in a frame\r\n        if (time - this._renderTime >= 16) {\r\n            this.layer._callbackBaseObjectAnimation();\r\n            this._renderTime = time;\r\n        }\r\n        this._syncCamera();\r\n        this.context.render(this.scene, this.camera);\r\n        this.completeRender();\r\n    }\r\n\r\n    remove() {\r\n        delete this._drawContext;\r\n        super.remove();\r\n    }\r\n\r\n    _syncCamera() {\r\n        const map = this.getMap();\r\n        const camera = this.camera;\r\n        camera.matrix.elements = map.cameraWorldMatrix;\r\n        camera.projectionMatrix.elements = map.projMatrix;\r\n        //https://github.com/mrdoob/three.js/commit/d52afdd2ceafd690ac9e20917d0c968ff2fa7661\r\n        if (this.matrix4.invert) {\r\n            camera.projectionMatrixInverse.elements = this.matrix4.copy(camera.projectionMatrix).invert().elements;\r\n        } else {\r\n            camera.projectionMatrixInverse.elements = this.matrix4.getInverse(camera.projectionMatrix).elements;\r\n        }\r\n    }\r\n\r\n    _createGLContext(canvas: HTMLCanvasElement, options: object) {\r\n        const names = ['webgl2', 'webgl', 'experimental-webgl'];\r\n        let context = null;\r\n        /* eslint-disable no-empty */\r\n        for (let i = 0; i < names.length; ++i) {\r\n            try {\r\n                context = canvas.getContext(names[i], options);\r\n            } catch (e) { }\r\n            if (context) {\r\n                break;\r\n            }\r\n        }\r\n        return context;\r\n        /* eslint-enable no-empty */\r\n    }\r\n}\r\n\r\nThreeLayer.registerRenderer('gl', ThreeRenderer);\r\n\r\nfunction getGLRes(map: maptalks.Map) {\r\n    return map.getGLRes ? map.getGLRes() : map.getGLZoom();\r\n}\r\n\r\nfunction coordinateToPoint(map, coordinate, res, out?: any) {\r\n    if (map.coordToPointAtRes) {\r\n        return map.coordToPointAtRes(coordinate, res, out);\r\n    }\r\n    return map.coordinateToPoint(coordinate, res, out);\r\n}\r\n\r\nexport {\r\n    ThreeLayer, ThreeRenderer, BaseObject,\r\n    MergedMixin,\r\n    GeoJSONUtil, MergeGeometryUtil, GeoUtil, ExtrudeUtil, LineUtil,\r\n    IdentifyUtil, geometryExtrude,\r\n    LineMaterial\r\n};\r\n\r\nif (maptalks.registerWorkerAdapter) {\r\n    maptalks.registerWorkerAdapter(getWorkerName(), getWorkerCode());\r\n}\r\n"],"names":["REVISION","parseInt","THREE","replace","console","log","addAttribute","bufferGeomertry","key","value","setAttribute","setRaycasterLinePrecision","raycaster","linePrecision","params","Line","threshold","getVertexColors","LineSegmentsGeometry","type","positions","uvs","index","setIndex","applyMatrix","matrix","start","attributes","instanceStart","end","instanceEnd","undefined","applyToBufferAttribute","data","needsUpdate","boundingBox","computeBoundingBox","boundingSphere","computeBoundingSphere","setPositions","array","lineSegments","Float32Array","Array","isArray","instanceBuffer","setColors","colors","instanceColorBuffer","fromWireframeGeometry","geometry","position","fromEdgesGeometry","fromMesh","mesh","fromLineSegements","isGeometry","vertices","isBufferGeometry","box","setFromBufferAttribute","union","vector","center","getCenter","maxRadiusSq","i","il","count","fromBufferAttribute","Math","max","distanceToSquared","radius","sqrt","isNaN","error","toJSON","copy","source","UniformsLib","ShaderLib","line","linewidth","resolution","dashScale","dashSize","gapSize","uniforms","merge","common","fog","vertexShader","fragmentShader","LineMaterial","parameters","clone","Object","defineProperties","color","enumerable","get","diffuse","set","setValues","LineSegments2","material","random","computeLineDistances","lineDistances","j","l","distanceTo","instanceDistanceBuffer","LineGeometry","fromLine","Line2","OPTIONS","interactive","altitude","minZoom","maxZoom","asynchronous","Base","BaseObject","id","maptalks","GUID","addTo","layer","addMesh","remove","getLayer","removeMesh","getObject3d","object3d","getId","setId","oldId","_fire","getType","getOptions","options","getProperties","properties","setProperties","property","old","assign","getMap","coordinate","lineString","polygon","getAltitude","setAltitude","isNumber","z","distanceToVector3","x","pickObject3d","_baseObjects","len","length","show","_zoomVisible","visible","_visible","hide","isVisible","getSymbol","setSymbol","vertexColors","setInfoWindow","removeInfoWindow","infoWindow","InfoWindow","getInfoWindow","openInfoWindow","closeInfoWindow","setToolTip","content","removeToolTip","toolTip","ToolTip","getToolTip","openToolTip","closeToolTip","animateShow","cb","_showPlayer","cancel","isFunction","duration","easing","player","Animation","animate","frame","scale","styles","play","getMinZoom","getMaxZoom","isAsynchronous","fire","eventType","param","_vt","onSelectMesh","config","setPickObject3d","_initOptions","extend","_createMesh","_createGroup","_createLine","_createLine2","_createPoints","_createLineSegments","mergeBufferGeometries","geometries","mergeBufferGeometriesAttribute","normal","uv","indices","fill","attributesLen","name","push","mergedGeometry","indexOffset","mergedIndex","Uint32Array","iIndex","len1","mergedAttribute","mergeBufferAttributes","arrayLength","offset","generateBufferGeometry","generatePickBufferGeometry","getAttribute","getIndex","defaultBufferGeometry","getDefaultBufferGeometry","SIZE","barGeometryCache","defaultBoxGeometry","translate","topColor","bottomColor","getDefaultCylinderBufferGeometry","radialSegments","rotateX","PI","rotateZ","getGeometry","height","initVertexColors","_topColor","v","setStyle","y","r","g","b","mergeBarGeometry","colorLen","bufferGeometry","dispose","getDefaultBoxGeometry","Bar","coordinateToVector3","distance","cache","getCenterOfPoints","coordinates","sumX","sumY","lnglat","lnglats","xy","xys","c","setBottomHeight","bottomHeight","h","getGeometriesColorArray","geometriesAttributes","colorsLen","area","earcut","doSimplify","TYPES","getGeoJSONType","feature","isGeoJSON","isGeoJSONPolygon","isGeoJSONLine","isGeoJSONPoint","isGeoJSONMulti","indexOf","getGeoJSONCoordinates","getGeoJSONCenter","out","coordLen","m","len2","spliteGeoJSONMulti","features","fType","COMMA","getLinePosition","positionsV","cent","getCoordinates","centerPt","sub","positions2d","idx","idx1","getExtrudeLineGeometry","lineWidth","depth","getExtrudeLineParams","getChunkLinesPosition","chunkLines","positionMap","join","toString","key1","ps","p","extrudePolyline","LineStringSplit","lineStrings","getGeometries","setLineSegmentPosition","initColors","cs","forEach","getExtrudeGeometry","getExtrudeGeometryParams","altCache","datas","getPolygonPositions","shapes","extrudePolygon","minZ","middleZ","isArrayBuff","map","getSinglePolygonPositions","fs","shell","holes","slice","getShell","getHoles","outer","buffer","pts","pt","width","ExtrudeLine","w","extrudeParams","attribute","ExtrudePolygon","extrudeH","Model","model","warn","add","R","MINLENGTH","formatLineArray","polyline","toArray","degreesToRadians","d","c1","c2","e","f","asin","pow","sin","cos","round","lineLength","lnglatArray","getPercentLngLat","dx","dy","percent","lng","lat","lineSlice","lineChunkLength","LEN","list","totalLen","floorlen","floor","LNGLATSLEN","first","currentLngLat","currentLen","lines","lls","offsetLen","MAX_POINTS","setExtrudeLineGeometryAttribute","norls","normals","trail","chunkLength","speed","ExtrudeLineTrail","chunkLine","inds","Uint16Array","_params","min","loaded","_init","_animation","EVENTS","defaultMaterial","MergedMixin","_initBaseObjectsEvent","baseObjects","baseObject","_proxyEvent","on","_showGeometry","target","_mouseover","selectMesh","getSelectMesh","_getHideGeometryIndex","indexs","_geometriesAttributes","_updateAttribute","bufferAttribute","_geometryCache","NaN","isHide","geometryAttributes","buffGeom","_getIndex","_datas","faceIndex","pick","getPick","_setPickObject3d","cIndex","getColor","colorIndex","getHex","_colorMap","workerName","getWorkerName","MeshActor","test","info","send","pushQueue","q","callback","gengerateExtrudePolygons","gengerateExtrudeLines","transfe","err","message","Actor","actor","getActor","polygons","transfer","lineStringList","multiLineString","TEMP_COORD","ExtrudePolygons","minX","Infinity","minY","maxX","maxY","extrudePolygons","faceMap","_faceMap","isAdd","psIndex","normalIndex","uvIndex","faceLen","psCount","normalCount","uvCount","opts","identify","picked","positionsConvert","worldPoints","vectors","vectors2Pixel","size","camera","pixels","worldPoint","vector2Pixel","world_vector","project","halfWidth","halfHeight","result","Point","vs","z1","v1","getSize","getCamera","pointSize","pixel","coordToContainerPoint","ROW","COL","contains","minx","miny","maxx","maxy","BBox","minlng","minlat","maxlng","maxlat","updateBBoxPixel","containsCoordinate","isRecCross","rec","initGrids","grids","offsetX","offsetY","averageX","averageY","bounds","ROWS","COLS","roundFun","n","tempValue","Points","points","coords","gridslen","sizes","pointMeshes","maxSize","hasColor","hasSize","TEMP_VECTOR","row","col","ceil","gridIndex","_grids","_bindMapEvents","events","_updateGrids","off","isDynamicSize","bs","Bars","bars","alt","parray","bar","ExtrudeLines","centers","extrudeLines","le","Lines","MAX","waitingQueue","currentQueue","getQueues","url","img","vt","loopMessage","outQueue","deleteQueueItem","queArray","splice","nextLoop","last","canvas","document","createElement","generateImage","debug","ctx","getContext","clearRect","save","fillStyle","strokeStyle","text","font","rect","stroke","fillText","toDataURL","createCanvas","BaseVectorTileLayer","urlTemplate","_opts","_layer","getMaterial","_baseObjectKeys","_loadTiles","_add","_layerLaodTime","Date","getTime","worker","getBaseObjects","loadTiles","baseos","baseobjects","formatBaseObjects","json","getTileData","getJSON","res","_getCurentTileKeys","tileGrids","getTiles","keys","keysMap","tiles","_isLoad","keys1","_renderer","tilesInView","_layerOnLoad","time","offsetTime","threeLayer","tilesInViewLen","loadTilesLen","needsRemoveBaseObjects","baseobject","_getXYZOfIndex","getTileUrl","_diffCache","_workerLoad","_img","currentCount","needCount","src","_key","_generateBaseObjects","_cachetile","filter","tileCache","_diposeBaseObject","bos","bo","splitstr","split","x1","y1","_getTileExtent","_getResolution","tileConfig","_getTileConfig","tileExtent","getTilePrjExtent","_getTileLngLatExtent","getMax","getMin","projection","getProjection","unproject","ThreeVectorTileLayer","layerName","geojson","_getMaterial","extrudepolygons","toExtrudePolygons","toLines","toPoints","intervalId","setInterval","isInteracting","clearInterval","renderer","loadTile","tile","tileSize","getTileSize","tileImage","Image","onload","onTileLoad","bind","onerror","onTileError","loadTileImage","deleteTile","image","tileinfo","getPlaneGeometryAttribute","devideW","devideH","tempIndex","uIndex","uvx","uvy","a","indexArray","getPlaneGeometry","textureLoader","getRGBData","drawImage","getImageData","HTMLCanvasElement","crossOrigin","imageWidth","imageHeight","texture","Terrain","extent","xmin","ymin","xmax","ymax","vxmin","vymin","vxmax","vymax","coord","abs","rgbImg","transparent","opacity","imgdata","G","B","load","tileDivisor","TerrainVectorTileLayer","_imgQueue","zoom","getZoom","terrain","rgbImage","Intensity","gradient","minSize","initPalette","prototype","setMax","setMin","setMaxSize","setMinSize","paletteCtx","lineGradient","createLinearGradient","addColorStop","parseFloat","fillRect","imageData","getLegend","createCircle","shadowBlur","r2","offsetDistance","circle","context","shadowColor","shadowOffsetX","shadowOffsetY","beginPath","arc","closePath","colorize","diff","range","jMin","jMax","maxOpacity","minOpacity","drawGray","dataSet","_size","circleHalfWidth","circleHalfHeight","dataOrderByAlpha","item","alpha","toFixed","_data","withoutAlpha","globalAlpha","draw","strength","shadowCanvas","shadowContext","devicePixelRatio","intensity","absolute","colored","putImageData","restore","gridScale","CANVAS_MAX_SIZE","HeatMap","maxOffset","canvasWidth","canvasHeight","scaleX","scaleY","HeatMapUitl","maxAlpha","blackps","alphas","rgb","filterIndex","GPUPick","object3ds","getThreeRenderer","pickingTexture","pickingScene","setHex","isEmpty","children","_getRenderer","pw","ph","setSize","setRenderTarget","clear","render","pixelBuffer","Uint8Array","window","readRenderTargetPixels","parent","FatLine","_setMaterialRes","_colorIndex","FatLines","Box","Boxs","workerCode","getWorkerCode","RADIAN","LINEPRECISIONS","TEMP_POINT","ThreeLayer","isRendering","isAnimating","prepareToDraw","renderScene","drawOnInteracting","getGLRes","coordinateToPoint","locate","p0","p1","sign","toShape","shape","toExtrudeMesh","rings","ring","equals","setCoordinates","amount","geom","fromGeometry","toExtrudePolygon","toBar","toLine","toExtrudeLine","toModel","toExtrudeLineTrail","toPoint","toBars","toExtrudeLines","toThreeVectorTileLayer","toTerrain","toTerrainVectorTileLayer","toHeatMap","toFatLine","toFatLines","toBox","coorindate","toBoxs","getMeshes","scene","getScene","meshes","child","clearMesh","_animationBaseObjectMap","uuid","lookAt","clearCanvas","loop","delayMeshes","_delayMeshes","loopRenderCount","renderPickScene","_containerPoint","delayAddMesh","_zoomend","_initRaycaster","_raycaster","_mouse","mouse","setFromCamera","_getLinePrecision","getResolution","hasidentifyChildren","intersects","intersectObjects","intersect","object","_recursionMesh","resLevel","precision","_identifyBaseObjectEvents","geometryEvents","now","_mousemoveTimeOut","resetCursor","identifyCountOnEvent","setCursor","outBaseObjects","isOut","baseO","tooltip","_owner","zoomChange","onAdd","event","_needsUpdate","onRemove","_callbackBaseObjectAnimation","_getFovRatio","fov","getFov","tan","mergeOptions","ThreeRenderer","getPrepareParams","getDrawParams","_drawLayer","apply","arguments","hitDetect","createContext","gl","wrap","glOptions","antialias","stencil","preserveDrawingBuffer","_createGLContext","_initThreeRenderer","onCanvasCreate","matrix4","autoClear","setClearColor","cameraNear","cameraFar","matrixAutoUpdate","_syncCamera","resizeCanvas","canvasSize","getDevicePixelRatio","retina","_canvas","style","prepareCanvas","_renderTime","completeRender","_drawContext","elements","cameraWorldMatrix","projectionMatrix","projMatrix","invert","projectionMatrixInverse","getInverse","names","CanvasLayerRenderer","registerRenderer","getGLZoom","coordToPointAtRes"],"mappings":"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"}